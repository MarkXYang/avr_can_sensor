Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
                              avr_sja1000p.o (__mulsi3)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
                              sensor.o (__udivmodhi4)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
                              avr_sja1000p.o (__udivmodsi4)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o (exit)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
                              display.o (ltoa)
/usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o) (strrev)

Allocating common symbols
Common symbol       size              file

fsm_sensor          0x7               main.o
rx_msg              0xf               main.o
adc_data            0x3               sensor.o
chip                0xb               main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
LOAD main.o
LOAD lcd.o
LOAD display.o
LOAD sja_control.o
LOAD avr_sja1000p.o
LOAD sensor.o
LOAD timer.o
LOAD fsm.o
LOAD /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x15f8
 *(.vectors)
 .vectors       0x00000000       0x54 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000054                . = ALIGN (0x2)
                0x00000054                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000054        0x0 linker stubs
 *(.trampolines*)
                0x00000054                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000054                __ctors_start = .
 *(.ctors)
                0x00000054                __ctors_end = .
                0x00000054                __dtors_start = .
 *(.dtors)
                0x00000054                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000054        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x00000054                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000054        0xc /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000060       0x16 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
                0x00000060                __do_copy_data
 .init4         0x00000076       0x10 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
                0x00000076                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000086        0x8 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 *(.init9)
 *(.text)
 .text          0x0000008e        0x4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x0000008e                __vector_12
                0x0000008e                __bad_interrupt
                0x0000008e                __vector_6
                0x0000008e                __vector_3
                0x0000008e                __vector_11
                0x0000008e                __vector_13
                0x0000008e                __vector_17
                0x0000008e                __vector_7
                0x0000008e                __vector_5
                0x0000008e                __vector_4
                0x0000008e                __vector_9
                0x0000008e                __vector_2
                0x0000008e                __vector_15
                0x0000008e                __vector_8
                0x0000008e                __vector_10
                0x0000008e                __vector_16
                0x0000008e                __vector_18
                0x0000008e                __vector_20
 .text          0x00000092      0x17e main.o
                0x00000092                main
                0x000001aa                __vector_1
 .text          0x00000210      0x1f8 lcd.o
                0x000002d2                lcd_command
                0x000002e6                lcd_data
                0x000002fa                lcd_gotoxy
                0x0000030e                lcd_getxy
                0x00000316                lcd_clrscr
                0x0000031e                lcd_home
                0x00000326                lcd_putc
                0x00000350                lcd_puts
                0x00000370                lcd_puts_p
                0x00000394                lcd_init
 .text          0x00000408       0x94 display.o
                0x00000408                lcd_clear_line
                0x00000426                lcd_puts_line
                0x0000044a                debug
 .text          0x0000049c       0x96 sja_control.o
                0x0000049c                sja_init_ports
                0x000004b6                can_read_reg
                0x000004ea                can_write_reg
                0x00000522                can_enable_irq
                0x0000052a                can_disable_irq
 .text          0x00000532      0x95e avr_sja1000p.o
                0x00000532                sja1000p_send_msg
                0x0000053e                sja1000p_read
                0x00000674                sja1000p_irq_handler
                0x00000786                sja1000p_disable_configuration
                0x000007f0                sja1000p_enable_configuration
                0x0000087a                sja1000p_pre_write_config
                0x00000a10                sja1000p_baud_rate
                0x00000d06                sja1000p_extended_mask
                0x00000d78                sja1000p_chip_config
 .text          0x00000e90      0x586 sensor.o
                0x00000e90                fsm_sensor_init
                0x00000ece                sensor_init
                0x00001128                __vector_14
                0x000012a2                sensor_config
 .text          0x00001416       0x5e timer.o
                0x00001416                __vector_19
                0x00001460                timer0_init_1khz
 .text          0x00001474       0x4e fsm.o
                0x00001474                init_fsm
                0x00001486                run_fsm
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
 .text          0x000014c2        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                0x000014c2                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000014c2       0x3e /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
                0x000014c2                __mulsi3
 .text.libgcc   0x00001500       0x28 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
                0x00001500                __udivmodhi4
 .text.libgcc   0x00001528       0x44 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
                0x00001528                __udivmodsi4
 .text.libgcc   0x0000156c        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000156c        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000156c        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x0000156c       0x68 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
                0x0000156c                ltoa
 .text.avr-libc
                0x000015d4       0x20 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                0x000015d4                strrev
                0x000015f4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000015f4        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
                0x000015f4                exit
                0x000015f4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000015f4        0x4 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000015f8                _etext = .

.data           0x00800060      0x18a load address 0x000015f8
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .data          0x00800060       0x27 main.o
 .data          0x00800087        0x0 lcd.o
 .data          0x00800087        0x2 display.o
 .data          0x00800089        0x0 sja_control.o
 .data          0x00800089       0xd3 avr_sja1000p.o
 .data          0x0080015c       0x8e sensor.o
 .data          0x008001ea        0x0 timer.o
 .data          0x008001ea        0x0 fsm.o
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
 .data          0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x008001ea                . = ALIGN (0x2)
                0x008001ea                _edata = .
                0x008001ea                PROVIDE (__data_end, .)

.bss            0x008001ea       0x5b
                0x008001ea                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x008001ea        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .bss           0x008001ea        0x0 main.o
 .bss           0x008001ea        0x0 lcd.o
 .bss           0x008001ea        0x0 display.o
 .bss           0x008001ea        0x0 sja_control.o
 .bss           0x008001ea        0x0 avr_sja1000p.o
 .bss           0x008001ea       0x2f sensor.o
 .bss           0x00800219        0x8 timer.o
                0x00800219                timer_msec
                0x0080021d                timer_usec
 .bss           0x00800221        0x0 fsm.o
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
 .bss           0x00800221        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800221       0x21 main.o
                0x00800221                fsm_sensor
                0x00800228                rx_msg
                0x00800237                chip
 COMMON         0x00800242        0x3 sensor.o
                0x00800242                adc_data
                0x00800245                PROVIDE (__bss_end, .)
                0x000015f8                __data_load_start = LOADADDR (.data)
                0x00001782                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800245        0x0
                0x00800245                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800245                PROVIDE (__noinit_end, .)
                0x00800245                _end = .
                0x00800245                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x53b8
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .stab          0x000006b4      0x8c4 main.o
                                0x8d0 (size before relaxing)
 .stab          0x00000f78      0xc9c lcd.o
                                0xef4 (size before relaxing)
 .stab          0x00001c14      0x354 display.o
                                0x5b8 (size before relaxing)
 .stab          0x00001f68      0x54c sja_control.o
                                0x6fc (size before relaxing)
 .stab          0x000024b4     0x1704 avr_sja1000p.o
                               0x195c (size before relaxing)
 .stab          0x00003bb8     0x1050 sensor.o
                               0x1338 (size before relaxing)
 .stab          0x00004c08      0x21c timer.o
                                0x3fc (size before relaxing)
 .stab          0x00004e24      0x228 fsm.o
                                0x234 (size before relaxing)
 .stab          0x0000504c      0x294 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ltoa.o)
                                0x2a0 (size before relaxing)
 .stab          0x000052e0       0xd8 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                                 0xe4 (size before relaxing)

.stabstr        0x00000000     0x219d
 *(.stabstr)
 .stabstr       0x00000000     0x219d /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(../build/AVR_CAN_proj.elf elf32-avr)
LOAD linker stubs
