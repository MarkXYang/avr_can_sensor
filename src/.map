Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
                              avr_sja1000p.o (__mulsi3)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
                              sensor.o (__udivmodhi4)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
                              avr_sja1000p.o (__udivmodsi4)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o (exit)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
                              display.o (ultoa)
/usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                              /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o) (strrev)

Allocating common symbols
Common symbol       size              file

fsm_sensor          0x6               main.o
rx_msg              0xf               main.o
delay_time          0x4               timer.o
adc_data            0x3               sensor.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
LOAD main.o
LOAD lcd.o
LOAD display.o
LOAD sja_control.o
LOAD avr_sja1000p.o
LOAD sensor.o
LOAD timer.o
LOAD fsm.o
LOAD /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x12f6
 *(.vectors)
 .vectors       0x00000000       0x54 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000054                . = ALIGN (0x2)
                0x00000054                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000054        0x0 linker stubs
 *(.trampolines*)
                0x00000054                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000054                __ctors_start = .
 *(.ctors)
                0x00000054                __ctors_end = .
                0x00000054                __dtors_start = .
 *(.dtors)
                0x00000054                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000054        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x00000054                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000054        0xc /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000060       0x16 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
                0x00000060                __do_copy_data
 .init4         0x00000076       0x10 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
                0x00000076                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000086        0x8 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 *(.init9)
 *(.text)
 .text          0x0000008e        0x4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
                0x0000008e                __vector_12
                0x0000008e                __bad_interrupt
                0x0000008e                __vector_6
                0x0000008e                __vector_3
                0x0000008e                __vector_11
                0x0000008e                __vector_13
                0x0000008e                __vector_17
                0x0000008e                __vector_7
                0x0000008e                __vector_5
                0x0000008e                __vector_4
                0x0000008e                __vector_9
                0x0000008e                __vector_2
                0x0000008e                __vector_15
                0x0000008e                __vector_8
                0x0000008e                __vector_10
                0x0000008e                __vector_16
                0x0000008e                __vector_18
                0x0000008e                __vector_20
 .text          0x00000092      0x112 main.o
                0x00000092                main
                0x00000158                __vector_1
 .text          0x000001a4      0x1f8 lcd.o
                0x00000266                lcd_command
                0x0000027a                lcd_data
                0x0000028e                lcd_gotoxy
                0x000002a2                lcd_getxy
                0x000002aa                lcd_clrscr
                0x000002b2                lcd_home
                0x000002ba                lcd_putc
                0x000002e4                lcd_puts
                0x00000304                lcd_puts_p
                0x00000328                lcd_init
 .text          0x0000039c       0x94 display.o
                0x0000039c                lcd_clear_line
                0x000003ba                lcd_puts_line
                0x000003de                debug
 .text          0x00000430       0x96 sja_control.o
                0x00000430                sja_init_ports
                0x0000044a                can_read_reg
                0x0000047e                can_write_reg
                0x000004b6                can_enable_irq
                0x000004be                can_disable_irq
 .text          0x000004c6      0x6e4 avr_sja1000p.o
                0x000004c6                sja1000p_send_msg
                0x000004d2                sja1000p_read
                0x00000582                sja1000p_irq_handler
                0x000005d6                sja1000p_disable_configuration
                0x00000628                sja1000p_enable_configuration
                0x00000676                sja1000p_pre_write_config
                0x0000075a                sja1000p_baud_rate
                0x00000a36                sja1000p_extended_mask
                0x00000aa8                sja1000p_chip_config
 .text          0x00000baa      0x51e sensor.o
                0x00000baa                __vector_14
                0x00000d06                fsm_sensor_init
                0x00000f5e                sensor_config
 .text          0x000010c8       0xc8 timer.o
                0x000010c8                __vector_19
                0x00001112                timer0_init_1khz
                0x00001126                delay_ms
 .text          0x00001190       0x4e fsm.o
                0x00001190                init_fsm
                0x000011a2                run_fsm
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
 .text          0x000011de        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                0x000011de                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000011de       0x3e /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
                0x000011de                __mulsi3
 .text.libgcc   0x0000121c       0x28 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
                0x0000121c                __udivmodhi4
 .text.libgcc   0x00001244       0x44 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
                0x00001244                __udivmodsi4
 .text.libgcc   0x00001288        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00001288        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00001288        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00001288       0x4a /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
                0x00001288                ultoa
 .text.avr-libc
                0x000012d2       0x20 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                0x000012d2                strrev
                0x000012f2                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000012f2        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
                0x000012f2                exit
                0x000012f2                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000012f2        0x4 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000012f6                _etext = .

.data           0x00800060       0x86 load address 0x000012f6
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .data          0x00800060        0xb main.o
 .data          0x0080006b        0x0 lcd.o
 .data          0x0080006b        0x2 display.o
 .data          0x0080006d        0x0 sja_control.o
 .data          0x0080006d       0x3e avr_sja1000p.o
 .data          0x008000ab       0x3a sensor.o
 .data          0x008000e5        0x0 timer.o
 .data          0x008000e5        0x0 fsm.o
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
 .data          0x008000e5        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x008000e6                . = ALIGN (0x2)
 *fill*         0x008000e5        0x1 00
                0x008000e6                _edata = .
                0x008000e6                PROVIDE (__data_end, .)

.bss            0x008000e6       0x6d
                0x008000e6                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x008000e6        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .bss           0x008000e6        0x0 main.o
 .bss           0x008000e6        0x0 lcd.o
 .bss           0x008000e6        0x0 display.o
 .bss           0x008000e6        0x0 sja_control.o
 .bss           0x008000e6        0x0 avr_sja1000p.o
 .bss           0x008000e6       0x4d sensor.o
 .bss           0x00800133        0x4 timer.o
                0x00800133                timer_msec
 .bss           0x00800137        0x0 fsm.o
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_mulsi3.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_udivmodsi4.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_exit.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/avr5/libgcc.a(_clear_bss.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
 .bss           0x00800137        0x0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800137       0x15 main.o
                0x00800137                fsm_sensor
                0x0080013d                rx_msg
 COMMON         0x0080014c        0x3 sensor.o
                0x0080014c                adc_data
 COMMON         0x0080014f        0x4 timer.o
                0x0080014f                delay_time
                0x00800153                PROVIDE (__bss_end, .)
                0x000012f6                __data_load_start = LOADADDR (.data)
                0x0000137c                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800153        0x0
                0x00800153                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800153                PROVIDE (__noinit_end, .)
                0x00800153                _end = .
                0x00800153                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x3fc0
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o
 .stab          0x000006b4      0x690 main.o
                                0x69c (size before relaxing)
 .stab          0x00000d44      0xc9c lcd.o
                                0xef4 (size before relaxing)
 .stab          0x000019e0      0x354 display.o
                                0x5b8 (size before relaxing)
 .stab          0x00001d34      0x54c sja_control.o
                                0x6fc (size before relaxing)
 .stab          0x00002280      0xc48 avr_sja1000p.o
                                0xeac (size before relaxing)
 .stab          0x00002ec8      0x99c sensor.o
                                0xc9c (size before relaxing)
 .stab          0x00003864      0x27c timer.o
                                0x450 (size before relaxing)
 .stab          0x00003ae0      0x228 fsm.o
                                0x234 (size before relaxing)
 .stab          0x00003d08      0x1e0 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(ultoa.o)
                                0x1ec (size before relaxing)
 .stab          0x00003ee8       0xd8 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/libc.a(strrev.o)
                                 0xe4 (size before relaxing)

.stabstr        0x00000000     0x2225
 *(.stabstr)
 .stabstr       0x00000000     0x2225 /usr/lib/gcc/avr/4.3.4/../../../avr/lib/avr5/crtm16.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(../build/AVR_CAN_proj.elf elf32-avr)
LOAD linker stubs
