
../build/AVR_CAN_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  000015f8  0000168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  008001ea  008001ea  00001816  2**0
                  ALLOC
  3 .stab         000053b8  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000219d  00000000  00000000  00006bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/*
 *  MAIN
 */
int main(void)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
  timer sensor_time = timer_msec;
      9a:	e0 90 19 02 	lds	r14, 0x0219
      9e:	f0 90 1a 02 	lds	r15, 0x021A
      a2:	00 91 1b 02 	lds	r16, 0x021B
      a6:	10 91 1c 02 	lds	r17, 0x021C
  
  sei();      // global interrupt enable
      aa:	78 94       	sei
  
  timer0_init_1khz();
      ac:	0e 94 30 0a 	call	0x1460	; 0x1460 <timer0_init_1khz>
  sja_init_ports();
      b0:	0e 94 4e 02 	call	0x49c	; 0x49c <sja_init_ports>
  
  lcd_init(LCD_DISP_ON);
      b4:	8c e0       	ldi	r24, 0x0C	; 12
      b6:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_init>
  
  CANMSG("CAN senzor");
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	60 e6       	ldi	r22, 0x60	; 96
      be:	70 e0       	ldi	r23, 0x00	; 0
      c0:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
      c4:	28 e8       	ldi	r18, 0x88	; 136
      c6:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c8:	48 ec       	ldi	r20, 0xC8	; 200
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	ca 01       	movw	r24, r20
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d2:	21 50       	subi	r18, 0x01	; 1
      d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d1 f7       	brne	.-12     	; 0xcc <main+0x3a>
  
  chip.baudrate = SJA_BAUD;
      d8:	80 e4       	ldi	r24, 0x40	; 64
      da:	92 e4       	ldi	r25, 0x42	; 66
      dc:	af e0       	ldi	r26, 0x0F	; 15
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	80 93 3c 02 	sts	0x023C, r24
      e4:	90 93 3d 02 	sts	0x023D, r25
      e8:	a0 93 3e 02 	sts	0x023E, r26
      ec:	b0 93 3f 02 	sts	0x023F, r27
  chip.clock = SJA_CLOCK;
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	94 e2       	ldi	r25, 0x24	; 36
      f4:	a4 ef       	ldi	r26, 0xF4	; 244
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	80 93 38 02 	sts	0x0238, r24
      fc:	90 93 39 02 	sts	0x0239, r25
     100:	a0 93 3a 02 	sts	0x023A, r26
     104:	b0 93 3b 02 	sts	0x023B, r27
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
     108:	88 e0       	ldi	r24, 0x08	; 8
     10a:	80 93 40 02 	sts	0x0240, r24
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
     10e:	8a e1       	ldi	r24, 0x1A	; 26
     110:	80 93 41 02 	sts	0x0241, r24
  
  if(sja1000p_chip_config(&chip))
     114:	87 e3       	ldi	r24, 0x37	; 55
     116:	92 e0       	ldi	r25, 0x02	; 2
     118:	0e 94 bc 06 	call	0xd78	; 0xd78 <sja1000p_chip_config>
     11c:	88 23       	and	r24, r24
     11e:	e9 f0       	breq	.+58     	; 0x15a <main+0xc8>
  {
    CANMSG("Config error!");
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	6b e6       	ldi	r22, 0x6B	; 107
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     12a:	88 e8       	ldi	r24, 0x88	; 136
     12c:	93 e1       	ldi	r25, 0x13	; 19
     12e:	28 ec       	ldi	r18, 0xC8	; 200
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	f9 01       	movw	r30, r18
     134:	31 97       	sbiw	r30, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     13a:	d9 f7       	brne	.-10     	; 0x132 <main+0xa0>
    CANMSG("Restarting...");
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	69 e7       	ldi	r22, 0x79	; 121
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     146:	88 e8       	ldi	r24, 0x88	; 136
     148:	93 e1       	ldi	r25, 0x13	; 19
     14a:	28 ec       	ldi	r18, 0xC8	; 200
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     156:	d9 f7       	brne	.-10     	; 0x14e <main+0xbc>
     158:	ff cf       	rjmp	.-2      	; 0x158 <main+0xc6>
    
    while (1); // TODO execute sw reset
  }

  sensor_init();
     15a:	0e 94 67 07 	call	0xece	; 0xece <sensor_init>
  
  init_fsm(&fsm_sensor,&fsm_sensor_init);
     15e:	81 e2       	ldi	r24, 0x21	; 33
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	68 e4       	ldi	r22, 0x48	; 72
     164:	77 e0       	ldi	r23, 0x07	; 7
     166:	0e 94 3a 0a 	call	0x1474	; 0x1474 <init_fsm>
     16a:	a8 01       	movw	r20, r16
     16c:	97 01       	movw	r18, r14
     16e:	2c 59       	subi	r18, 0x9C	; 156
     170:	3f 4f       	sbci	r19, 0xFF	; 255
     172:	4f 4f       	sbci	r20, 0xFF	; 255
     174:	5f 4f       	sbci	r21, 0xFF	; 255
  
  while(1) {
    
    if (timer_msec >= (sensor_time + 100)) {
     176:	80 91 19 02 	lds	r24, 0x0219
     17a:	90 91 1a 02 	lds	r25, 0x021A
     17e:	a0 91 1b 02 	lds	r26, 0x021B
     182:	b0 91 1c 02 	lds	r27, 0x021C
     186:	82 17       	cp	r24, r18
     188:	93 07       	cpc	r25, r19
     18a:	a4 07       	cpc	r26, r20
     18c:	b5 07       	cpc	r27, r21
     18e:	98 f3       	brcs	.-26     	; 0x176 <main+0xe4>
      sensor_time = timer_msec;
     190:	e0 90 19 02 	lds	r14, 0x0219
     194:	f0 90 1a 02 	lds	r15, 0x021A
     198:	00 91 1b 02 	lds	r16, 0x021B
     19c:	10 91 1c 02 	lds	r17, 0x021C
      
      /* run fsm every x ms*/
      run_fsm(&fsm_sensor);
     1a0:	81 e2       	ldi	r24, 0x21	; 33
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	0e 94 43 0a 	call	0x1486	; 0x1486 <run_fsm>
     1a8:	e0 cf       	rjmp	.-64     	; 0x16a <main+0xd8>

000001aa <__vector_1>:

/*
 * SJA interrupt service routine
 */
ISR(INT0_vect)
{
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
     1b4:	2f 93       	push	r18
     1b6:	3f 93       	push	r19
     1b8:	4f 93       	push	r20
     1ba:	5f 93       	push	r21
     1bc:	6f 93       	push	r22
     1be:	7f 93       	push	r23
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	af 93       	push	r26
     1c6:	bf 93       	push	r27
     1c8:	ef 93       	push	r30
     1ca:	ff 93       	push	r31
  sja1000p_irq_handler(&rx_msg);
     1cc:	88 e2       	ldi	r24, 0x28	; 40
     1ce:	92 e0       	ldi	r25, 0x02	; 2
     1d0:	0e 94 3a 03 	call	0x674	; 0x674 <sja1000p_irq_handler>
  
  if (rx_msg.status == NEW) {
     1d4:	80 91 36 02 	lds	r24, 0x0236
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	89 f0       	breq	.+34     	; 0x1fe <__vector_1+0x54>
    rx_msg.status = NONE;
    sensor_config(&rx_msg,&fsm_sensor);
  }
}
     1dc:	ff 91       	pop	r31
     1de:	ef 91       	pop	r30
     1e0:	bf 91       	pop	r27
     1e2:	af 91       	pop	r26
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	7f 91       	pop	r23
     1ea:	6f 91       	pop	r22
     1ec:	5f 91       	pop	r21
     1ee:	4f 91       	pop	r20
     1f0:	3f 91       	pop	r19
     1f2:	2f 91       	pop	r18
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti
ISR(INT0_vect)
{
  sja1000p_irq_handler(&rx_msg);
  
  if (rx_msg.status == NEW) {
    rx_msg.status = NONE;
     1fe:	10 92 36 02 	sts	0x0236, r1
    sensor_config(&rx_msg,&fsm_sensor);
     202:	88 e2       	ldi	r24, 0x28	; 40
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	61 e2       	ldi	r22, 0x21	; 33
     208:	72 e0       	ldi	r23, 0x02	; 2
     20a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <sensor_config>
     20e:	e6 cf       	rjmp	.-52     	; 0x1dc <__vector_1+0x32>

00000210 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     210:	66 23       	and	r22, r22
     212:	49 f1       	breq	.+82     	; 0x266 <lcd_write+0x56>
       lcd_rs_high();
     214:	c0 9a       	sbi	0x18, 0	; 24
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();
     216:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     218:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     21a:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     21c:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     21e:	8e 9a       	sbi	0x11, 6	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     220:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     222:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     224:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     226:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     228:	87 fd       	sbrc	r24, 7
     22a:	1f c0       	rjmp	.+62     	; 0x26a <lcd_write+0x5a>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     22c:	86 fd       	sbrc	r24, 6
     22e:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     230:	85 fd       	sbrc	r24, 5
     232:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     234:	84 fd       	sbrc	r24, 4
     236:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     238:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_write+0x2c>
    lcd_e_low();
     23c:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     23e:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     240:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     242:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     244:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     246:	83 fd       	sbrc	r24, 3
     248:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     24a:	82 fd       	sbrc	r24, 2
     24c:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     24e:	81 fd       	sbrc	r24, 1
     250:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     252:	80 fd       	sbrc	r24, 0
     254:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     256:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_write+0x4a>
    lcd_e_low();
     25a:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     25c:	93 9a       	sbi	0x12, 3	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     25e:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     260:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     262:	96 9a       	sbi	0x12, 6	; 18
    }
}
     264:	08 95       	ret


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     266:	c0 98       	cbi	0x18, 0	; 24
     268:	d6 cf       	rjmp	.-84     	; 0x216 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     26a:	96 9a       	sbi	0x12, 6	; 18
     26c:	df cf       	rjmp	.-66     	; 0x22c <lcd_write+0x1c>

0000026e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     26e:	88 23       	and	r24, r24
     270:	09 f1       	breq	.+66     	; 0x2b4 <lcd_read+0x46>
        lcd_rs_high();                       /* RS=1: read data      */
     272:	c0 9a       	sbi	0x18, 0	; 24
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    lcd_rw_high();                           /* RW=1  read mode      */
     274:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     276:	8b 98       	cbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     278:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     27a:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     27c:	8e 98       	cbi	0x11, 6	; 17
                
        /* read high nibble first */
        lcd_e_high();
     27e:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_read+0x14>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     282:	83 9b       	sbis	0x10, 3	; 16
     284:	15 c0       	rjmp	.+42     	; 0x2b0 <lcd_read+0x42>
     286:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     288:	84 99       	sbic	0x10, 4	; 16
     28a:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     28c:	85 99       	sbic	0x10, 5	; 16
     28e:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     290:	86 99       	sbic	0x10, 6	; 16
     292:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     294:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
     296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_read+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     298:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
     29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_read+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     29c:	83 99       	sbic	0x10, 3	; 16
     29e:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     2a0:	84 99       	sbic	0x10, 4	; 16
     2a2:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     2a4:	85 99       	sbic	0x10, 5	; 16
     2a6:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     2a8:	86 99       	sbic	0x10, 6	; 16
     2aa:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     2ac:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     2ae:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	ea cf       	rjmp	.-44     	; 0x288 <lcd_read+0x1a>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     2b4:	c0 98       	cbi	0x18, 0	; 24
     2b6:	de cf       	rjmp	.-68     	; 0x274 <lcd_read+0x6>

000002b8 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_read>
     2be:	87 fd       	sbrc	r24, 7
     2c0:	fb cf       	rjmp	.-10     	; 0x2b8 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_read>
    
}/* lcd_waitbusy */
     2d0:	08 95       	ret

000002d2 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     2d2:	1f 93       	push	r17
     2d4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     2d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_waitbusy>
    lcd_write(cmd,0);
     2da:	81 2f       	mov	r24, r17
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	0e 94 08 01 	call	0x210	; 0x210 <lcd_write>
}
     2e2:	1f 91       	pop	r17
     2e4:	08 95       	ret

000002e6 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     2e6:	1f 93       	push	r17
     2e8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     2ea:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_waitbusy>
    lcd_write(data,1);
     2ee:	81 2f       	mov	r24, r17
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_write>
}
     2f6:	1f 91       	pop	r17
     2f8:	08 95       	ret

000002fa <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     2fa:	66 23       	and	r22, r22
     2fc:	21 f0       	breq	.+8      	; 0x306 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     2fe:	80 54       	subi	r24, 0x40	; 64
     300:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
     304:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     306:	80 58       	subi	r24, 0x80	; 128
     308:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
     30c:	08 95       	ret

0000030e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     30e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_waitbusy>
}
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	08 95       	ret

00000316 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
}
     31c:	08 95       	ret

0000031e <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
}
     324:	08 95       	ret

00000326 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     326:	1f 93       	push	r17
     328:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     32a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_waitbusy>
    if (c=='\n')
     32e:	1a 30       	cpi	r17, 0x0A	; 10
     330:	39 f4       	brne	.+14     	; 0x340 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     332:	80 34       	cpi	r24, 0x40	; 64
     334:	58 f0       	brcs	.+22     	; 0x34c <lcd_putc+0x26>
     336:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     338:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     33c:	1f 91       	pop	r17
     33e:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     340:	81 2f       	mov	r24, r17
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	0e 94 08 01 	call	0x210	; 0x210 <lcd_write>
    }

}/* lcd_putc */
     348:	1f 91       	pop	r17
     34a:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     34c:	80 ec       	ldi	r24, 0xC0	; 192
     34e:	f4 cf       	rjmp	.-24     	; 0x338 <lcd_putc+0x12>

00000350 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
     356:	80 81       	ld	r24, Z
     358:	88 23       	and	r24, r24
     35a:	39 f0       	breq	.+14     	; 0x36a <lcd_puts+0x1a>
     35c:	ef 01       	movw	r28, r30
        lcd_putc(c);
     35e:	0e 94 93 01 	call	0x326	; 0x326 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	21 96       	adiw	r28, 0x01	; 1
     366:	88 23       	and	r24, r24
     368:	d1 f7       	brne	.-12     	; 0x35e <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     376:	84 91       	lpm	r24, Z+
     378:	88 23       	and	r24, r24
     37a:	49 f0       	breq	.+18     	; 0x38e <lcd_puts_p+0x1e>
     37c:	ef 01       	movw	r28, r30
     37e:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     380:	0e 94 93 01 	call	0x326	; 0x326 <lcd_putc>
     384:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     386:	21 96       	adiw	r28, 0x01	; 1
     388:	84 91       	lpm	r24, Z+
     38a:	88 23       	and	r24, r24
     38c:	c9 f7       	brne	.-14     	; 0x380 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     394:	1f 93       	push	r17
     396:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     398:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     39a:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     39c:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     39e:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     3a0:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     3a2:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     3a4:	8e 9a       	sbi	0x11, 6	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	9d e7       	ldi	r25, 0x7D	; 125
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     3ae:	94 9a       	sbi	0x12, 4	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     3b0:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3b2:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <lcd_init+0x22>
    lcd_e_low();
     3b6:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	97 e2       	ldi	r25, 0x27	; 39
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3c0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_init+0x30>
    lcd_e_low();
     3c4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	31 97       	sbiw	r30, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3d0:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_init+0x40>
    lcd_e_low();
     3d4:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3d6:	fc 01       	movw	r30, r24
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     3dc:	93 98       	cbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3de:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <lcd_init+0x4e>
    lcd_e_low();
     3e2:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     3e8:	88 e2       	ldi	r24, 0x28	; 40
     3ea:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     3f4:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     3fe:	81 2f       	mov	r24, r17
     400:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_command>

}/* lcd_init */
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <lcd_clear_line>:
    lcd_puts(string);
}

/* Clear line specified by line_nr */
void lcd_clear_line(unsigned char line_nr)
{
     408:	1f 93       	push	r17
     40a:	68 2f       	mov	r22, r24
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_gotoxy>
     412:	10 e0       	ldi	r17, 0x00	; 0
  
  for (;i < LCD_DISP_LENGTH; i++) {
    lcd_puts(" ");
     414:	87 e8       	ldi	r24, 0x87	; 135
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_puts>
{
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
  
  for (;i < LCD_DISP_LENGTH; i++) {
     41c:	1f 5f       	subi	r17, 0xFF	; 255
     41e:	10 31       	cpi	r17, 0x10	; 16
     420:	c9 f7       	brne	.-14     	; 0x414 <lcd_clear_line+0xc>
    lcd_puts(" ");
  }
}
     422:	1f 91       	pop	r17
     424:	08 95       	ret

00000426 <lcd_puts_line>:
#include "../include/display.h"
#include <stdlib.h>

/* Print string parameter to line specified by line_nr */
void lcd_puts_line(unsigned char line_nr,const char *string)
{
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	f8 2e       	mov	r15, r24
     42e:	8b 01       	movw	r16, r22
    lcd_clear_line(line_nr);
     430:	0e 94 04 02 	call	0x408	; 0x408 <lcd_clear_line>
    lcd_gotoxy(0,line_nr);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	6f 2d       	mov	r22, r15
     438:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_gotoxy>
    lcd_puts(string);
     43c:	c8 01       	movw	r24, r16
     43e:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_puts>
}
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	08 95       	ret

0000044a <debug>:
    lcd_puts(" ");
  }
}

void debug(unsigned char line_nr,unsigned long num)
{
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	1f 93       	push	r17
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2b 97       	sbiw	r28, 0x0b	; 11
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	18 2f       	mov	r17, r24
  char string[11];
  
  ltoa(num,string,10);
     466:	cb 01       	movw	r24, r22
     468:	ba 01       	movw	r22, r20
     46a:	7e 01       	movw	r14, r28
     46c:	08 94       	sec
     46e:	e1 1c       	adc	r14, r1
     470:	f1 1c       	adc	r15, r1
     472:	a7 01       	movw	r20, r14
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	0e 94 b6 0a 	call	0x156c	; 0x156c <ltoa>
  
  lcd_puts_line(line_nr,string);
     47c:	81 2f       	mov	r24, r17
     47e:	b7 01       	movw	r22, r14
     480:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
}
     484:	2b 96       	adiw	r28, 0x0b	; 11
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	1f 91       	pop	r17
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	08 95       	ret

0000049c <sja_init_ports>:
#define sja_disable_irq GICR &= ~(1 << SJA_INT_BIT) /* AVR interrupt from SJA disabled */
#define sja_enable_irq  GICR |= (1 << SJA_INT_BIT)  /* AVR interrupt from SJA enabled */

void sja_init_ports()
{
  sja_bus_out;
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	84 bb       	out	0x14, r24	; 20
  sja_ctrl_out;
     4a0:	8a b3       	in	r24, 0x1a	; 26
     4a2:	80 6f       	ori	r24, 0xF0	; 240
     4a4:	8a bb       	out	0x1a, r24	; 26
  sja_int_init;
     4a6:	8a 98       	cbi	0x11, 2	; 17
     4a8:	92 9a       	sbi	0x12, 2	; 18
     4aa:	85 b7       	in	r24, 0x35	; 53
     4ac:	85 bf       	out	0x35, r24	; 53
  sja_enable_irq;
     4ae:	8b b7       	in	r24, 0x3b	; 59
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	8b bf       	out	0x3b, r24	; 59
}
     4b4:	08 95       	ret

000004b6 <can_read_reg>:

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     4b6:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     4b8:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     4ba:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     4bc:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     4be:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	94 bb       	out	0x14, r25	; 20
     4c4:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	28 2f       	mov	r18, r24
     4ca:	2a 95       	dec	r18
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <can_read_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     4ce:	df 98       	cbi	0x1b, 7	; 27
     4d0:	28 2f       	mov	r18, r24
     4d2:	2a 95       	dec	r18
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <can_read_reg+0x1c>
static unsigned char sja_read_register(unsigned char address)
{
  unsigned char data;
  
  sja_write_address(address);
  sja_cs_low;
     4d6:	de 98       	cbi	0x1b, 6	; 27
  sja_rd_low;
     4d8:	dd 98       	cbi	0x1b, 5	; 27
  sja_bus_in;
     4da:	95 bb       	out	0x15, r25	; 21
     4dc:	14 ba       	out	0x14, r1	; 20
     4de:	8a 95       	dec	r24
     4e0:	f1 f7       	brne	.-4      	; 0x4de <can_read_reg+0x28>
  _delay_us(1);
  data = SJA_BUS_DATA;
     4e2:	83 b3       	in	r24, 0x13	; 19
  sja_rd_high;
     4e4:	dd 9a       	sbi	0x1b, 5	; 27
  sja_cs_high;
     4e6:	de 9a       	sbi	0x1b, 6	; 27
}

unsigned char can_read_reg(unsigned char address)
{ 
  return sja_read_register(address);
}
     4e8:	08 95       	ret

000004ea <can_write_reg>:
  sja_enable_irq;
}

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     4ea:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     4ec:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     4ee:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     4f0:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     4f2:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	24 bb       	out	0x14, r18	; 20
     4f8:	65 bb       	out	0x15, r22	; 21
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	39 2f       	mov	r19, r25
     4fe:	3a 95       	dec	r19
     500:	f1 f7       	brne	.-4      	; 0x4fe <can_write_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     502:	df 98       	cbi	0x1b, 7	; 27
     504:	39 2f       	mov	r19, r25
     506:	3a 95       	dec	r19
     508:	f1 f7       	brne	.-4      	; 0x506 <can_write_reg+0x1c>
}

static void sja_write_register(unsigned char data,unsigned char address)
{
  sja_write_address(address);
  sja_cs_low;
     50a:	de 98       	cbi	0x1b, 6	; 27
  sja_wr_low;
     50c:	dc 98       	cbi	0x1b, 4	; 27
  sja_bus_write(data);
     50e:	24 bb       	out	0x14, r18	; 20
     510:	85 bb       	out	0x15, r24	; 21
     512:	89 2f       	mov	r24, r25
     514:	8a 95       	dec	r24
     516:	f1 f7       	brne	.-4      	; 0x514 <can_write_reg+0x2a>
  _delay_us(1);
  sja_wr_high;
     518:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     51a:	de 9a       	sbi	0x1b, 6	; 27
     51c:	9a 95       	dec	r25
     51e:	f1 f7       	brne	.-4      	; 0x51c <can_write_reg+0x32>
}

void can_write_reg(unsigned char data,unsigned char address)
{
  sja_write_register(data,address);
}
     520:	08 95       	ret

00000522 <can_enable_irq>:

void can_enable_irq()
{
  sja_enable_irq;
     522:	8b b7       	in	r24, 0x3b	; 59
     524:	80 64       	ori	r24, 0x40	; 64
     526:	8b bf       	out	0x3b, r24	; 59
}
     528:	08 95       	ret

0000052a <can_disable_irq>:

void can_disable_irq()
{
  sja_disable_irq;
     52a:	8b b7       	in	r24, 0x3b	; 59
     52c:	8f 7b       	andi	r24, 0xBF	; 191
     52e:	8b bf       	out	0x3b, r24	; 59
}
     530:	08 95       	ret

00000532 <sja1000p_send_msg>:
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_send_msg()
{
  can_write_reg(sjaCMR_TR, SJACMR);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

  return 0;
}
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	08 95       	ret

0000053e <sja1000p_read>:
 * @chip: pointer to chip state structure
 * @obj: pinter to CAN message queue information
 *
 * File: src/sja1000p.c
 */
void sja1000p_read(struct canmsg_t *rx_msg) {
     53e:	6f 92       	push	r6
     540:	7f 92       	push	r7
     542:	8f 92       	push	r8
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	3c 01       	movw	r6, r24

  unsigned char i, flags, len;
  unsigned long pom;

  flags = can_read_reg(SJAFRM);
     55c:	80 e1       	ldi	r24, 0x10	; 16
     55e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     562:	98 2e       	mov	r9, r24

  pom = (can_read_reg(SJAID0)<<10);
     564:	81 e1       	ldi	r24, 0x11	; 17
     566:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     56a:	b8 2e       	mov	r11, r24
     56c:	bb 0c       	add	r11, r11
     56e:	bb 0c       	add	r11, r11
     570:	aa 24       	eor	r10, r10
     572:	cc 24       	eor	r12, r12
     574:	b7 fc       	sbrc	r11, 7
     576:	c0 94       	com	r12
     578:	dc 2c       	mov	r13, r12
  pom = pom<<11;
  
  rx_msg->id =
     57a:	82 e1       	ldi	r24, 0x12	; 18
     57c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     580:	88 2e       	mov	r8, r24
     582:	83 e1       	ldi	r24, 0x13	; 19
     584:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     588:	e8 2e       	mov	r14, r24
     58a:	84 e1       	ldi	r24, 0x14	; 20
     58c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     590:	38 2d       	mov	r19, r8
     592:	32 95       	swap	r19
     594:	33 0f       	add	r19, r19
     596:	30 7e       	andi	r19, 0xE0	; 224
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	44 27       	eor	r20, r20
     59c:	37 fd       	sbrc	r19, 7
     59e:	40 95       	com	r20
     5a0:	54 2f       	mov	r21, r20
     5a2:	ff 24       	eor	r15, r15
     5a4:	ee 0c       	add	r14, r14
     5a6:	ff 1c       	adc	r15, r15
     5a8:	e2 94       	swap	r14
     5aa:	f2 94       	swap	r15
     5ac:	70 ef       	ldi	r23, 0xF0	; 240
     5ae:	f7 22       	and	r15, r23
     5b0:	fe 24       	eor	r15, r14
     5b2:	e7 22       	and	r14, r23
     5b4:	fe 24       	eor	r15, r14
     5b6:	00 27       	eor	r16, r16
     5b8:	f7 fc       	sbrc	r15, 7
     5ba:	00 95       	com	r16
     5bc:	10 2f       	mov	r17, r16
     5be:	2e 0d       	add	r18, r14
     5c0:	3f 1d       	adc	r19, r15
     5c2:	40 1f       	adc	r20, r16
     5c4:	51 1f       	adc	r21, r17
     5c6:	86 95       	lsr	r24
     5c8:	86 95       	lsr	r24
     5ca:	86 95       	lsr	r24
     5cc:	28 0f       	add	r18, r24
     5ce:	31 1d       	adc	r19, r1
     5d0:	41 1d       	adc	r20, r1
     5d2:	51 1d       	adc	r21, r1
     5d4:	6b e0       	ldi	r22, 0x0B	; 11
     5d6:	aa 0c       	add	r10, r10
     5d8:	bb 1c       	adc	r11, r11
     5da:	cc 1c       	adc	r12, r12
     5dc:	dd 1c       	adc	r13, r13
     5de:	6a 95       	dec	r22
     5e0:	d1 f7       	brne	.-12     	; 0x5d6 <sja1000p_read+0x98>
     5e2:	2a 0d       	add	r18, r10
     5e4:	3b 1d       	adc	r19, r11
     5e6:	4c 1d       	adc	r20, r12
     5e8:	5d 1d       	adc	r21, r13
     5ea:	f3 01       	movw	r30, r6
     5ec:	21 83       	std	Z+1, r18	; 0x01
     5ee:	32 83       	std	Z+2, r19	; 0x02
     5f0:	43 83       	std	Z+3, r20	; 0x03
     5f2:	54 83       	std	Z+4, r21	; 0x04
    pom +
    (can_read_reg(SJAID1)<<13) +
    (can_read_reg(SJAID2)<<5) +
    (can_read_reg(SJAID3)>>3);
  
  rx_msg->flags =
     5f4:	29 2d       	mov	r18, r9
     5f6:	22 1f       	adc	r18, r18
     5f8:	22 27       	eor	r18, r18
     5fa:	22 1f       	adc	r18, r18
     5fc:	22 0f       	add	r18, r18
     5fe:	22 0f       	add	r18, r18
     600:	89 2d       	mov	r24, r9
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	00 24       	eor	r0, r0
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	00 1c       	adc	r0, r0
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	00 1c       	adc	r0, r0
     612:	89 2f       	mov	r24, r25
     614:	90 2d       	mov	r25, r0
     616:	81 70       	andi	r24, 0x01	; 1
     618:	28 2b       	or	r18, r24
     61a:	20 83       	st	Z, r18
    ((flags & sjaFRM_RTR) ? MSG_RTR : 0) |
    ((flags & sjaFRM_FF) ? MSG_EXT : 0);
  
  len = flags & sjaFRM_DLC_M;
     61c:	ff e0       	ldi	r31, 0x0F	; 15
     61e:	9f 22       	and	r9, r31
  
  rx_msg->length = len;
     620:	f3 01       	movw	r30, r6
     622:	95 82       	std	Z+5, r9	; 0x05
     624:	09 2d       	mov	r16, r9
     626:	09 30       	cpi	r16, 0x09	; 9
     628:	10 f1       	brcs	.+68     	; 0x66e <sja1000p_read+0x130>
     62a:	08 e0       	ldi	r16, 0x08	; 8
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     62c:	e3 01       	movw	r28, r6
     62e:	10 e0       	ldi	r17, 0x00	; 0
    rx_msg->data[i] = can_read_reg(SJADATE+i);
     630:	81 2f       	mov	r24, r17
     632:	8b 5e       	subi	r24, 0xEB	; 235
     634:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     638:	8e 83       	std	Y+6, r24	; 0x06
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     63a:	1f 5f       	subi	r17, 0xFF	; 255
     63c:	21 96       	adiw	r28, 0x01	; 1
     63e:	10 17       	cp	r17, r16
     640:	b8 f3       	brcs	.-18     	; 0x630 <sja1000p_read+0xf2>
    rx_msg->data[i] = can_read_reg(SJADATE+i);
  }
  
  rx_msg->status = NEW;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	f3 01       	movw	r30, r6
     646:	86 87       	std	Z+14, r24	; 0x0e

  can_write_reg(sjaCMR_RRB, SJACMR);
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	9f 90       	pop	r9
     666:	8f 90       	pop	r8
     668:	7f 90       	pop	r7
     66a:	6f 90       	pop	r6
     66c:	08 95       	ret
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     66e:	99 20       	and	r9, r9
     670:	e9 f6       	brne	.-70     	; 0x62c <sja1000p_read+0xee>
     672:	e7 cf       	rjmp	.-50     	; 0x642 <sja1000p_read+0x104>

00000674 <sja1000p_irq_handler>:
 * CAN controller chip and distribution of message through attached
 * message queues.
 * File: src/sja1000p.c
 */
char sja1000p_irq_handler(struct canmsg_t *rx_msg)
{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	ec 01       	movw	r28, r24
  unsigned char irq_register, status;

  irq_register = can_read_reg(SJAIR);
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     684:	18 2f       	mov	r17, r24

#ifdef DEBUG
    CANMSG("Interrupt");
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	69 e8       	ldi	r22, 0x89	; 137
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     690:	28 e8       	ldi	r18, 0x88	; 136
     692:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     694:	48 ec       	ldi	r20, 0xC8	; 200
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	ca 01       	movw	r24, r20
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <sja1000p_irq_handler+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a2:	d1 f7       	brne	.-12     	; 0x698 <sja1000p_irq_handler+0x24>
    debug(1,irq_register);
     6a4:	41 2f       	mov	r20, r17
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 25 02 	call	0x44a	; 0x44a <debug>
     6b2:	28 e8       	ldi	r18, 0x88	; 136
     6b4:	33 e1       	ldi	r19, 0x13	; 19
     6b6:	48 ec       	ldi	r20, 0xC8	; 200
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	ca 01       	movw	r24, r20
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <sja1000p_irq_handler+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c4:	d1 f7       	brne	.-12     	; 0x6ba <sja1000p_irq_handler+0x46>
    _delay_ms(500);
#endif  

  if ((irq_register & (sjaIR_BEI|sjaIR_EPI|sjaIR_DOI|sjaIR_EI|sjaIR_TI|sjaIR_RI)) == 0) {
     6c6:	81 2f       	mov	r24, r17
     6c8:	8f 7a       	andi	r24, 0xAF	; 175
     6ca:	a1 f4       	brne	.+40     	; 0x6f4 <sja1000p_irq_handler+0x80>
#ifdef DEBUG
    CANMSG("None int. flag");
     6cc:	63 e9       	ldi	r22, 0x93	; 147
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     6d4:	28 e8       	ldi	r18, 0x88	; 136
     6d6:	33 e1       	ldi	r19, 0x13	; 19
     6d8:	48 ec       	ldi	r20, 0xC8	; 200
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	ca 01       	movw	r24, r20
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <sja1000p_irq_handler+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e6:	d1 f7       	brne	.-12     	; 0x6dc <sja1000p_irq_handler+0x68>
     6e8:	80 e0       	ldi	r24, 0x00	; 0
      can_write_reg(0, SJAMOD);
    }
  }

  return 1;
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret
    CANMSG("None int. flag");
#endif
    return 0;
  }

  status = can_read_reg(SJASR);
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     6fa:	08 2f       	mov	r16, r24

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
     6fc:	80 fd       	sbrc	r24, 0
     6fe:	0a c0       	rjmp	.+20     	; 0x714 <sja1000p_irq_handler+0xa0>
    CANMSG("IRQ: RI or RBS");
#endif
    sja1000p_read(rx_msg);
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     700:	1c 7a       	andi	r17, 0xAC	; 172
     702:	11 f0       	breq	.+4      	; 0x708 <sja1000p_irq_handler+0x94>
    // Some error happened
    
    if(status & sjaSR_BS) {
     704:	07 fd       	sbrc	r16, 7
     706:	1b c0       	rjmp	.+54     	; 0x73e <sja1000p_irq_handler+0xca>
#ifdef DEBUG
      CANMSG("bus-off");
      CANMSG("resetting chip");
#endif
      can_write_reg(0, SJAMOD);
     708:	81 e0       	ldi	r24, 0x01	; 1
    }
  }

  return 1;
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
#ifdef DEBUG
    CANMSG("IRQ: RI or RBS");
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	62 ea       	ldi	r22, 0xA2	; 162
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     71e:	28 e8       	ldi	r18, 0x88	; 136
     720:	33 e1       	ldi	r19, 0x13	; 19
     722:	48 ec       	ldi	r20, 0xC8	; 200
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	ca 01       	movw	r24, r20
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <sja1000p_irq_handler+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     730:	d1 f7       	brne	.-12     	; 0x726 <sja1000p_irq_handler+0xb2>
#endif
    sja1000p_read(rx_msg);
     732:	ce 01       	movw	r24, r28
     734:	0e 94 9f 02 	call	0x53e	; 0x53e <sja1000p_read>
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     738:	1c 7a       	andi	r17, 0xAC	; 172
     73a:	21 f7       	brne	.-56     	; 0x704 <sja1000p_irq_handler+0x90>
     73c:	e5 cf       	rjmp	.-54     	; 0x708 <sja1000p_irq_handler+0x94>
    // Some error happened
    
    if(status & sjaSR_BS) {
#ifdef DEBUG
      CANMSG("bus-off");
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	61 eb       	ldi	r22, 0xB1	; 177
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     748:	28 e8       	ldi	r18, 0x88	; 136
     74a:	33 e1       	ldi	r19, 0x13	; 19
     74c:	48 ec       	ldi	r20, 0xC8	; 200
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	ca 01       	movw	r24, r20
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <sja1000p_irq_handler+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     756:	21 50       	subi	r18, 0x01	; 1
     758:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     75a:	d1 f7       	brne	.-12     	; 0x750 <sja1000p_irq_handler+0xdc>
      CANMSG("resetting chip");
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	69 eb       	ldi	r22, 0xB9	; 185
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     766:	28 e8       	ldi	r18, 0x88	; 136
     768:	33 e1       	ldi	r19, 0x13	; 19
     76a:	48 ec       	ldi	r20, 0xC8	; 200
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	ca 01       	movw	r24, r20
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <sja1000p_irq_handler+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     774:	21 50       	subi	r18, 0x01	; 1
     776:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     778:	d1 f7       	brne	.-12     	; 0x76e <sja1000p_irq_handler+0xfa>
#endif
      can_write_reg(0, SJAMOD);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	b2 cf       	rjmp	.-156    	; 0x6ea <sja1000p_irq_handler+0x76>

00000786 <sja1000p_disable_configuration>:
/**
 * sja1000p_disable_configuration - disable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_disable_configuration()
{
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     792:	80 ff       	sbrs	r24, 0
     794:	15 c0       	rjmp	.+42     	; 0x7c0 <sja1000p_disable_configuration+0x3a>
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	c8 ec       	ldi	r28, 0xC8	; 200
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <sja1000p_disable_configuration+0x1c>
     79e:	13 33       	cpi	r17, 0x33	; 51
     7a0:	b1 f0       	breq	.+44     	; 0x7ce <sja1000p_disable_configuration+0x48>
// could be as long as 11*128 bit times after buss-off
    can_write_reg(0, SJAMOD);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <sja1000p_disable_configuration+0x26>
    _delay_us(100);
    i++;
     7b0:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     7b8:	80 fd       	sbrc	r24, 0
     7ba:	f1 cf       	rjmp	.-30     	; 0x79e <sja1000p_disable_configuration+0x18>
    can_write_reg(0, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     7bc:	1a 30       	cpi	r17, 0x0A	; 10
     7be:	38 f4       	brcc	.+14     	; 0x7ce <sja1000p_disable_configuration+0x48>
    CANMSG("Err. exit reset");
#endif
    return -1;
  }

  can_enable_irq();
     7c0:	0e 94 91 02 	call	0x522	; 0x522 <can_enable_irq>
     7c4:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("Err. exit reset");
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	68 ec       	ldi	r22, 0xC8	; 200
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     7d8:	28 e8       	ldi	r18, 0x88	; 136
     7da:	33 e1       	ldi	r19, 0x13	; 19
     7dc:	48 ec       	ldi	r20, 0xC8	; 200
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	ca 01       	movw	r24, r20
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <sja1000p_disable_configuration+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	21 50       	subi	r18, 0x01	; 1
     7e8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <sja1000p_disable_configuration+0x5a>
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	eb cf       	rjmp	.-42     	; 0x7c6 <sja1000p_disable_configuration+0x40>

000007f0 <sja1000p_enable_configuration>:
/**
 * sja1000p_enable_configuration - enable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_enable_configuration()
{
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  can_disable_irq();
     7f6:	0e 94 95 02 	call	0x52a	; 0x52a <can_disable_irq>

  flags = can_read_reg(SJAMOD);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     800:	80 fd       	sbrc	r24, 0
     802:	27 c0       	rjmp	.+78     	; 0x852 <sja1000p_enable_configuration+0x62>
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	c8 ec       	ldi	r28, 0xC8	; 200
     808:	d0 e0       	ldi	r29, 0x00	; 0
    can_write_reg(sjaMOD_RM, SJAMOD);
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
     812:	ce 01       	movw	r24, r28
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <sja1000p_enable_configuration+0x24>
    _delay_us(100);
    i++;
     818:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>

  can_disable_irq();

  flags = can_read_reg(SJAMOD);

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     820:	80 fd       	sbrc	r24, 0
     822:	15 c0       	rjmp	.+42     	; 0x84e <sja1000p_enable_configuration+0x5e>
     824:	1b 30       	cpi	r17, 0x0B	; 11
     826:	89 f7       	brne	.-30     	; 0x80a <sja1000p_enable_configuration+0x1a>
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("Reset mode error");
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	68 ed       	ldi	r22, 0xD8	; 216
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     832:	28 e8       	ldi	r18, 0x88	; 136
     834:	33 e1       	ldi	r19, 0x13	; 19
     836:	48 ec       	ldi	r20, 0xC8	; 200
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	ca 01       	movw	r24, r20
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <sja1000p_enable_configuration+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     840:	21 50       	subi	r18, 0x01	; 1
     842:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     844:	d1 f7       	brne	.-12     	; 0x83a <sja1000p_enable_configuration+0x4a>
#endif
    can_enable_irq();
     846:	0e 94 91 02 	call	0x522	; 0x522 <can_enable_irq>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	12 c0       	rjmp	.+36     	; 0x872 <sja1000p_enable_configuration+0x82>
    can_write_reg(sjaMOD_RM, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     84e:	1a 30       	cpi	r17, 0x0A	; 10
     850:	58 f7       	brcc	.-42     	; 0x828 <sja1000p_enable_configuration+0x38>
#endif
    can_enable_irq();
    return -1;
  }
#ifdef DEBUG
  CANMSG("Reset mode OK");
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	69 ee       	ldi	r22, 0xE9	; 233
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     85c:	28 e8       	ldi	r18, 0x88	; 136
     85e:	33 e1       	ldi	r19, 0x13	; 19
     860:	48 ec       	ldi	r20, 0xC8	; 200
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	ca 01       	movw	r24, r20
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <sja1000p_enable_configuration+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86a:	21 50       	subi	r18, 0x01	; 1
     86c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     86e:	d1 f7       	brne	.-12     	; 0x864 <sja1000p_enable_configuration+0x74>
     870:	80 e0       	ldi	r24, 0x00	; 0
#endif
  return 0;
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	08 95       	ret

0000087a <sja1000p_pre_write_config>:
 * into chip buffer in this function.
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_pre_write_config(struct canmsg_t *msg)
{
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     88c:	0a e1       	ldi	r16, 0x1A	; 26
     88e:	04 c0       	rjmp	.+8      	; 0x898 <sja1000p_pre_write_config+0x1e>
  unsigned long id;
  unsigned char status;
  unsigned char len;

  /* Wait until Transmit Buffer Status is released */
  while ( !((status = can_read_reg(SJASR)) & sjaSR_TBS) && 
     890:	1f 5f       	subi	r17, 0xFF	; 255
     892:	80 2f       	mov	r24, r16
     894:	8a 95       	dec	r24
     896:	f1 f7       	brne	.-4      	; 0x894 <sja1000p_pre_write_config+0x1a>
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     89e:	82 fd       	sbrc	r24, 2
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <sja1000p_pre_write_config+0x2c>
     8a2:	1a 30       	cpi	r17, 0x0A	; 10
     8a4:	a9 f7       	brne	.-22     	; 0x890 <sja1000p_pre_write_config+0x16>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
    _delay_us(10);
  }
  
  if(status & sjaSR_BS) {
     8a6:	87 fd       	sbrc	r24, 7
     8a8:	94 c0       	rjmp	.+296    	; 0x9d2 <sja1000p_pre_write_config+0x158>
    can_write_reg(0, SJARXERR);
    can_write_reg(0, SJATXERR1);
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     8b0:	82 ff       	sbrs	r24, 2
     8b2:	58 c0       	rjmp	.+176    	; 0x964 <sja1000p_pre_write_config+0xea>
      CANMSG("Tx err. Reset!");
#endif
      return -1;
    }
  }
  len = msg->length;
     8b4:	dd 80       	ldd	r13, Y+5	; 0x05
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	8d 15       	cp	r24, r13
     8ba:	10 f4       	brcc	.+4      	; 0x8c0 <sja1000p_pre_write_config+0x46>
     8bc:	98 e0       	ldi	r25, 0x08	; 8
     8be:	d9 2e       	mov	r13, r25
  if(len > CAN_MSG_LENGTH) len = CAN_MSG_LENGTH;
  
  /* len &= sjaFRM_DLC_M; ensured by above condition already */
  can_write_reg(sjaFRM_FF |len, SJAFRM);
     8c0:	8d 2d       	mov	r24, r13
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	60 e1       	ldi	r22, 0x10	; 16
     8c6:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  
  id = msg->id<<3;
     8ca:	e9 80       	ldd	r14, Y+1	; 0x01
     8cc:	fa 80       	ldd	r15, Y+2	; 0x02
     8ce:	0b 81       	ldd	r16, Y+3	; 0x03
     8d0:	1c 81       	ldd	r17, Y+4	; 0x04
     8d2:	ee 0c       	add	r14, r14
     8d4:	ff 1c       	adc	r15, r15
     8d6:	00 1f       	adc	r16, r16
     8d8:	11 1f       	adc	r17, r17
     8da:	ee 0c       	add	r14, r14
     8dc:	ff 1c       	adc	r15, r15
     8de:	00 1f       	adc	r16, r16
     8e0:	11 1f       	adc	r17, r17
     8e2:	ee 0c       	add	r14, r14
     8e4:	ff 1c       	adc	r15, r15
     8e6:	00 1f       	adc	r16, r16
     8e8:	11 1f       	adc	r17, r17
  can_write_reg(id & 0xff, SJAID3);
     8ea:	8e 2d       	mov	r24, r14
     8ec:	64 e1       	ldi	r22, 0x14	; 20
     8ee:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  id >>= 8;
     8f2:	bb 27       	eor	r27, r27
     8f4:	a1 2f       	mov	r26, r17
     8f6:	90 2f       	mov	r25, r16
     8f8:	8f 2d       	mov	r24, r15
  can_write_reg(id & 0xff, SJAID2);
     8fa:	63 e1       	ldi	r22, 0x13	; 19
     8fc:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  id >>= 8;
     900:	c8 01       	movw	r24, r16
     902:	aa 27       	eor	r26, r26
     904:	bb 27       	eor	r27, r27
  can_write_reg(id & 0xff, SJAID1);
     906:	62 e1       	ldi	r22, 0x12	; 18
     908:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  id >>= 8;
  can_write_reg(id, SJAID0);
     90c:	e1 2e       	mov	r14, r17
     90e:	ff 24       	eor	r15, r15
     910:	00 27       	eor	r16, r16
     912:	11 27       	eor	r17, r17
     914:	8e 2d       	mov	r24, r14
     916:	61 e1       	ldi	r22, 0x11	; 17
     918:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  
  for(i=0; i < len; i++) {
     91c:	dd 20       	and	r13, r13
     91e:	51 f0       	breq	.+20     	; 0x934 <sja1000p_pre_write_config+0xba>
     920:	10 e0       	ldi	r17, 0x00	; 0
    can_write_reg(msg->data[i], SJADATE+i);
     922:	1b 5e       	subi	r17, 0xEB	; 235
     924:	8e 81       	ldd	r24, Y+6	; 0x06
     926:	61 2f       	mov	r22, r17
     928:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  id >>= 8;
  can_write_reg(id & 0xff, SJAID1);
  id >>= 8;
  can_write_reg(id, SJAID0);
  
  for(i=0; i < len; i++) {
     92c:	14 51       	subi	r17, 0x14	; 20
     92e:	21 96       	adiw	r28, 0x01	; 1
     930:	1d 15       	cp	r17, r13
     932:	b8 f3       	brcs	.-18     	; 0x922 <sja1000p_pre_write_config+0xa8>
    can_write_reg(msg->data[i], SJADATE+i);
  }
#ifdef DEBUG
    CANMSG("Tx OK");
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	62 e2       	ldi	r22, 0x22	; 34
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     93e:	28 e8       	ldi	r18, 0x88	; 136
     940:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     942:	48 ec       	ldi	r20, 0xC8	; 200
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	ca 01       	movw	r24, r20
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <sja1000p_pre_write_config+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     950:	d1 f7       	brne	.-12     	; 0x946 <sja1000p_pre_write_config+0xcc>
     952:	80 e0       	ldi	r24, 0x00	; 0
#endif
  return 0;
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	08 95       	ret
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
#ifdef DEBUG
    CANMSG("TX timed out");
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	66 e0       	ldi	r22, 0x06	; 6
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     96e:	28 e8       	ldi	r18, 0x88	; 136
     970:	33 e1       	ldi	r19, 0x13	; 19
     972:	48 ec       	ldi	r20, 0xC8	; 200
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	ca 01       	movw	r24, r20
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <sja1000p_pre_write_config+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     980:	d1 f7       	brne	.-12     	; 0x976 <sja1000p_pre_write_config+0xfc>
#endif
// here we should check if there is no write/select waiting for this
// transmit. If so, set error ret and wake up.
// CHECKME: if we do not disable sjaIER_TIE (TX IRQ) here we get interrupt
// immediately
    can_write_reg(sjaCMR_AT, SJACMR);
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
     98a:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     98c:	0a e1       	ldi	r16, 0x1A	; 26
     98e:	04 c0       	rjmp	.+8      	; 0x998 <sja1000p_pre_write_config+0x11e>
    i = 0;
    while ( !(can_read_reg(SJASR) & sjaSR_TBS) &&
     990:	1f 5f       	subi	r17, 0xFF	; 255
     992:	80 2f       	mov	r24, r16
     994:	8a 95       	dec	r24
     996:	f1 f7       	brne	.-4      	; 0x994 <sja1000p_pre_write_config+0x11a>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     99e:	82 fd       	sbrc	r24, 2
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <sja1000p_pre_write_config+0x12c>
     9a2:	1a 30       	cpi	r17, 0x0A	; 10
     9a4:	a9 f7       	brne	.-22     	; 0x990 <sja1000p_pre_write_config+0x116>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
      _delay_us(10);
    }
    if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
     9ac:	82 fd       	sbrc	r24, 2
     9ae:	82 cf       	rjmp	.-252    	; 0x8b4 <sja1000p_pre_write_config+0x3a>
#ifdef DEBUG
      CANMSG("Tx err. Reset!");
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	63 e1       	ldi	r22, 0x13	; 19
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     9ba:	28 e8       	ldi	r18, 0x88	; 136
     9bc:	33 e1       	ldi	r19, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9be:	48 ec       	ldi	r20, 0xC8	; 200
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	ca 01       	movw	r24, r20
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <sja1000p_pre_write_config+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <sja1000p_pre_write_config+0x148>
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	c1 cf       	rjmp	.-126    	; 0x954 <sja1000p_pre_write_config+0xda>
  }
  
  if(status & sjaSR_BS) {
    /* Try to recover from error condition */
#ifdef DEBUG
    CANMSG("Bus recovering");
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	67 ef       	ldi	r22, 0xF7	; 247
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     9dc:	28 e8       	ldi	r18, 0x88	; 136
     9de:	33 e1       	ldi	r19, 0x13	; 19
     9e0:	48 ec       	ldi	r20, 0xC8	; 200
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	ca 01       	movw	r24, r20
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <sja1000p_pre_write_config+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <sja1000p_pre_write_config+0x16a>
#endif
    sja1000p_enable_configuration();
     9f0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <sja1000p_enable_configuration>
    can_write_reg(0, SJARXERR);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	6e e0       	ldi	r22, 0x0E	; 14
     9f8:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
    can_write_reg(0, SJATXERR1);
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	6f e0       	ldi	r22, 0x0F	; 15
     a00:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
    can_read_reg(SJAECC);
     a04:	8c e0       	ldi	r24, 0x0C	; 12
     a06:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
    sja1000p_disable_configuration();
     a0a:	0e 94 c3 03 	call	0x786	; 0x786 <sja1000p_disable_configuration>
     a0e:	4d cf       	rjmp	.-358    	; 0x8aa <sja1000p_pre_write_config+0x30>

00000a10 <sja1000p_baud_rate>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_baud_rate(unsigned long rate, unsigned long clock, unsigned char sjw,unsigned char sampl_pt, unsigned char flags)
{
     a10:	2f 92       	push	r2
     a12:	3f 92       	push	r3
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	df 93       	push	r29
     a32:	cf 93       	push	r28
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	67 97       	sbiw	r28, 0x17	; 23
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	69 8b       	std	Y+17, r22	; 0x11
     a46:	7a 8b       	std	Y+18, r23	; 0x12
     a48:	8b 8b       	std	Y+19, r24	; 0x13
     a4a:	9c 8b       	std	Y+20, r25	; 0x14
     a4c:	49 01       	movw	r8, r18
     a4e:	5a 01       	movw	r10, r20
     a50:	0d 8b       	std	Y+21, r16	; 0x15
     a52:	ee 8a       	std	Y+22, r14	; 0x16
     a54:	cf 8a       	std	Y+23, r12	; 0x17
  unsigned long best_error = 1000000000, error;
  unsigned long best_tseg=0, best_brp=0, best_rate=0, brp=0;
  unsigned long tseg=0, tseg1=0, tseg2=0;
  
  if (sja1000p_enable_configuration())
     a56:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <sja1000p_enable_configuration>
     a5a:	88 23       	and	r24, r24
     a5c:	09 f0       	breq	.+2      	; 0xa60 <sja1000p_baud_rate+0x50>
     a5e:	4f c1       	rjmp	.+670    	; 0xcfe <sja1000p_baud_rate+0x2ee>
    return -1;

  clock /=2;
     a60:	a5 01       	movw	r20, r10
     a62:	94 01       	movw	r18, r8
     a64:	56 95       	lsr	r21
     a66:	47 95       	ror	r20
     a68:	37 95       	ror	r19
     a6a:	27 95       	ror	r18
     a6c:	29 87       	std	Y+9, r18	; 0x09
     a6e:	3a 87       	std	Y+10, r19	; 0x0a
     a70:	4b 87       	std	Y+11, r20	; 0x0b
     a72:	5c 87       	std	Y+12, r21	; 0x0c
     a74:	54 e0       	ldi	r21, 0x04	; 4
     a76:	e5 2e       	mov	r14, r21
     a78:	f1 2c       	mov	r15, r1
     a7a:	01 2d       	mov	r16, r1
     a7c:	11 2d       	mov	r17, r1
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	9a ec       	ldi	r25, 0xCA	; 202
     a82:	aa e9       	ldi	r26, 0x9A	; 154
     a84:	bb e3       	ldi	r27, 0x3B	; 59
     a86:	8d 87       	std	Y+13, r24	; 0x0d
     a88:	9e 87       	std	Y+14, r25	; 0x0e
     a8a:	af 87       	std	Y+15, r26	; 0x0f
     a8c:	b8 8b       	std	Y+16, r27	; 0x10
     a8e:	1d 82       	std	Y+5, r1	; 0x05
     a90:	1e 82       	std	Y+6, r1	; 0x06
     a92:	1f 82       	std	Y+7, r1	; 0x07
     a94:	18 86       	std	Y+8, r1	; 0x08
     a96:	19 82       	std	Y+1, r1	; 0x01
     a98:	1a 82       	std	Y+2, r1	; 0x02
     a9a:	1b 82       	std	Y+3, r1	; 0x03
     a9c:	1c 82       	std	Y+4, r1	; 0x04
     a9e:	38 c0       	rjmp	.+112    	; 0xb10 <sja1000p_baud_rate+0x100>
  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
    brp = clock/((1+tseg/2)*rate)+tseg%2;
    if (brp == 0 || brp > 64)
      continue;
    error = rate - clock/(brp*(1+tseg/2));
     aa0:	ca 01       	movw	r24, r20
     aa2:	b9 01       	movw	r22, r18
     aa4:	a4 01       	movw	r20, r8
     aa6:	93 01       	movw	r18, r6
     aa8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	69 85       	ldd	r22, Y+9	; 0x09
     ab2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ab8:	0e 94 94 0a 	call	0x1528	; 0x1528 <__udivmodsi4>
     abc:	89 89       	ldd	r24, Y+17	; 0x11
     abe:	9a 89       	ldd	r25, Y+18	; 0x12
     ac0:	ab 89       	ldd	r26, Y+19	; 0x13
     ac2:	bc 89       	ldd	r27, Y+20	; 0x14
     ac4:	82 1b       	sub	r24, r18
     ac6:	93 0b       	sbc	r25, r19
     ac8:	a4 0b       	sbc	r26, r20
     aca:	b5 0b       	sbc	r27, r21
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     acc:	2d 85       	ldd	r18, Y+13	; 0x0d
     ace:	3e 85       	ldd	r19, Y+14	; 0x0e
     ad0:	4f 85       	ldd	r20, Y+15	; 0x0f
     ad2:	58 89       	ldd	r21, Y+16	; 0x10
     ad4:	28 17       	cp	r18, r24
     ad6:	39 07       	cpc	r19, r25
     ad8:	4a 07       	cpc	r20, r26
     ada:	5b 07       	cpc	r21, r27
     adc:	08 f4       	brcc	.+2      	; 0xae0 <sja1000p_baud_rate+0xd0>
     ade:	4d c0       	rjmp	.+154    	; 0xb7a <sja1000p_baud_rate+0x16a>
     ae0:	8d 87       	std	Y+13, r24	; 0x0d
     ae2:	9e 87       	std	Y+14, r25	; 0x0e
     ae4:	af 87       	std	Y+15, r26	; 0x0f
     ae6:	b8 8b       	std	Y+16, r27	; 0x10
    return -1;

  clock /=2;

  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
     ae8:	08 94       	sec
     aea:	e1 1c       	adc	r14, r1
     aec:	f1 1c       	adc	r15, r1
     aee:	01 1d       	adc	r16, r1
     af0:	11 1d       	adc	r17, r1
     af2:	32 e3       	ldi	r19, 0x32	; 50
     af4:	e3 16       	cp	r14, r19
     af6:	f1 04       	cpc	r15, r1
     af8:	01 05       	cpc	r16, r1
     afa:	11 05       	cpc	r17, r1
     afc:	09 f4       	brne	.+2      	; 0xb00 <sja1000p_baud_rate+0xf0>
     afe:	46 c0       	rjmp	.+140    	; 0xb8c <sja1000p_baud_rate+0x17c>
     b00:	ad 82       	std	Y+5, r10	; 0x05
     b02:	be 82       	std	Y+6, r11	; 0x06
     b04:	cf 82       	std	Y+7, r12	; 0x07
     b06:	d8 86       	std	Y+8, r13	; 0x08
     b08:	29 82       	std	Y+1, r2	; 0x01
     b0a:	3a 82       	std	Y+2, r3	; 0x02
     b0c:	4b 82       	std	Y+3, r4	; 0x03
     b0e:	5c 82       	std	Y+4, r5	; 0x04
    brp = clock/((1+tseg/2)*rate)+tseg%2;
     b10:	57 01       	movw	r10, r14
     b12:	68 01       	movw	r12, r16
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	35 01       	movw	r6, r10
     b1e:	46 01       	movw	r8, r12
     b20:	08 94       	sec
     b22:	61 1c       	adc	r6, r1
     b24:	71 1c       	adc	r7, r1
     b26:	81 1c       	adc	r8, r1
     b28:	91 1c       	adc	r9, r1
     b2a:	c4 01       	movw	r24, r8
     b2c:	b3 01       	movw	r22, r6
     b2e:	29 89       	ldd	r18, Y+17	; 0x11
     b30:	3a 89       	ldd	r19, Y+18	; 0x12
     b32:	4b 89       	ldd	r20, Y+19	; 0x13
     b34:	5c 89       	ldd	r21, Y+20	; 0x14
     b36:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	69 85       	ldd	r22, Y+9	; 0x09
     b40:	7a 85       	ldd	r23, Y+10	; 0x0a
     b42:	8b 85       	ldd	r24, Y+11	; 0x0b
     b44:	9c 85       	ldd	r25, Y+12	; 0x0c
     b46:	0e 94 94 0a 	call	0x1528	; 0x1528 <__udivmodsi4>
     b4a:	d8 01       	movw	r26, r16
     b4c:	c7 01       	movw	r24, r14
     b4e:	81 70       	andi	r24, 0x01	; 1
     b50:	90 70       	andi	r25, 0x00	; 0
     b52:	a0 70       	andi	r26, 0x00	; 0
     b54:	b0 70       	andi	r27, 0x00	; 0
     b56:	28 0f       	add	r18, r24
     b58:	39 1f       	adc	r19, r25
     b5a:	4a 1f       	adc	r20, r26
     b5c:	5b 1f       	adc	r21, r27
    if (brp == 0 || brp > 64)
     b5e:	19 01       	movw	r2, r18
     b60:	2a 01       	movw	r4, r20
     b62:	08 94       	sec
     b64:	21 08       	sbc	r2, r1
     b66:	31 08       	sbc	r3, r1
     b68:	41 08       	sbc	r4, r1
     b6a:	51 08       	sbc	r5, r1
     b6c:	90 e4       	ldi	r25, 0x40	; 64
     b6e:	29 16       	cp	r2, r25
     b70:	31 04       	cpc	r3, r1
     b72:	41 04       	cpc	r4, r1
     b74:	51 04       	cpc	r5, r1
     b76:	08 f4       	brcc	.+2      	; 0xb7a <sja1000p_baud_rate+0x16a>
     b78:	93 cf       	rjmp	.-218    	; 0xaa0 <sja1000p_baud_rate+0x90>
    error = rate - clock/(brp*(1+tseg/2));
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     b7a:	ad 80       	ldd	r10, Y+5	; 0x05
     b7c:	be 80       	ldd	r11, Y+6	; 0x06
     b7e:	cf 80       	ldd	r12, Y+7	; 0x07
     b80:	d8 84       	ldd	r13, Y+8	; 0x08
     b82:	29 80       	ldd	r2, Y+1	; 0x01
     b84:	3a 80       	ldd	r3, Y+2	; 0x02
     b86:	4b 80       	ldd	r4, Y+3	; 0x03
     b88:	5c 80       	ldd	r5, Y+4	; 0x04
     b8a:	ae cf       	rjmp	.-164    	; 0xae8 <sja1000p_baud_rate+0xd8>
      best_tseg = tseg/2;
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	af 85       	ldd	r26, Y+15	; 0x0f
     b92:	b8 89       	ldd	r27, Y+16	; 0x10
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	a1 05       	cpc	r26, r1
     b98:	b1 05       	cpc	r27, r1
     b9a:	81 f0       	breq	.+32     	; 0xbbc <sja1000p_baud_rate+0x1ac>
     b9c:	69 89       	ldd	r22, Y+17	; 0x11
     b9e:	7a 89       	ldd	r23, Y+18	; 0x12
     ba0:	8b 89       	ldd	r24, Y+19	; 0x13
     ba2:	9c 89       	ldd	r25, Y+20	; 0x14
     ba4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ba6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ba8:	4f 85       	ldd	r20, Y+15	; 0x0f
     baa:	58 89       	ldd	r21, Y+16	; 0x10
     bac:	0e 94 94 0a 	call	0x1528	; 0x1528 <__udivmodsi4>
     bb0:	2a 30       	cpi	r18, 0x0A	; 10
     bb2:	31 05       	cpc	r19, r1
     bb4:	41 05       	cpc	r20, r1
     bb6:	51 05       	cpc	r21, r1
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <sja1000p_baud_rate+0x1ac>
     bba:	92 c0       	rjmp	.+292    	; 0xce0 <sja1000p_baud_rate+0x2d0>
#ifdef DEBUG
    CANMSG("Baud rate error");
#endif
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     bbc:	c6 01       	movw	r24, r12
     bbe:	b5 01       	movw	r22, r10
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	8f 4f       	sbci	r24, 0xFF	; 255
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	ae 89       	ldd	r26, Y+22	; 0x16
     bca:	2a 2f       	mov	r18, r26
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__mulsi3>
     bd6:	24 e6       	ldi	r18, 0x64	; 100
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 94 0a 	call	0x1528	; 0x1528 <__udivmodsi4>
     be2:	35 01       	movw	r6, r10
     be4:	46 01       	movw	r8, r12
     be6:	62 1a       	sub	r6, r18
     be8:	73 0a       	sbc	r7, r19
     bea:	84 0a       	sbc	r8, r20
     bec:	95 0a       	sbc	r9, r21
     bee:	b8 e0       	ldi	r27, 0x08	; 8
     bf0:	6b 16       	cp	r6, r27
     bf2:	71 04       	cpc	r7, r1
     bf4:	81 04       	cpc	r8, r1
     bf6:	91 04       	cpc	r9, r1
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <sja1000p_baud_rate+0x1ec>
     bfa:	6c c0       	rjmp	.+216    	; 0xcd4 <sja1000p_baud_rate+0x2c4>
    tseg2 = 0;
  
  if (tseg2 > sjaMAX_TSEG2)
    tseg2 = sjaMAX_TSEG2;
  
  tseg1 = best_tseg-tseg2-2;
     bfc:	2e ef       	ldi	r18, 0xFE	; 254
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f ef       	ldi	r20, 0xFF	; 255
     c02:	5f ef       	ldi	r21, 0xFF	; 255
     c04:	a2 0e       	add	r10, r18
     c06:	b3 1e       	adc	r11, r19
     c08:	c4 1e       	adc	r12, r20
     c0a:	d5 1e       	adc	r13, r21
     c0c:	d6 01       	movw	r26, r12
     c0e:	c5 01       	movw	r24, r10
     c10:	86 19       	sub	r24, r6
     c12:	97 09       	sbc	r25, r7
     c14:	a8 09       	sbc	r26, r8
     c16:	b9 09       	sbc	r27, r9
     c18:	22 e0       	ldi	r18, 0x02	; 2
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	a2 0e       	add	r10, r18
     c22:	b3 1e       	adc	r11, r19
     c24:	c4 1e       	adc	r12, r20
     c26:	d5 1e       	adc	r13, r21
  
  if (tseg1>sjaMAX_TSEG1) {
     c28:	80 31       	cpi	r24, 0x10	; 16
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	08 f0       	brcs	.+2      	; 0xc34 <sja1000p_baud_rate+0x224>
     c32:	42 c0       	rjmp	.+132    	; 0xcb8 <sja1000p_baud_rate+0x2a8>
     c34:	18 2f       	mov	r17, r24
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
     c36:	3d 89       	ldd	r19, Y+21	; 0x15
     c38:	32 95       	swap	r19
     c3a:	33 0f       	add	r19, r19
     c3c:	33 0f       	add	r19, r19
     c3e:	30 7c       	andi	r19, 0xC0	; 192
     c40:	83 2f       	mov	r24, r19
     c42:	82 29       	or	r24, r2
     c44:	66 e0       	ldi	r22, 0x06	; 6
     c46:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     c4a:	4f 89       	ldd	r20, Y+23	; 0x17
     c4c:	41 fd       	sbrc	r20, 1
     c4e:	59 c0       	rjmp	.+178    	; 0xd02 <sja1000p_baud_rate+0x2f2>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	86 2d       	mov	r24, r6
     c54:	82 95       	swap	r24
     c56:	80 7f       	andi	r24, 0xF0	; 240
     c58:	81 2b       	or	r24, r17
     c5a:	89 2b       	or	r24, r25
     c5c:	67 e0       	ldi	r22, 0x07	; 7
     c5e:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
          | tseg1, SJABTR1);

  sja1000p_disable_configuration();
     c62:	0e 94 c3 03 	call	0x786	; 0x786 <sja1000p_disable_configuration>

#ifdef DEBUG 
  CANMSG("Baud rate OK");
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	68 e3       	ldi	r22, 0x38	; 56
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     c70:	28 e8       	ldi	r18, 0x88	; 136
     c72:	33 e1       	ldi	r19, 0x13	; 19
     c74:	48 ec       	ldi	r20, 0xC8	; 200
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	ca 01       	movw	r24, r20
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <sja1000p_baud_rate+0x26a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c82:	d1 f7       	brne	.-12     	; 0xc78 <sja1000p_baud_rate+0x268>
     c84:	80 e0       	ldi	r24, 0x00	; 0
#endif  
  return 0;
}
     c86:	67 96       	adiw	r28, 0x17	; 23
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	7f 90       	pop	r7
     cac:	6f 90       	pop	r6
     cae:	5f 90       	pop	r5
     cb0:	4f 90       	pop	r4
     cb2:	3f 90       	pop	r3
     cb4:	2f 90       	pop	r2
     cb6:	08 95       	ret
  
  tseg1 = best_tseg-tseg2-2;
  
  if (tseg1>sjaMAX_TSEG1) {
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
     cb8:	2f ee       	ldi	r18, 0xEF	; 239
     cba:	62 2e       	mov	r6, r18
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
     cbe:	72 2e       	mov	r7, r18
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	82 2e       	mov	r8, r18
     cc4:	2f ef       	ldi	r18, 0xFF	; 255
     cc6:	92 2e       	mov	r9, r18
     cc8:	6a 0c       	add	r6, r10
     cca:	7b 1c       	adc	r7, r11
     ccc:	8c 1c       	adc	r8, r12
     cce:	9d 1c       	adc	r9, r13
     cd0:	1f e0       	ldi	r17, 0x0F	; 15
     cd2:	b1 cf       	rjmp	.-158    	; 0xc36 <sja1000p_baud_rate+0x226>
#ifdef DEBUG
    CANMSG("Baud rate error");
#endif
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     cd4:	37 e0       	ldi	r19, 0x07	; 7
     cd6:	63 2e       	mov	r6, r19
     cd8:	71 2c       	mov	r7, r1
     cda:	81 2c       	mov	r8, r1
     cdc:	91 2c       	mov	r9, r1
     cde:	8e cf       	rjmp	.-228    	; 0xbfc <sja1000p_baud_rate+0x1ec>
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
#ifdef DEBUG
    CANMSG("Baud rate error");
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	68 e2       	ldi	r22, 0x28	; 40
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     cea:	28 e8       	ldi	r18, 0x88	; 136
     cec:	33 e1       	ldi	r19, 0x13	; 19
     cee:	48 ec       	ldi	r20, 0xC8	; 200
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	ca 01       	movw	r24, r20
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <sja1000p_baud_rate+0x2e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <sja1000p_baud_rate+0x2e2>
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	c2 cf       	rjmp	.-124    	; 0xc86 <sja1000p_baud_rate+0x276>
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     d02:	90 e8       	ldi	r25, 0x80	; 128
     d04:	a6 cf       	rjmp	.-180    	; 0xc52 <sja1000p_baud_rate+0x242>

00000d06 <sja1000p_extended_mask>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	5b 01       	movw	r10, r22
     d1a:	6c 01       	movw	r12, r24
     d1c:	79 01       	movw	r14, r18
     d1e:	8a 01       	movw	r16, r20
   char i;

  if (sja1000p_enable_configuration())
     d20:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <sja1000p_enable_configuration>
     d24:	88 23       	and	r24, r24
     d26:	31 f5       	brne	.+76     	; 0xd74 <sja1000p_extended_mask+0x6e>
     d28:	f3 e1       	ldi	r31, 0x13	; 19
     d2a:	9f 2e       	mov	r9, r31
    return -1;

// LSB to +3, MSB to +0 
  for(i=SJA_PeliCAN_AC_LEN; --i>=0;) {
    can_write_reg(code&0xff,SJAACR0+i);
     d2c:	8a 2d       	mov	r24, r10
     d2e:	69 2d       	mov	r22, r9
     d30:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
    can_write_reg(mask&0xff,SJAAMR0+i);
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	98 0e       	add	r9, r24
     d38:	8e 2d       	mov	r24, r14
     d3a:	69 2d       	mov	r22, r9
     d3c:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
    code >>= 8;
     d40:	ab 2c       	mov	r10, r11
     d42:	bc 2c       	mov	r11, r12
     d44:	cd 2c       	mov	r12, r13
     d46:	dd 24       	eor	r13, r13
    mask >>= 8;
     d48:	ef 2c       	mov	r14, r15
     d4a:	f0 2e       	mov	r15, r16
     d4c:	01 2f       	mov	r16, r17
     d4e:	11 27       	eor	r17, r17
     d50:	8b ef       	ldi	r24, 0xFB	; 251
     d52:	98 0e       	add	r9, r24

  if (sja1000p_enable_configuration())
    return -1;

// LSB to +3, MSB to +0 
  for(i=SJA_PeliCAN_AC_LEN; --i>=0;) {
     d54:	8f e0       	ldi	r24, 0x0F	; 15
     d56:	98 16       	cp	r9, r24
     d58:	49 f7       	brne	.-46     	; 0xd2c <sja1000p_extended_mask+0x26>
    can_write_reg(mask&0xff,SJAAMR0+i);
    code >>= 8;
    mask >>= 8;
  }

  sja1000p_disable_configuration();  
     d5a:	0e 94 c3 03 	call	0x786	; 0x786 <sja1000p_disable_configuration>
     d5e:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	08 95       	ret
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
   char i;

  if (sja1000p_enable_configuration())
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	f4 cf       	rjmp	.-24     	; 0xd60 <sja1000p_extended_mask+0x5a>

00000d78 <sja1000p_chip_config>:
 * computes and sets baudrate with use of function sja1000p_baud_rate().
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_chip_config(struct canchip_t *chip)
{
     d78:	cf 92       	push	r12
     d7a:	ef 92       	push	r14
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
  unsigned char i;
  unsigned char n, r;
  
  if (sja1000p_enable_configuration())
     d86:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <sja1000p_enable_configuration>
     d8a:	88 23       	and	r24, r24
     d8c:	41 f0       	breq	.+16     	; 0xd9e <sja1000p_chip_config+0x26>
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
  
#ifdef DEBUG  
  CANMSG("Config OK");
#endif
  return 0;
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ef 90       	pop	r14
     d9a:	cf 90       	pop	r12
     d9c:	08 95       	ret
  
  if (sja1000p_enable_configuration())
    return -1;

  /* Set mode, clock out, comparator */
  can_write_reg(sjaCDR_PELICAN|chip->sja_cdr_reg,SJACDR); 
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	6f e1       	ldi	r22, 0x1F	; 31
     da4:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

  /* Ensure, that interrupts are disabled even on the chip level now */
  can_write_reg(sjaDISABLE_INTERRUPTS, SJAIER);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	64 e0       	ldi	r22, 0x04	; 4
     dac:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
     db0:	8a 85       	ldd	r24, Y+10	; 0x0a
     db2:	68 e0       	ldi	r22, 0x08	; 8
     db4:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>
     db8:	0a e5       	ldi	r16, 0x5A	; 90
     dba:	10 e1       	ldi	r17, 0x10	; 16
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
     dbc:	80 2f       	mov	r24, r16
     dbe:	61 2f       	mov	r22, r17
     dc0:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     dc4:	01 5f       	subi	r16, 0xF1	; 241
     dc6:	1f 5f       	subi	r17, 0xFF	; 255
     dc8:	02 3d       	cpi	r16, 0xD2	; 210
     dca:	c1 f7       	brne	.-16     	; 0xdbc <sja1000p_chip_config+0x44>
     dcc:	1a e5       	ldi	r17, 0x5A	; 90
     dce:	00 e1       	ldi	r16, 0x10	; 16
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <sja1000p_chip_config+0x5c>
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     dd2:	11 5f       	subi	r17, 0xF1	; 241
    r = n^can_read_reg(SJAACR0+i);
     dd4:	80 2f       	mov	r24, r16
     dd6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_read_reg>
    if (r) {
     dda:	18 17       	cp	r17, r24
     ddc:	09 f0       	breq	.+2      	; 0xde0 <sja1000p_chip_config+0x68>
     dde:	48 c0       	rjmp	.+144    	; 0xe70 <sja1000p_chip_config+0xf8>
     de0:	0f 5f       	subi	r16, 0xFF	; 255
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     de2:	13 3c       	cpi	r17, 0xC3	; 195
     de4:	b1 f7       	brne	.-20     	; 0xdd2 <sja1000p_chip_config+0x5a>
#endif
      return -1;
    }
  }

  if (sja1000p_extended_mask(0x0000000, 0xfffffff))
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	2f ef       	ldi	r18, 0xFF	; 255
     df0:	3f ef       	ldi	r19, 0xFF	; 255
     df2:	4f ef       	ldi	r20, 0xFF	; 255
     df4:	5f e0       	ldi	r21, 0x0F	; 15
     df6:	0e 94 83 06 	call	0xd06	; 0xd06 <sja1000p_extended_mask>
     dfa:	88 23       	and	r24, r24
     dfc:	41 f6       	brne	.-112    	; 0xd8e <sja1000p_chip_config+0x16>
    return -1;
  
  if (!chip->baudrate)
     dfe:	6d 81       	ldd	r22, Y+5	; 0x05
     e00:	7e 81       	ldd	r23, Y+6	; 0x06
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	61 15       	cp	r22, r1
     e08:	71 05       	cpc	r23, r1
     e0a:	81 05       	cpc	r24, r1
     e0c:	91 05       	cpc	r25, r1
     e0e:	61 f4       	brne	.+24     	; 0xe28 <sja1000p_chip_config+0xb0>
    chip->baudrate=1000000;
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	92 e4       	ldi	r25, 0x42	; 66
     e14:	af e0       	ldi	r26, 0x0F	; 15
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	af 83       	std	Y+7, r26	; 0x07
     e1e:	b8 87       	std	Y+8, r27	; 0x08
     e20:	60 e4       	ldi	r22, 0x40	; 64
     e22:	72 e4       	ldi	r23, 0x42	; 66
     e24:	8f e0       	ldi	r24, 0x0F	; 15
     e26:	90 e0       	ldi	r25, 0x00	; 0
  
  if (sja1000p_baud_rate(chip->baudrate,chip->clock,0,75,0))
     e28:	29 81       	ldd	r18, Y+1	; 0x01
     e2a:	3a 81       	ldd	r19, Y+2	; 0x02
     e2c:	4b 81       	ldd	r20, Y+3	; 0x03
     e2e:	5c 81       	ldd	r21, Y+4	; 0x04
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	ab e4       	ldi	r26, 0x4B	; 75
     e34:	ea 2e       	mov	r14, r26
     e36:	cc 24       	eor	r12, r12
     e38:	0e 94 08 05 	call	0xa10	; 0xa10 <sja1000p_baud_rate>
     e3c:	88 23       	and	r24, r24
     e3e:	09 f0       	breq	.+2      	; 0xe42 <sja1000p_chip_config+0xca>
     e40:	a6 cf       	rjmp	.-180    	; 0xd8e <sja1000p_chip_config+0x16>
    return -1;

  /* Enable hardware interrupts */
  can_write_reg(sjaENABLE_INTERRUPTS, SJAIER); 
     e42:	8f ea       	ldi	r24, 0xAF	; 175
     e44:	64 e0       	ldi	r22, 0x04	; 4
     e46:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_write_reg>

  sja1000p_disable_configuration();
     e4a:	0e 94 c3 03 	call	0x786	; 0x786 <sja1000p_disable_configuration>
  
#ifdef DEBUG  
  CANMSG("Config OK");
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	62 e5       	ldi	r22, 0x52	; 82
     e52:	71 e0       	ldi	r23, 0x01	; 1
     e54:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     e58:	28 e8       	ldi	r18, 0x88	; 136
     e5a:	33 e1       	ldi	r19, 0x13	; 19
     e5c:	48 ec       	ldi	r20, 0xC8	; 200
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	ca 01       	movw	r24, r20
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <sja1000p_chip_config+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	21 50       	subi	r18, 0x01	; 1
     e68:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	d1 f7       	brne	.-12     	; 0xe60 <sja1000p_chip_config+0xe8>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 cf       	rjmp	.-224    	; 0xd90 <sja1000p_chip_config+0x18>

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    r = n^can_read_reg(SJAACR0+i);
    if (r) {
#ifdef DEBUG
      CANMSG("Config error");
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	65 e4       	ldi	r22, 0x45	; 69
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     e7a:	28 e8       	ldi	r18, 0x88	; 136
     e7c:	33 e1       	ldi	r19, 0x13	; 19
     e7e:	48 ec       	ldi	r20, 0xC8	; 200
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	ca 01       	movw	r24, r20
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <sja1000p_chip_config+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	d1 f7       	brne	.-12     	; 0xe82 <sja1000p_chip_config+0x10a>
     e8e:	7f cf       	rjmp	.-258    	; 0xd8e <sja1000p_chip_config+0x16>

00000e90 <fsm_sensor_init>:
  
  return 0;
}

void fsm_sensor_init(struct fsm *fsm, enum event event)
{
     e90:	fc 01       	movw	r30, r24
  switch (event) {
     e92:	61 30       	cpi	r22, 0x01	; 1
     e94:	71 05       	cpc	r23, r1
     e96:	a1 f0       	breq	.+40     	; 0xec0 <fsm_sensor_init+0x30>
     e98:	62 30       	cpi	r22, 0x02	; 2
     e9a:	71 05       	cpc	r23, r1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <fsm_sensor_init+0x10>
     e9e:	08 95       	ret
    fsm->measurement_start = true;
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
#ifdef DEBUG    
    CANMSG("FSM init OK");
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	6c e5       	ldi	r22, 0x5C	; 92
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     eaa:	28 e8       	ldi	r18, 0x88	; 136
     eac:	33 e1       	ldi	r19, 0x13	; 19
     eae:	48 ec       	ldi	r20, 0xC8	; 200
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	ca 01       	movw	r24, r20
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <fsm_sensor_init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb8:	21 50       	subi	r18, 0x01	; 1
     eba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebc:	d1 f7       	brne	.-12     	; 0xeb2 <fsm_sensor_init+0x22>
     ebe:	08 95       	ret
{
  switch (event) {
  case EVENT_ENTRY:
    break;
  case EVENT_DO:
    fsm->measurement_start = true;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	84 83       	std	Z+4, r24	; 0x04
    fsm->current_state = wait_for_cmd;
     ec4:	82 ea       	ldi	r24, 0xA2	; 162
     ec6:	97 e0       	ldi	r25, 0x07	; 7
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
     ecc:	08 95       	ret

00000ece <sensor_init>:
  unsigned char i = 0;
  
  char *idn = SENSOR_IDN;
  
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	80 93 fb 01 	sts	0x01FB, r24
  idn_msg.id = SENSOR_ID;
     ed4:	10 92 fc 01 	sts	0x01FC, r1
     ed8:	10 92 fd 01 	sts	0x01FD, r1
     edc:	10 92 fe 01 	sts	0x01FE, r1
     ee0:	10 92 ff 01 	sts	0x01FF, r1
  idn_msg.length = strlen(idn);
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	80 93 00 02 	sts	0x0200, r24
     eea:	e8 e6       	ldi	r30, 0x68	; 104
     eec:	f1 e0       	ldi	r31, 0x01	; 1
     eee:	a1 e0       	ldi	r26, 0x01	; 1
     ef0:	b2 e0       	ldi	r27, 0x02	; 2
  
  for (;i < strlen(idn);i++) {
    idn_msg.data[i] = idn[i];
     ef2:	81 91       	ld	r24, Z+
     ef4:	8d 93       	st	X+, r24
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
  idn_msg.id = SENSOR_ID;
  idn_msg.length = strlen(idn);
  
  for (;i < strlen(idn);i++) {
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	e0 37       	cpi	r30, 0x70	; 112
     efa:	f8 07       	cpc	r31, r24
     efc:	d1 f7       	brne	.-12     	; 0xef2 <sensor_init+0x24>
  
  /* initialize sen_cfg structure with default values
   * channel 0 - 2 enabled, no averaging, continual delivery
   * no treshold */
  for (i = 0;i < 3; i++) {
    sen_cfg.samples[i] = AVRG_1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 ec 01 	sts	0x01EC, r24
     f04:	80 93 ed 01 	sts	0x01ED, r24
     f08:	80 93 ee 01 	sts	0x01EE, r24
  }
  
  sen_cfg.delivery = 1;
     f0c:	80 93 eb 01 	sts	0x01EB, r24
  sen_cfg.treshold = 0;
     f10:	10 92 ef 01 	sts	0x01EF, r1
  sen_cfg.treshold_channel = 0;
     f14:	10 92 f0 01 	sts	0x01F0, r1
  
  ADCSRA = 0xCF;  /* ADC enabled. interrupt enabled, 128x prescaler ~4kHz */
     f18:	8f ec       	ldi	r24, 0xCF	; 207
     f1a:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x60;   /*  Vref = Vcc, ADC output in ADCH */
     f1c:	80 e6       	ldi	r24, 0x60	; 96
     f1e:	87 b9       	out	0x07, r24	; 7
  
  //adc_channels_in;
  adc_start;
     f20:	36 9a       	sbi	0x06, 6	; 6
  
#ifdef DEBUG
  CANMSG("Sensor init OK");
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	61 e7       	ldi	r22, 0x71	; 113
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     f2c:	28 e8       	ldi	r18, 0x88	; 136
     f2e:	33 e1       	ldi	r19, 0x13	; 19
     f30:	48 ec       	ldi	r20, 0xC8	; 200
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	ca 01       	movw	r24, r20
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <sensor_init+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <sensor_init+0x66>
#endif

  return 0;
}
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret

00000f44 <wait_for_cmd>:
    break;
  }
}

static void wait_for_cmd(struct fsm *fsm, enum event event)
{  
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	ec 01       	movw	r28, r24
  switch (event) {
     f4a:	61 30       	cpi	r22, 0x01	; 1
     f4c:	71 05       	cpc	r23, r1
     f4e:	f1 f0       	breq	.+60     	; 0xf8c <wait_for_cmd+0x48>
     f50:	61 30       	cpi	r22, 0x01	; 1
     f52:	71 05       	cpc	r23, r1
     f54:	48 f0       	brcs	.+18     	; 0xf68 <wait_for_cmd+0x24>
     f56:	62 30       	cpi	r22, 0x02	; 2
     f58:	71 05       	cpc	r23, r1
     f5a:	19 f4       	brne	.+6      	; 0xf62 <wait_for_cmd+0x1e>
      can_enable_irq();
      fsm->current_state = sensor_capture_data;
    }
    break;
  case EVENT_EXIT:
    fsm->measurement_start = sen_cfg_lock.delivery;
     f5c:	80 91 f1 01 	lds	r24, 0x01F1
     f60:	8c 83       	std	Y+4, r24	; 0x04
    break;
  }
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret
static void wait_for_cmd(struct fsm *fsm, enum event event)
{  
  switch (event) {
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM wait for cmd");
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	60 e8       	ldi	r22, 0x80	; 128
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
     f72:	28 e8       	ldi	r18, 0x88	; 136
     f74:	33 e1       	ldi	r19, 0x13	; 19
     f76:	48 ec       	ldi	r20, 0xC8	; 200
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	ca 01       	movw	r24, r20
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <wait_for_cmd+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	d1 f7       	brne	.-12     	; 0xf7a <wait_for_cmd+0x36>
    break;
  case EVENT_EXIT:
    fsm->measurement_start = sen_cfg_lock.delivery;
    break;
  }
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret
    CANMSG("FSM wait for cmd");
#endif
    break;
  case EVENT_DO:
    /* waiting to start adc sampling */
    if (fsm->measurement_start) {
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	88 23       	and	r24, r24
     f90:	41 f3       	breq	.-48     	; 0xf62 <wait_for_cmd+0x1e>
      /* disable AVR interrupt, so the sen_cfg structure is propperly copied */
      can_disable_irq();
     f92:	0e 94 95 02 	call	0x52a	; 0x52a <can_disable_irq>
      sen_cfg_lock = sen_cfg;
     f96:	a1 ef       	ldi	r26, 0xF1	; 241
     f98:	b1 e0       	ldi	r27, 0x01	; 1
     f9a:	eb ee       	ldi	r30, 0xEB	; 235
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	01 90       	ld	r0, Z+
     fa2:	0d 92       	st	X+, r0
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <wait_for_cmd+0x5c>
      can_enable_irq();
     fa8:	0e 94 91 02 	call	0x522	; 0x522 <can_enable_irq>
      fsm->current_state = sensor_capture_data;
     fac:	80 e7       	ldi	r24, 0x70	; 112
     fae:	98 e0       	ldi	r25, 0x08	; 8
     fb0:	99 83       	std	Y+1, r25	; 0x01
     fb2:	88 83       	st	Y, r24
     fb4:	d6 cf       	rjmp	.-84     	; 0xf62 <wait_for_cmd+0x1e>

00000fb6 <save_samples>:
  return 0;
}


static void save_samples()
{
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	82 ef       	ldi	r24, 0xF2	; 242
     fc8:	c8 2e       	mov	r12, r24
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	d8 2e       	mov	r13, r24
     fce:	00 e0       	ldi	r16, 0x00	; 0
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
     fd8:	d0 e0       	ldi	r29, 0x00	; 0
     fda:	ee 24       	eor	r14, r14
     fdc:	ff 24       	eor	r15, r15
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;

  for (i = 0; i < (LAST_ADC - FIRST_ADC + 1); i++) {
     fde:	f6 01       	movw	r30, r12
     fe0:	60 81       	ld	r22, Z
     fe2:	70 e0       	ldi	r23, 0x00	; 0
    
    while (counter < sen_cfg_lock.samples[i]) {
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
        adc_time = timer_msec;
        average += adc_data[i];
     fe4:	f7 01       	movw	r30, r14
     fe6:	ee 5b       	subi	r30, 0xBE	; 190
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;

  for (i = 0; i < (LAST_ADC - FIRST_ADC + 1); i++) {
    
    while (counter < sen_cfg_lock.samples[i]) {
     fea:	76 17       	cp	r23, r22
     fec:	08 f5       	brcc	.+66     	; 0x1030 <save_samples+0x7a>
     fee:	a9 01       	movw	r20, r18
     ff0:	98 01       	movw	r18, r16
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	4f 4f       	sbci	r20, 0xFF	; 255
     ff8:	5f 4f       	sbci	r21, 0xFF	; 255
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
     ffa:	80 91 19 02 	lds	r24, 0x0219
     ffe:	90 91 1a 02 	lds	r25, 0x021A
    1002:	a0 91 1b 02 	lds	r26, 0x021B
    1006:	b0 91 1c 02 	lds	r27, 0x021C
    100a:	82 17       	cp	r24, r18
    100c:	93 07       	cpc	r25, r19
    100e:	a4 07       	cpc	r26, r20
    1010:	b5 07       	cpc	r27, r21
    1012:	98 f3       	brcs	.-26     	; 0xffa <save_samples+0x44>
        adc_time = timer_msec;
    1014:	00 91 19 02 	lds	r16, 0x0219
    1018:	10 91 1a 02 	lds	r17, 0x021A
    101c:	20 91 1b 02 	lds	r18, 0x021B
    1020:	30 91 1c 02 	lds	r19, 0x021C
        average += adc_data[i];
    1024:	80 81       	ld	r24, Z
    1026:	c8 0f       	add	r28, r24
    1028:	d1 1d       	adc	r29, r1
        counter++;
    102a:	7f 5f       	subi	r23, 0xFF	; 255
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;

  for (i = 0; i < (LAST_ADC - FIRST_ADC + 1); i++) {
    
    while (counter < sen_cfg_lock.samples[i]) {
    102c:	76 17       	cp	r23, r22
    102e:	f8 f2       	brcs	.-66     	; 0xfee <save_samples+0x38>
        counter++;
      }
    }
    
    /* avoid dividing by zero */
    if (sen_cfg_lock.samples[i])
    1030:	66 23       	and	r22, r22
    1032:	41 f0       	breq	.+16     	; 0x1044 <save_samples+0x8e>
      sen_data.channel_data[i] = average / sen_cfg_lock.samples[i];
    1034:	f7 01       	movw	r30, r14
    1036:	e9 50       	subi	r30, 0x09	; 9
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	ce 01       	movw	r24, r28
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 80 0a 	call	0x1500	; 0x1500 <__udivmodhi4>
    1042:	60 83       	st	Z, r22
    1044:	08 94       	sec
    1046:	e1 1c       	adc	r14, r1
    1048:	f1 1c       	adc	r15, r1
    104a:	08 94       	sec
    104c:	c1 1c       	adc	r12, r1
    104e:	d1 1c       	adc	r13, r1
{
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;

  for (i = 0; i < (LAST_ADC - FIRST_ADC + 1); i++) {
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	e8 16       	cp	r14, r24
    1054:	f1 04       	cpc	r15, r1
    1056:	19 f6       	brne	.-122    	; 0xfde <save_samples+0x28>
    
    counter = 0;
  }
  
  #ifdef DEBUG
    CANMSG("ADC data");
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	61 e9       	ldi	r22, 0x91	; 145
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    1062:	28 e8       	ldi	r18, 0x88	; 136
    1064:	33 e1       	ldi	r19, 0x13	; 19
    1066:	48 ec       	ldi	r20, 0xC8	; 200
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	ca 01       	movw	r24, r20
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <save_samples+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1070:	21 50       	subi	r18, 0x01	; 1
    1072:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	d1 f7       	brne	.-12     	; 0x106a <save_samples+0xb4>
    1076:	07 ef       	ldi	r16, 0xF7	; 247
    1078:	11 e0       	ldi	r17, 0x01	; 1
    107a:	c8 ec       	ldi	r28, 0xC8	; 200
    107c:	d0 e0       	ldi	r29, 0x00	; 0
    
    for (i = 0;i<3;i++) {
     debug(1,sen_data.channel_data[i]);
    107e:	f8 01       	movw	r30, r16
    1080:	40 81       	ld	r20, Z
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 25 02 	call	0x44a	; 0x44a <debug>
    108e:	28 e8       	ldi	r18, 0x88	; 136
    1090:	33 e1       	ldi	r19, 0x13	; 19
    1092:	ce 01       	movw	r24, r28
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <save_samples+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	d1 f7       	brne	.-12     	; 0x1092 <save_samples+0xdc>
    109e:	0f 5f       	subi	r16, 0xFF	; 255
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
  }
  
  #ifdef DEBUG
    CANMSG("ADC data");
    
    for (i = 0;i<3;i++) {
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	0a 3f       	cpi	r16, 0xFA	; 250
    10a6:	1f 07       	cpc	r17, r31
    10a8:	51 f7       	brne	.-44     	; 0x107e <save_samples+0xc8>
     debug(1,sen_data.channel_data[i]);
     _delay_ms(500);
    }
#endif
  
  if (sen_cfg_lock.treshold_channel
    10aa:	e0 91 f6 01 	lds	r30, 0x01F6
    10ae:	ee 23       	and	r30, r30
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <save_samples+0x10c>
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	ea 50       	subi	r30, 0x0A	; 10
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	90 81       	ld	r25, Z
    10ba:	80 91 f5 01 	lds	r24, 0x01F5
    10be:	98 17       	cp	r25, r24
    10c0:	58 f4       	brcc	.+22     	; 0x10d8 <save_samples+0x122>
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
  else
    sen_data.overflow = 0;
    10c2:	10 92 fa 01 	sts	0x01FA, r1
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	08 95       	ret
    }
#endif
  
  if (sen_cfg_lock.treshold_channel
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 fa 01 	sts	0x01FA, r24
    10de:	f3 cf       	rjmp	.-26     	; 0x10c6 <save_samples+0x110>

000010e0 <sensor_capture_data>:
    break;
  }
}

static void sensor_capture_data(struct fsm *fsm, enum event event)
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
  switch (event) {
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	91 f4       	brne	.+36     	; 0x1110 <sensor_capture_data+0x30>
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM capture data");
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	6a e9       	ldi	r22, 0x9A	; 154
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    10f6:	28 e8       	ldi	r18, 0x88	; 136
    10f8:	33 e1       	ldi	r19, 0x13	; 19
    10fa:	48 ec       	ldi	r20, 0xC8	; 200
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	ca 01       	movw	r24, r20
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <sensor_capture_data+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	d1 f7       	brne	.-12     	; 0x10fe <sensor_capture_data+0x1e>
    fsm->current_state = sensor_send_data;
    break;
  case EVENT_EXIT:
    break;
  }
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret
  }
}

static void sensor_capture_data(struct fsm *fsm, enum event event)
{
  switch (event) {
    1110:	61 30       	cpi	r22, 0x01	; 1
    1112:	71 05       	cpc	r23, r1
    1114:	d1 f7       	brne	.-12     	; 0x110a <sensor_capture_data+0x2a>
#ifdef DEBUG
    CANMSG("FSM capture data");
#endif
    break;
  case EVENT_DO:
    save_samples(fsm);
    1116:	0e 94 db 07 	call	0xfb6	; 0xfb6 <save_samples>
    fsm->current_state = sensor_send_data;
    111a:	87 ee       	ldi	r24, 0xE7	; 231
    111c:	98 e0       	ldi	r25, 0x08	; 8
    111e:	99 83       	std	Y+1, r25	; 0x01
    1120:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <__vector_14>:
  }
}


ISR(ADC_vect)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	4f 93       	push	r20
    1138:	5f 93       	push	r21
    113a:	6f 93       	push	r22
    113c:	7f 93       	push	r23
    113e:	8f 93       	push	r24
    1140:	9f 93       	push	r25
    1142:	af 93       	push	r26
    1144:	bf 93       	push	r27
    1146:	ef 93       	push	r30
    1148:	ff 93       	push	r31
  static unsigned char channel = 0;
  
  adc_data[channel] = ADCH;
    114a:	40 91 ea 01 	lds	r20, 0x01EA
    114e:	e4 2f       	mov	r30, r20
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	85 b1       	in	r24, 0x05	; 5
    1154:	ee 5b       	subi	r30, 0xBE	; 190
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	80 83       	st	Z, r24
  debug(0,channel);
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 25 02 	call	0x44a	; 0x44a <debug>
  debug(1,adc_data[channel]);
    1166:	e0 91 ea 01 	lds	r30, 0x01EA
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ee 5b       	subi	r30, 0xBE	; 190
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	40 81       	ld	r20, Z
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0e 94 25 02 	call	0x44a	; 0x44a <debug>
    117e:	28 eb       	ldi	r18, 0xB8	; 184
    1180:	3b e0       	ldi	r19, 0x0B	; 11
    1182:	48 ec       	ldi	r20, 0xC8	; 200
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	ca 01       	movw	r24, r20
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <__vector_14+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	21 50       	subi	r18, 0x01	; 1
    118e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	d1 f7       	brne	.-12     	; 0x1186 <__vector_14+0x5e>
  _delay_ms(300);
  
  // Select next ADC input
  if (++channel > (LAST_ADC - FIRST_ADC))
    1192:	80 91 ea 01 	lds	r24, 0x01EA
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	80 93 ea 01 	sts	0x01EA, r24
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	18 f0       	brcs	.+6      	; 0x11a6 <__vector_14+0x7e>
    channel = 0;
    11a0:	10 92 ea 01 	sts	0x01EA, r1
    11a4:	80 e0       	ldi	r24, 0x00	; 0
  
  ADMUX = (FIRST_ADC | (ADC_VREF_TYPE & 0xff)) + channel;
    11a6:	80 5a       	subi	r24, 0xA0	; 160
    11a8:	87 b9       	out	0x07, r24	; 7
  
  adc_start;
    11aa:	36 9a       	sbi	0x06, 6	; 6
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <sensor_send_data>:
    break;
  }
}

static void sensor_send_data(struct fsm *fsm, enum event event)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
  switch (event) {
    11d4:	61 15       	cp	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	91 f4       	brne	.+36     	; 0x11fe <sensor_send_data+0x30>
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM send data");
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	6b ea       	ldi	r22, 0xAB	; 171
    11de:	71 e0       	ldi	r23, 0x01	; 1
    11e0:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    11e4:	28 e8       	ldi	r18, 0x88	; 136
    11e6:	33 e1       	ldi	r19, 0x13	; 19
    11e8:	48 ec       	ldi	r20, 0xC8	; 200
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	ca 01       	movw	r24, r20
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <sensor_send_data+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	21 50       	subi	r18, 0x01	; 1
    11f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	d1 f7       	brne	.-12     	; 0x11ec <sensor_send_data+0x1e>
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
    break;
  }
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret
  }
}

static void sensor_send_data(struct fsm *fsm, enum event event)
{
  switch (event) {
    11fe:	61 30       	cpi	r22, 0x01	; 1
    1200:	71 05       	cpc	r23, r1
    1202:	d1 f7       	brne	.-12     	; 0x11f8 <sensor_send_data+0x2a>
static char send_samples()
{
  unsigned char i = 0;
  
  //TODO v ID nastavit priznak pro treshold a jake kanly posilam
  tx_msg.id = SENSOR_ID;
    1204:	10 92 0b 02 	sts	0x020B, r1
    1208:	10 92 0c 02 	sts	0x020C, r1
    120c:	10 92 0d 02 	sts	0x020D, r1
    1210:	10 92 0e 02 	sts	0x020E, r1
    1214:	90 91 0f 02 	lds	r25, 0x020F
  
  for (;i < 3;i++) {
    if (sen_cfg_lock.samples[i]) {
    1218:	80 91 f2 01 	lds	r24, 0x01F2
    121c:	88 23       	and	r24, r24
    121e:	41 f0       	breq	.+16     	; 0x1230 <sensor_send_data+0x62>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    1220:	e9 2f       	mov	r30, r25
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	e6 5f       	subi	r30, 0xF6	; 246
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	80 91 f7 01 	lds	r24, 0x01F7
    122c:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
    122e:	9f 5f       	subi	r25, 0xFF	; 255
  
  //TODO v ID nastavit priznak pro treshold a jake kanly posilam
  tx_msg.id = SENSOR_ID;
  
  for (;i < 3;i++) {
    if (sen_cfg_lock.samples[i]) {
    1230:	80 91 f3 01 	lds	r24, 0x01F3
    1234:	88 23       	and	r24, r24
    1236:	41 f0       	breq	.+16     	; 0x1248 <sensor_send_data+0x7a>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    1238:	e9 2f       	mov	r30, r25
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	e6 5f       	subi	r30, 0xF6	; 246
    123e:	fd 4f       	sbci	r31, 0xFD	; 253
    1240:	80 91 f8 01 	lds	r24, 0x01F8
    1244:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
    1246:	9f 5f       	subi	r25, 0xFF	; 255
  
  //TODO v ID nastavit priznak pro treshold a jake kanly posilam
  tx_msg.id = SENSOR_ID;
  
  for (;i < 3;i++) {
    if (sen_cfg_lock.samples[i]) {
    1248:	80 91 f4 01 	lds	r24, 0x01F4
    124c:	88 23       	and	r24, r24
    124e:	41 f0       	breq	.+16     	; 0x1260 <sensor_send_data+0x92>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    1250:	e9 2f       	mov	r30, r25
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	e6 5f       	subi	r30, 0xF6	; 246
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
    1258:	80 91 f9 01 	lds	r24, 0x01F9
    125c:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
    125e:	9f 5f       	subi	r25, 0xFF	; 255
    1260:	90 93 0f 02 	sts	0x020F, r25
    }
  }
  
  if (sja1000p_pre_write_config(&tx_msg)) {
    1264:	8a e0       	ldi	r24, 0x0A	; 10
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 3d 04 	call	0x87a	; 0x87a <sja1000p_pre_write_config>
    126c:	88 23       	and	r24, r24
    126e:	81 f0       	breq	.+32     	; 0x1290 <sensor_send_data+0xc2>
#ifdef DEBUG    
    CANMSG("Send samples err");
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	69 eb       	ldi	r22, 0xB9	; 185
    1274:	71 e0       	ldi	r23, 0x01	; 1
    1276:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    127a:	28 e8       	ldi	r18, 0x88	; 136
    127c:	33 e1       	ldi	r19, 0x13	; 19
    127e:	48 ec       	ldi	r20, 0xC8	; 200
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	ca 01       	movw	r24, r20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <sensor_send_data+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	d1 f7       	brne	.-12     	; 0x1282 <sensor_send_data+0xb4>
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <sensor_send_data+0xc6>
#endif    
    return -1;
  }
  
  sja1000p_send_msg();
    1290:	0e 94 99 02 	call	0x532	; 0x532 <sja1000p_send_msg>
    CANMSG("FSM send data");
#endif
    break;
  case EVENT_DO:
    send_samples();
    fsm->current_state = wait_for_cmd;
    1294:	82 ea       	ldi	r24, 0xA2	; 162
    1296:	97 e0       	ldi	r25, 0x07	; 7
    1298:	99 83       	std	Y+1, r25	; 0x01
    129a:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <sensor_config>:

  return 0;
}

char sensor_config(struct canmsg_t *rx_msg, struct fsm *fsm)
{
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	eb 01       	movw	r28, r22
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    12b0:	fc 01       	movw	r30, r24
    12b2:	21 81       	ldd	r18, Z+1	; 0x01
    12b4:	32 81       	ldd	r19, Z+2	; 0x02
    12b6:	43 81       	ldd	r20, Z+3	; 0x03
    12b8:	54 81       	ldd	r21, Z+4	; 0x04
    12ba:	21 15       	cp	r18, r1
    12bc:	31 05       	cpc	r19, r1
    12be:	41 05       	cpc	r20, r1
    12c0:	51 05       	cpc	r21, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <sensor_config+0x24>
    12c4:	8e c0       	rjmp	.+284    	; 0x13e2 <sensor_config+0x140>
    CANMSG("IDN? answer OK");
#endif
  }
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    12c6:	da 01       	movw	r26, r20
    12c8:	c9 01       	movw	r24, r18
    12ca:	7d e0       	ldi	r23, 0x0D	; 13
    12cc:	b6 95       	lsr	r27
    12ce:	a7 95       	ror	r26
    12d0:	97 95       	ror	r25
    12d2:	87 95       	ror	r24
    12d4:	7a 95       	dec	r23
    12d6:	d1 f7       	brne	.-12     	; 0x12cc <sensor_config+0x2a>
    12d8:	80 93 ef 01 	sts	0x01EF, r24
    sen_cfg.treshold_channel = treshold_channel(rx_msg->id);
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	6b e0       	ldi	r22, 0x0B	; 11
    12e2:	b6 95       	lsr	r27
    12e4:	a7 95       	ror	r26
    12e6:	97 95       	ror	r25
    12e8:	87 95       	ror	r24
    12ea:	6a 95       	dec	r22
    12ec:	d1 f7       	brne	.-12     	; 0x12e2 <sensor_config+0x40>
    12ee:	83 70       	andi	r24, 0x03	; 3
    12f0:	80 93 f0 01 	sts	0x01F0, r24
    12f4:	ec ee       	ldi	r30, 0xEC	; 236
    12f6:	f1 e0       	ldi	r31, 0x01	; 1
    12f8:	60 e0       	ldi	r22, 0x00	; 0
static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    12fa:	61 30       	cpi	r22, 0x01	; 1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <sensor_config+0x5e>
    12fe:	58 c0       	rjmp	.+176    	; 0x13b0 <sensor_config+0x10e>
    1300:	61 30       	cpi	r22, 0x01	; 1
    1302:	d8 f4       	brcc	.+54     	; 0x133a <sensor_config+0x98>
    1304:	88 e0       	ldi	r24, 0x08	; 8
    1306:	90 e0       	ldi	r25, 0x00	; 0
  }
}

static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    1308:	79 01       	movw	r14, r18
    130a:	8a 01       	movw	r16, r20
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <sensor_config+0x74>
    130e:	16 95       	lsr	r17
    1310:	07 95       	ror	r16
    1312:	f7 94       	ror	r15
    1314:	e7 94       	ror	r14
    1316:	8a 95       	dec	r24
    1318:	d2 f7       	brpl	.-12     	; 0x130e <sensor_config+0x6c>
    131a:	d8 01       	movw	r26, r16
    131c:	c7 01       	movw	r24, r14
    131e:	87 70       	andi	r24, 0x07	; 7
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	09 f4       	brne	.+2      	; 0x1326 <sensor_config+0x84>
    1324:	5c c0       	rjmp	.+184    	; 0x13de <sensor_config+0x13c>
    1326:	85 30       	cpi	r24, 0x05	; 5
    1328:	70 f4       	brcc	.+28     	; 0x1346 <sensor_config+0xa4>
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	09 f4       	brne	.+2      	; 0x1330 <sensor_config+0x8e>
    132e:	55 c0       	rjmp	.+170    	; 0x13da <sensor_config+0x138>
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	08 f4       	brcc	.+2      	; 0x1336 <sensor_config+0x94>
    1334:	47 c0       	rjmp	.+142    	; 0x13c4 <sensor_config+0x122>
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	0c c0       	rjmp	.+24     	; 0x1352 <sensor_config+0xb0>
static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    133a:	62 30       	cpi	r22, 0x02	; 2
    133c:	09 f4       	brne	.+2      	; 0x1340 <sensor_config+0x9e>
    133e:	3b c0       	rjmp	.+118    	; 0x13b6 <sensor_config+0x114>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	e1 cf       	rjmp	.-62     	; 0x1308 <sensor_config+0x66>
  }
}

static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    1346:	86 30       	cpi	r24, 0x06	; 6
    1348:	09 f4       	brne	.+2      	; 0x134c <sensor_config+0xaa>
    134a:	45 c0       	rjmp	.+138    	; 0x13d6 <sensor_config+0x134>
    134c:	86 30       	cpi	r24, 0x06	; 6
    134e:	b0 f5       	brcc	.+108    	; 0x13bc <sensor_config+0x11a>
    1350:	80 e2       	ldi	r24, 0x20	; 32
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    sen_cfg.treshold_channel = treshold_channel(rx_msg->id);
    
    for (;i < 3;i++) {
      sen_cfg.samples[i] = averaging(channel_avrg(rx_msg->id,shift(i)));
    1352:	81 93       	st	Z+, r24
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    sen_cfg.treshold_channel = treshold_channel(rx_msg->id);
    
    for (;i < 3;i++) {
    1354:	6f 5f       	subi	r22, 0xFF	; 255
    1356:	63 30       	cpi	r22, 0x03	; 3
    1358:	81 f6       	brne	.-96     	; 0x12fa <sensor_config+0x58>
      sen_cfg.samples[i] = averaging(channel_avrg(rx_msg->id,shift(i)));
    }
    
    sen_cfg.delivery = delivery(rx_msg->id);
    135a:	56 95       	lsr	r21
    135c:	47 95       	ror	r20
    135e:	37 95       	ror	r19
    1360:	27 95       	ror	r18
    1362:	82 2f       	mov	r24, r18
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	80 93 eb 01 	sts	0x01EB, r24
    
    if (sen_cfg.samples[0] || sen_cfg.samples[1] || sen_cfg.samples[2])
    136a:	80 91 ec 01 	lds	r24, 0x01EC
    136e:	88 23       	and	r24, r24
    1370:	69 f5       	brne	.+90     	; 0x13cc <sensor_config+0x12a>
    1372:	80 91 ed 01 	lds	r24, 0x01ED
    1376:	88 23       	and	r24, r24
    1378:	49 f5       	brne	.+82     	; 0x13cc <sensor_config+0x12a>
    137a:	80 91 ee 01 	lds	r24, 0x01EE
    137e:	88 23       	and	r24, r24
    1380:	29 f5       	brne	.+74     	; 0x13cc <sensor_config+0x12a>
      fsm->measurement_start = true;
    
#ifdef DEBUG
    CANMSG("Sensor config OK");
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	69 ed       	ldi	r22, 0xD9	; 217
    1386:	71 e0       	ldi	r23, 0x01	; 1
    1388:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    138c:	28 e8       	ldi	r18, 0x88	; 136
    138e:	33 e1       	ldi	r19, 0x13	; 19
    1390:	48 ec       	ldi	r20, 0xC8	; 200
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	ca 01       	movw	r24, r20
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <sensor_config+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	21 50       	subi	r18, 0x01	; 1
    139c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	d1 f7       	brne	.-12     	; 0x1394 <sensor_config+0xf2>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
#endif
  }
  
  return 0;
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	08 95       	ret
static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    13b0:	85 e0       	ldi	r24, 0x05	; 5
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 cf       	rjmp	.-174    	; 0x1308 <sensor_config+0x66>
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a6 cf       	rjmp	.-180    	; 0x1308 <sensor_config+0x66>
  }
}

static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    13bc:	87 30       	cpi	r24, 0x07	; 7
    13be:	49 f0       	breq	.+18     	; 0x13d2 <sensor_config+0x130>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	c7 cf       	rjmp	.-114    	; 0x1352 <sensor_config+0xb0>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <sensor_config+0x11e>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	c3 cf       	rjmp	.-122    	; 0x1352 <sensor_config+0xb0>
    }
    
    sen_cfg.delivery = delivery(rx_msg->id);
    
    if (sen_cfg.samples[0] || sen_cfg.samples[1] || sen_cfg.samples[2])
      fsm->measurement_start = true;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	8c 83       	std	Y+4, r24	; 0x04
    13d0:	d8 cf       	rjmp	.-80     	; 0x1382 <sensor_config+0xe0>
  }
}

static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	be cf       	rjmp	.-132    	; 0x1352 <sensor_config+0xb0>
    13d6:	80 e4       	ldi	r24, 0x40	; 64
    13d8:	bc cf       	rjmp	.-136    	; 0x1352 <sensor_config+0xb0>
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	ba cf       	rjmp	.-140    	; 0x1352 <sensor_config+0xb0>
    13de:	80 e1       	ldi	r24, 0x10	; 16
    13e0:	b8 cf       	rjmp	.-144    	; 0x1352 <sensor_config+0xb0>
{
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    if (sja1000p_pre_write_config(&idn_msg))
    13e2:	8b ef       	ldi	r24, 0xFB	; 251
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 3d 04 	call	0x87a	; 0x87a <sja1000p_pre_write_config>
    13ea:	88 23       	and	r24, r24
    13ec:	11 f0       	breq	.+4      	; 0x13f2 <sensor_config+0x150>
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	d8 cf       	rjmp	.-80     	; 0x13a2 <sensor_config+0x100>
      return -1;
    
    sja1000p_send_msg();
    13f2:	0e 94 99 02 	call	0x532	; 0x532 <sja1000p_send_msg>
    
#ifdef DEBUG
    CANMSG("IDN? answer OK");
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	6a ec       	ldi	r22, 0xCA	; 202
    13fa:	71 e0       	ldi	r23, 0x01	; 1
    13fc:	0e 94 13 02 	call	0x426	; 0x426 <lcd_puts_line>
    1400:	28 e8       	ldi	r18, 0x88	; 136
    1402:	33 e1       	ldi	r19, 0x13	; 19
    1404:	48 ec       	ldi	r20, 0xC8	; 200
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	ca 01       	movw	r24, r20
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	f1 f7       	brne	.-4      	; 0x140a <sensor_config+0x168>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140e:	21 50       	subi	r18, 0x01	; 1
    1410:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	d1 f7       	brne	.-12     	; 0x1408 <sensor_config+0x166>
    1414:	c5 cf       	rjmp	.-118    	; 0x13a0 <sensor_config+0xfe>

00001416 <__vector_19>:

/*
 * Osetreni preruseni od citace zpozdeni
 */
ISR(TIMER0_COMP_vect)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
  /* increment msec @1kHz */
    ++timer_msec;
    1428:	80 91 19 02 	lds	r24, 0x0219
    142c:	90 91 1a 02 	lds	r25, 0x021A
    1430:	a0 91 1b 02 	lds	r26, 0x021B
    1434:	b0 91 1c 02 	lds	r27, 0x021C
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	a1 1d       	adc	r26, r1
    143c:	b1 1d       	adc	r27, r1
    143e:	80 93 19 02 	sts	0x0219, r24
    1442:	90 93 1a 02 	sts	0x021A, r25
    1446:	a0 93 1b 02 	sts	0x021B, r26
    144a:	b0 93 1c 02 	sts	0x021C, r27
}
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	0f 90       	pop	r0
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	0f 90       	pop	r0
    145c:	1f 90       	pop	r1
    145e:	18 95       	reti

00001460 <timer0_init_1khz>:



void timer0_init_1khz()
{
  TCNT0 = 0;
    1460:	12 be       	out	0x32, r1	; 50
  OCR0 = 124;
    1462:	8c e7       	ldi	r24, 0x7C	; 124
    1464:	8c bf       	out	0x3c, r24	; 60
  TIMSK |= 0x02;    /* interrupt enable when OC */
    1466:	89 b7       	in	r24, 0x39	; 57
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= 0x0B;     /* CTC mode, delicka 64x, normal port op. */
    146c:	83 b7       	in	r24, 0x33	; 51
    146e:	8b 60       	ori	r24, 0x0B	; 11
    1470:	83 bf       	out	0x33, r24	; 51
}
    1472:	08 95       	ret

00001474 <init_fsm>:
#include "../include/fsm.h"

void init_fsm(struct fsm *fsm, state_fcn initial_state)
{
    1474:	fc 01       	movw	r30, r24
    1476:	9b 01       	movw	r18, r22
	fsm->current_state = initial_state;
    1478:	71 83       	std	Z+1, r23	; 0x01
    147a:	60 83       	st	Z, r22
	fsm->current_state(fsm, EVENT_ENTRY);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	f9 01       	movw	r30, r18
    1482:	09 95       	icall
}
    1484:	08 95       	ret

00001486 <run_fsm>:

void run_fsm(struct fsm *fsm){
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	ec 01       	movw	r28, r24
	fsm->last_state = fsm->current_state;		// set actual state
    148c:	e8 81       	ld	r30, Y
    148e:	f9 81       	ldd	r31, Y+1	; 0x01
    1490:	fb 83       	std	Y+3, r31	; 0x03
    1492:	ea 83       	std	Y+2, r30	; 0x02
	fsm->current_state(fsm, EVENT_DO);		// change parameter
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	09 95       	icall
	
	if(fsm->last_state != fsm->current_state){ 	// if state was changed
    149a:	ea 81       	ldd	r30, Y+2	; 0x02
    149c:	fb 81       	ldd	r31, Y+3	; 0x03
    149e:	88 81       	ld	r24, Y
    14a0:	99 81       	ldd	r25, Y+1	; 0x01
    14a2:	e8 17       	cp	r30, r24
    14a4:	f9 07       	cpc	r31, r25
    14a6:	51 f0       	breq	.+20     	; 0x14bc <run_fsm+0x36>
		fsm->last_state(fsm, EVENT_EXIT); 	// finish the old state
    14a8:	ce 01       	movw	r24, r28
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	09 95       	icall
		fsm->current_state(fsm, EVENT_ENTRY); 	// initialize the new state
    14b0:	e8 81       	ld	r30, Y
    14b2:	f9 81       	ldd	r31, Y+1	; 0x01
    14b4:	ce 01       	movw	r24, r28
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	09 95       	icall
	}
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <__mulsi3>:
    14c2:	62 9f       	mul	r22, r18
    14c4:	d0 01       	movw	r26, r0
    14c6:	73 9f       	mul	r23, r19
    14c8:	f0 01       	movw	r30, r0
    14ca:	82 9f       	mul	r24, r18
    14cc:	e0 0d       	add	r30, r0
    14ce:	f1 1d       	adc	r31, r1
    14d0:	64 9f       	mul	r22, r20
    14d2:	e0 0d       	add	r30, r0
    14d4:	f1 1d       	adc	r31, r1
    14d6:	92 9f       	mul	r25, r18
    14d8:	f0 0d       	add	r31, r0
    14da:	83 9f       	mul	r24, r19
    14dc:	f0 0d       	add	r31, r0
    14de:	74 9f       	mul	r23, r20
    14e0:	f0 0d       	add	r31, r0
    14e2:	65 9f       	mul	r22, r21
    14e4:	f0 0d       	add	r31, r0
    14e6:	99 27       	eor	r25, r25
    14e8:	72 9f       	mul	r23, r18
    14ea:	b0 0d       	add	r27, r0
    14ec:	e1 1d       	adc	r30, r1
    14ee:	f9 1f       	adc	r31, r25
    14f0:	63 9f       	mul	r22, r19
    14f2:	b0 0d       	add	r27, r0
    14f4:	e1 1d       	adc	r30, r1
    14f6:	f9 1f       	adc	r31, r25
    14f8:	bd 01       	movw	r22, r26
    14fa:	cf 01       	movw	r24, r30
    14fc:	11 24       	eor	r1, r1
    14fe:	08 95       	ret

00001500 <__udivmodhi4>:
    1500:	aa 1b       	sub	r26, r26
    1502:	bb 1b       	sub	r27, r27
    1504:	51 e1       	ldi	r21, 0x11	; 17
    1506:	07 c0       	rjmp	.+14     	; 0x1516 <__udivmodhi4_ep>

00001508 <__udivmodhi4_loop>:
    1508:	aa 1f       	adc	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	a6 17       	cp	r26, r22
    150e:	b7 07       	cpc	r27, r23
    1510:	10 f0       	brcs	.+4      	; 0x1516 <__udivmodhi4_ep>
    1512:	a6 1b       	sub	r26, r22
    1514:	b7 0b       	sbc	r27, r23

00001516 <__udivmodhi4_ep>:
    1516:	88 1f       	adc	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	5a 95       	dec	r21
    151c:	a9 f7       	brne	.-22     	; 0x1508 <__udivmodhi4_loop>
    151e:	80 95       	com	r24
    1520:	90 95       	com	r25
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	08 95       	ret

00001528 <__udivmodsi4>:
    1528:	a1 e2       	ldi	r26, 0x21	; 33
    152a:	1a 2e       	mov	r1, r26
    152c:	aa 1b       	sub	r26, r26
    152e:	bb 1b       	sub	r27, r27
    1530:	fd 01       	movw	r30, r26
    1532:	0d c0       	rjmp	.+26     	; 0x154e <__udivmodsi4_ep>

00001534 <__udivmodsi4_loop>:
    1534:	aa 1f       	adc	r26, r26
    1536:	bb 1f       	adc	r27, r27
    1538:	ee 1f       	adc	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	a2 17       	cp	r26, r18
    153e:	b3 07       	cpc	r27, r19
    1540:	e4 07       	cpc	r30, r20
    1542:	f5 07       	cpc	r31, r21
    1544:	20 f0       	brcs	.+8      	; 0x154e <__udivmodsi4_ep>
    1546:	a2 1b       	sub	r26, r18
    1548:	b3 0b       	sbc	r27, r19
    154a:	e4 0b       	sbc	r30, r20
    154c:	f5 0b       	sbc	r31, r21

0000154e <__udivmodsi4_ep>:
    154e:	66 1f       	adc	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	1a 94       	dec	r1
    1558:	69 f7       	brne	.-38     	; 0x1534 <__udivmodsi4_loop>
    155a:	60 95       	com	r22
    155c:	70 95       	com	r23
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	bd 01       	movw	r22, r26
    1568:	cf 01       	movw	r24, r30
    156a:	08 95       	ret

0000156c <ltoa>:
    156c:	fa 01       	movw	r30, r20
    156e:	cf 93       	push	r28
    1570:	ff 93       	push	r31
    1572:	ef 93       	push	r30
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	44 f1       	brlt	.+80     	; 0x15c8 <ltoa+0x5c>
    1578:	25 32       	cpi	r18, 0x25	; 37
    157a:	34 f5       	brge	.+76     	; 0x15c8 <ltoa+0x5c>
    157c:	c2 2f       	mov	r28, r18
    157e:	e8 94       	clt
    1580:	ca 30       	cpi	r28, 0x0A	; 10
    1582:	49 f4       	brne	.+18     	; 0x1596 <ltoa+0x2a>
    1584:	97 fb       	bst	r25, 7
    1586:	3e f4       	brtc	.+14     	; 0x1596 <ltoa+0x2a>
    1588:	90 95       	com	r25
    158a:	80 95       	com	r24
    158c:	70 95       	com	r23
    158e:	61 95       	neg	r22
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	2c 2f       	mov	r18, r28
    1598:	33 27       	eor	r19, r19
    159a:	44 27       	eor	r20, r20
    159c:	55 27       	eor	r21, r21
    159e:	ff 93       	push	r31
    15a0:	ef 93       	push	r30
    15a2:	0e 94 94 0a 	call	0x1528	; 0x1528 <__udivmodsi4>
    15a6:	ef 91       	pop	r30
    15a8:	ff 91       	pop	r31
    15aa:	60 5d       	subi	r22, 0xD0	; 208
    15ac:	6a 33       	cpi	r22, 0x3A	; 58
    15ae:	0c f0       	brlt	.+2      	; 0x15b2 <ltoa+0x46>
    15b0:	69 5d       	subi	r22, 0xD9	; 217
    15b2:	61 93       	st	Z+, r22
    15b4:	b9 01       	movw	r22, r18
    15b6:	ca 01       	movw	r24, r20
    15b8:	60 50       	subi	r22, 0x00	; 0
    15ba:	70 40       	sbci	r23, 0x00	; 0
    15bc:	80 40       	sbci	r24, 0x00	; 0
    15be:	90 40       	sbci	r25, 0x00	; 0
    15c0:	51 f7       	brne	.-44     	; 0x1596 <ltoa+0x2a>
    15c2:	16 f4       	brtc	.+4      	; 0x15c8 <ltoa+0x5c>
    15c4:	cd e2       	ldi	r28, 0x2D	; 45
    15c6:	c1 93       	st	Z+, r28
    15c8:	10 82       	st	Z, r1
    15ca:	8f 91       	pop	r24
    15cc:	9f 91       	pop	r25
    15ce:	cf 91       	pop	r28
    15d0:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <strrev>

000015d4 <strrev>:
    15d4:	dc 01       	movw	r26, r24
    15d6:	fc 01       	movw	r30, r24
    15d8:	67 2f       	mov	r22, r23
    15da:	71 91       	ld	r23, Z+
    15dc:	77 23       	and	r23, r23
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <strrev+0x4>
    15e0:	32 97       	sbiw	r30, 0x02	; 2
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <strrev+0x18>
    15e4:	7c 91       	ld	r23, X
    15e6:	6d 93       	st	X+, r22
    15e8:	70 83       	st	Z, r23
    15ea:	62 91       	ld	r22, -Z
    15ec:	ae 17       	cp	r26, r30
    15ee:	bf 07       	cpc	r27, r31
    15f0:	c8 f3       	brcs	.-14     	; 0x15e4 <strrev+0x10>
    15f2:	08 95       	ret

000015f4 <_exit>:
    15f4:	f8 94       	cli

000015f6 <__stop_program>:
    15f6:	ff cf       	rjmp	.-2      	; 0x15f6 <__stop_program>
