
../build/AVR_CAN_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000160  00800060  00001382  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008001c0  008001c0  00001576  2**0
                  ALLOC
  3 .stab         00004cbc  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020a9  00000000  00000000  00006234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 bf 09 	jmp	0x137e	; 0x137e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/*
 *  MAIN
 */
int main(void)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
  timer sensor_time = timer0_msec;
      9a:	e0 90 da 01 	lds	r14, 0x01DA
      9e:	f0 90 db 01 	lds	r15, 0x01DB
      a2:	00 91 dc 01 	lds	r16, 0x01DC
      a6:	10 91 dd 01 	lds	r17, 0x01DD
  
  timer0_init_1khz();
      aa:	0e 94 09 09 	call	0x1212	; 0x1212 <timer0_init_1khz>
  init_ports();
      ae:	0e 94 44 02 	call	0x488	; 0x488 <init_ports>
  
  sei();      // globalni povoleni preruseni
      b2:	78 94       	sei
  
  lcd_init(LCD_DISP_ON);
      b4:	8c e0       	ldi	r24, 0x0C	; 12
      b6:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_init>
  
  lcd_puts_line(0,"CAN senzor");
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	60 e6       	ldi	r22, 0x60	; 96
      be:	70 e0       	ldi	r23, 0x00	; 0
      c0:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
  
  chip.baudrate = SJA_BAUD;
      c4:	80 e4       	ldi	r24, 0x40	; 64
      c6:	92 e4       	ldi	r25, 0x42	; 66
      c8:	af e0       	ldi	r26, 0x0F	; 15
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	80 93 f9 01 	sts	0x01F9, r24
      d0:	90 93 fa 01 	sts	0x01FA, r25
      d4:	a0 93 fb 01 	sts	0x01FB, r26
      d8:	b0 93 fc 01 	sts	0x01FC, r27
  chip.clock = SJA_CLOCK;
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	94 e2       	ldi	r25, 0x24	; 36
      e0:	a4 ef       	ldi	r26, 0xF4	; 244
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	80 93 f5 01 	sts	0x01F5, r24
      e8:	90 93 f6 01 	sts	0x01F6, r25
      ec:	a0 93 f7 01 	sts	0x01F7, r26
      f0:	b0 93 f8 01 	sts	0x01F8, r27
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
      f4:	88 e0       	ldi	r24, 0x08	; 8
      f6:	80 93 fd 01 	sts	0x01FD, r24
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
      fa:	8a e1       	ldi	r24, 0x1A	; 26
      fc:	80 93 fe 01 	sts	0x01FE, r24
  
  if(sja1000p_chip_config(&chip))
     100:	84 ef       	ldi	r24, 0xF4	; 244
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	0e 94 a8 06 	call	0xd50	; 0xd50 <sja1000p_chip_config>
     108:	88 23       	and	r24, r24
     10a:	e9 f0       	breq	.+58     	; 0x146 <main+0xb4>
  {
    CANMSG("Config error!");
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	6b e6       	ldi	r22, 0x6B	; 107
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     116:	80 e1       	ldi	r24, 0x10	; 16
     118:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     11a:	28 ec       	ldi	r18, 0xC8	; 200
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	31 97       	sbiw	r30, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <main+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     126:	d9 f7       	brne	.-10     	; 0x11e <main+0x8c>
    _delay_ms(1000);
    CANMSG("Restarting...");
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	69 e7       	ldi	r22, 0x79	; 121
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     132:	80 e1       	ldi	r24, 0x10	; 16
     134:	97 e2       	ldi	r25, 0x27	; 39
     136:	28 ec       	ldi	r18, 0xC8	; 200
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <main+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     142:	d9 f7       	brne	.-10     	; 0x13a <main+0xa8>
     144:	ff cf       	rjmp	.-2      	; 0x144 <main+0xb2>
    _delay_ms(1000);
    while (1); // proved sw reset nejak
  }

  sensor_init();
     146:	0e 94 9f 07 	call	0xf3e	; 0xf3e <sensor_init>
  
  init_fsm(&fsm_sensor,&fsm_sensor_init);
     14a:	8e ed       	ldi	r24, 0xDE	; 222
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	69 e4       	ldi	r22, 0x49	; 73
     150:	77 e0       	ldi	r23, 0x07	; 7
     152:	0e 94 13 09 	call	0x1226	; 0x1226 <init_fsm>
     156:	a8 01       	movw	r20, r16
     158:	97 01       	movw	r18, r14
     15a:	26 5f       	subi	r18, 0xF6	; 246
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	4f 4f       	sbci	r20, 0xFF	; 255
     160:	5f 4f       	sbci	r21, 0xFF	; 255
  
  while(1) {
    
    if (timer0_msec >= (sensor_time + 10)) {
     162:	80 91 da 01 	lds	r24, 0x01DA
     166:	90 91 db 01 	lds	r25, 0x01DB
     16a:	a0 91 dc 01 	lds	r26, 0x01DC
     16e:	b0 91 dd 01 	lds	r27, 0x01DD
     172:	82 17       	cp	r24, r18
     174:	93 07       	cpc	r25, r19
     176:	a4 07       	cpc	r26, r20
     178:	b5 07       	cpc	r27, r21
     17a:	98 f3       	brcs	.-26     	; 0x162 <main+0xd0>
      sensor_time = timer0_msec;
     17c:	e0 90 da 01 	lds	r14, 0x01DA
     180:	f0 90 db 01 	lds	r15, 0x01DB
     184:	00 91 dc 01 	lds	r16, 0x01DC
     188:	10 91 dd 01 	lds	r17, 0x01DD
      
      /* run fsm every 10ms*/
      run_fsm(&fsm_sensor);
     18c:	8e ed       	ldi	r24, 0xDE	; 222
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 1c 09 	call	0x1238	; 0x1238 <run_fsm>
     194:	e0 cf       	rjmp	.-64     	; 0x156 <main+0xc4>

00000196 <__vector_1>:

/*
 * SJA interrupt service routine
 */
ISR(INT0_vect)
{
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	ef 93       	push	r30
     1b6:	ff 93       	push	r31
  sja1000p_irq_handler(&rx_msg);
     1b8:	85 ee       	ldi	r24, 0xE5	; 229
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 30 03 	call	0x660	; 0x660 <sja1000p_irq_handler>
  
  if (rx_msg.status == NEW) {
     1c0:	80 91 f3 01 	lds	r24, 0x01F3
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	89 f0       	breq	.+34     	; 0x1ea <__vector_1+0x54>
    rx_msg.status = NONE;
    sensor_config(&rx_msg,&fsm_sensor);
  }
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti
ISR(INT0_vect)
{
  sja1000p_irq_handler(&rx_msg);
  
  if (rx_msg.status == NEW) {
    rx_msg.status = NONE;
     1ea:	10 92 f3 01 	sts	0x01F3, r1
    sensor_config(&rx_msg,&fsm_sensor);
     1ee:	85 ee       	ldi	r24, 0xE5	; 229
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	6e ed       	ldi	r22, 0xDE	; 222
     1f4:	71 e0       	ldi	r23, 0x01	; 1
     1f6:	0e 94 4d 08 	call	0x109a	; 0x109a <sensor_config>
     1fa:	e6 cf       	rjmp	.-52     	; 0x1c8 <__vector_1+0x32>

000001fc <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     1fc:	66 23       	and	r22, r22
     1fe:	49 f1       	breq	.+82     	; 0x252 <lcd_write+0x56>
       lcd_rs_high();
     200:	c0 9a       	sbi	0x18, 0	; 24
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();
     202:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     204:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     206:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     208:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     20a:	8e 9a       	sbi	0x11, 6	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     20c:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     20e:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     210:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     212:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     214:	87 fd       	sbrc	r24, 7
     216:	1f c0       	rjmp	.+62     	; 0x256 <lcd_write+0x5a>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     218:	86 fd       	sbrc	r24, 6
     21a:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     21c:	85 fd       	sbrc	r24, 5
     21e:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     220:	84 fd       	sbrc	r24, 4
     222:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     224:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_write+0x2c>
    lcd_e_low();
     228:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     22a:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     22c:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     22e:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     230:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     232:	83 fd       	sbrc	r24, 3
     234:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     236:	82 fd       	sbrc	r24, 2
     238:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     23a:	81 fd       	sbrc	r24, 1
     23c:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     23e:	80 fd       	sbrc	r24, 0
     240:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     242:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_write+0x4a>
    lcd_e_low();
     246:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     248:	93 9a       	sbi	0x12, 3	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     24a:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     24c:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     24e:	96 9a       	sbi	0x12, 6	; 18
    }
}
     250:	08 95       	ret


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     252:	c0 98       	cbi	0x18, 0	; 24
     254:	d6 cf       	rjmp	.-84     	; 0x202 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     256:	96 9a       	sbi	0x12, 6	; 18
     258:	df cf       	rjmp	.-66     	; 0x218 <lcd_write+0x1c>

0000025a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     25a:	88 23       	and	r24, r24
     25c:	09 f1       	breq	.+66     	; 0x2a0 <lcd_read+0x46>
        lcd_rs_high();                       /* RS=1: read data      */
     25e:	c0 9a       	sbi	0x18, 0	; 24
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    lcd_rw_high();                           /* RW=1  read mode      */
     260:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     262:	8b 98       	cbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     264:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     266:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     268:	8e 98       	cbi	0x11, 6	; 17
                
        /* read high nibble first */
        lcd_e_high();
     26a:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_read+0x14>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     26e:	83 9b       	sbis	0x10, 3	; 16
     270:	15 c0       	rjmp	.+42     	; 0x29c <lcd_read+0x42>
     272:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     274:	84 99       	sbic	0x10, 4	; 16
     276:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     278:	85 99       	sbic	0x10, 5	; 16
     27a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     27c:	86 99       	sbic	0x10, 6	; 16
     27e:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     280:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
     282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_read+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     284:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_read+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     288:	83 99       	sbic	0x10, 3	; 16
     28a:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     28c:	84 99       	sbic	0x10, 4	; 16
     28e:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     290:	85 99       	sbic	0x10, 5	; 16
     292:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     294:	86 99       	sbic	0x10, 6	; 16
     296:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     298:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     29a:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	ea cf       	rjmp	.-44     	; 0x274 <lcd_read+0x1a>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     2a0:	c0 98       	cbi	0x18, 0	; 24
     2a2:	de cf       	rjmp	.-68     	; 0x260 <lcd_read+0x6>

000002a4 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_read>
     2aa:	87 fd       	sbrc	r24, 7
     2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     2ae:	84 e0       	ldi	r24, 0x04	; 4
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_read>
    
}/* lcd_waitbusy */
     2bc:	08 95       	ret

000002be <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     2be:	1f 93       	push	r17
     2c0:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     2c2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_waitbusy>
    lcd_write(cmd,0);
     2c6:	81 2f       	mov	r24, r17
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_write>
}
     2ce:	1f 91       	pop	r17
     2d0:	08 95       	ret

000002d2 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     2d2:	1f 93       	push	r17
     2d4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     2d6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_waitbusy>
    lcd_write(data,1);
     2da:	81 2f       	mov	r24, r17
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_write>
}
     2e2:	1f 91       	pop	r17
     2e4:	08 95       	ret

000002e6 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     2e6:	66 23       	and	r22, r22
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     2ea:	80 54       	subi	r24, 0x40	; 64
     2ec:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
     2f0:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     2f2:	80 58       	subi	r24, 0x80	; 128
     2f4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
     2f8:	08 95       	ret

000002fa <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     2fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_waitbusy>
}
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret

00000302 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
}
     308:	08 95       	ret

0000030a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
}
     310:	08 95       	ret

00000312 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     312:	1f 93       	push	r17
     314:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     316:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_waitbusy>
    if (c=='\n')
     31a:	1a 30       	cpi	r17, 0x0A	; 10
     31c:	39 f4       	brne	.+14     	; 0x32c <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     31e:	80 34       	cpi	r24, 0x40	; 64
     320:	58 f0       	brcs	.+22     	; 0x338 <lcd_putc+0x26>
     322:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     324:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     328:	1f 91       	pop	r17
     32a:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     32c:	81 2f       	mov	r24, r17
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_write>
    }

}/* lcd_putc */
     334:	1f 91       	pop	r17
     336:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     338:	80 ec       	ldi	r24, 0xC0	; 192
     33a:	f4 cf       	rjmp	.-24     	; 0x324 <lcd_putc+0x12>

0000033c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	39 f0       	breq	.+14     	; 0x356 <lcd_puts+0x1a>
     348:	ef 01       	movw	r28, r30
        lcd_putc(c);
     34a:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	21 96       	adiw	r28, 0x01	; 1
     352:	88 23       	and	r24, r24
     354:	d1 f7       	brne	.-12     	; 0x34a <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     362:	84 91       	lpm	r24, Z+
     364:	88 23       	and	r24, r24
     366:	49 f0       	breq	.+18     	; 0x37a <lcd_puts_p+0x1e>
     368:	ef 01       	movw	r28, r30
     36a:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     36c:	0e 94 89 01 	call	0x312	; 0x312 <lcd_putc>
     370:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     372:	21 96       	adiw	r28, 0x01	; 1
     374:	84 91       	lpm	r24, Z+
     376:	88 23       	and	r24, r24
     378:	c9 f7       	brne	.-14     	; 0x36c <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     380:	1f 93       	push	r17
     382:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     384:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     386:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     388:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     38a:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     38c:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     38e:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     390:	8e 9a       	sbi	0x11, 6	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	9d e7       	ldi	r25, 0x7D	; 125
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     39a:	94 9a       	sbi	0x12, 4	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     39c:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     39e:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_init+0x22>
    lcd_e_low();
     3a2:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	97 e2       	ldi	r25, 0x27	; 39
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3ac:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <lcd_init+0x30>
    lcd_e_low();
     3b0:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3b2:	80 e8       	ldi	r24, 0x80	; 128
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	fc 01       	movw	r30, r24
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3bc:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_init+0x40>
    lcd_e_low();
     3c0:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3c2:	fc 01       	movw	r30, r24
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     3c8:	93 98       	cbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3ca:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcd_init+0x4e>
    lcd_e_low();
     3ce:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     3e0:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     3e4:	86 e0       	ldi	r24, 0x06	; 6
     3e6:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     3ea:	81 2f       	mov	r24, r17
     3ec:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>

}/* lcd_init */
     3f0:	1f 91       	pop	r17
     3f2:	08 95       	ret

000003f4 <lcd_clear_line>:
    lcd_puts(string);
}

/* Clear line specified by line_nr */
void lcd_clear_line(unsigned char line_nr)
{
     3f4:	1f 93       	push	r17
     3f6:	68 2f       	mov	r22, r24
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_gotoxy>
     3fe:	10 e0       	ldi	r17, 0x00	; 0
  
  for (;i < LCD_DISP_LENGTH; i++) {
    lcd_puts(" ");
     400:	87 e8       	ldi	r24, 0x87	; 135
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
{
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
  
  for (;i < LCD_DISP_LENGTH; i++) {
     408:	1f 5f       	subi	r17, 0xFF	; 255
     40a:	10 31       	cpi	r17, 0x10	; 16
     40c:	c9 f7       	brne	.-14     	; 0x400 <lcd_clear_line+0xc>
    lcd_puts(" ");
  }
}
     40e:	1f 91       	pop	r17
     410:	08 95       	ret

00000412 <lcd_puts_line>:
#include "../include/display.h"
#include <stdlib.h>

/* Print string parameter to line specified by line_nr */
void lcd_puts_line(unsigned char line_nr,const char *string)
{
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	f8 2e       	mov	r15, r24
     41a:	8b 01       	movw	r16, r22
    lcd_clear_line(line_nr);
     41c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <lcd_clear_line>
    lcd_gotoxy(0,line_nr);
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	6f 2d       	mov	r22, r15
     424:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_gotoxy>
    lcd_puts(string);
     428:	c8 01       	movw	r24, r16
     42a:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_puts>
}
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	08 95       	ret

00000436 <debug>:
    lcd_puts(" ");
  }
}

void debug(unsigned char line_nr,unsigned long num)
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	1f 93       	push	r17
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2b 97       	sbiw	r28, 0x0b	; 11
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	18 2f       	mov	r17, r24
  char string[11];
  
  ltoa(num,string,10);
     452:	cb 01       	movw	r24, r22
     454:	ba 01       	movw	r22, r20
     456:	7e 01       	movw	r14, r28
     458:	08 94       	sec
     45a:	e1 1c       	adc	r14, r1
     45c:	f1 1c       	adc	r15, r1
     45e:	a7 01       	movw	r20, r14
     460:	2a e0       	ldi	r18, 0x0A	; 10
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ltoa>
  
  lcd_puts_line(line_nr,string);
     468:	81 2f       	mov	r24, r17
     46a:	b7 01       	movw	r22, r14
     46c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
}
     470:	2b 96       	adiw	r28, 0x0b	; 11
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	1f 91       	pop	r17
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	08 95       	ret

00000488 <init_ports>:
#define sja_disable_irq GICR &= ~(1 << SJA_INT_BIT) /* AVR interrupt from SJA disabled */
#define sja_enable_irq  GICR |= (1 << SJA_INT_BIT)  /* AVR interrupt from SJA enabled */

void init_ports()
{
  sja_bus_out;
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	84 bb       	out	0x14, r24	; 20
  sja_ctrl_out;
     48c:	8a b3       	in	r24, 0x1a	; 26
     48e:	80 6f       	ori	r24, 0xF0	; 240
     490:	8a bb       	out	0x1a, r24	; 26
  sja_int_init;
     492:	8a 98       	cbi	0x11, 2	; 17
     494:	92 9a       	sbi	0x12, 2	; 18
     496:	85 b7       	in	r24, 0x35	; 53
     498:	85 bf       	out	0x35, r24	; 53
  sja_enable_irq;
     49a:	8b b7       	in	r24, 0x3b	; 59
     49c:	80 64       	ori	r24, 0x40	; 64
     49e:	8b bf       	out	0x3b, r24	; 59
}
     4a0:	08 95       	ret

000004a2 <can_read_reg>:

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     4a2:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     4a4:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     4a6:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     4a8:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     4aa:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	94 bb       	out	0x14, r25	; 20
     4b0:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	28 2f       	mov	r18, r24
     4b6:	2a 95       	dec	r18
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <can_read_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     4ba:	df 98       	cbi	0x1b, 7	; 27
     4bc:	28 2f       	mov	r18, r24
     4be:	2a 95       	dec	r18
     4c0:	f1 f7       	brne	.-4      	; 0x4be <can_read_reg+0x1c>
static unsigned char sja_read_register(unsigned char address)
{
  unsigned char data;
  
  sja_write_address(address);
  sja_cs_low;
     4c2:	de 98       	cbi	0x1b, 6	; 27
  sja_rd_low;
     4c4:	dd 98       	cbi	0x1b, 5	; 27
  sja_bus_in;
     4c6:	95 bb       	out	0x15, r25	; 21
     4c8:	14 ba       	out	0x14, r1	; 20
     4ca:	8a 95       	dec	r24
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <can_read_reg+0x28>
  _delay_us(1);
  data = SJA_BUS_DATA;
     4ce:	83 b3       	in	r24, 0x13	; 19
  sja_rd_high;
     4d0:	dd 9a       	sbi	0x1b, 5	; 27
  sja_cs_high;
     4d2:	de 9a       	sbi	0x1b, 6	; 27
}

unsigned char can_read_reg(unsigned char address)
{ 
  return sja_read_register(address);
}
     4d4:	08 95       	ret

000004d6 <can_write_reg>:
  sja_enable_irq;
}

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     4d6:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     4d8:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     4da:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     4dc:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     4de:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     4e0:	2f ef       	ldi	r18, 0xFF	; 255
     4e2:	24 bb       	out	0x14, r18	; 20
     4e4:	65 bb       	out	0x15, r22	; 21
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	39 2f       	mov	r19, r25
     4ea:	3a 95       	dec	r19
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <can_write_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     4ee:	df 98       	cbi	0x1b, 7	; 27
     4f0:	39 2f       	mov	r19, r25
     4f2:	3a 95       	dec	r19
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <can_write_reg+0x1c>
}

static void sja_write_register(unsigned char data,unsigned char address)
{
  sja_write_address(address);
  sja_cs_low;
     4f6:	de 98       	cbi	0x1b, 6	; 27
  sja_wr_low;
     4f8:	dc 98       	cbi	0x1b, 4	; 27
  sja_bus_write(data);
     4fa:	24 bb       	out	0x14, r18	; 20
     4fc:	85 bb       	out	0x15, r24	; 21
     4fe:	89 2f       	mov	r24, r25
     500:	8a 95       	dec	r24
     502:	f1 f7       	brne	.-4      	; 0x500 <can_write_reg+0x2a>
  _delay_us(1);
  sja_wr_high;
     504:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     506:	de 9a       	sbi	0x1b, 6	; 27
     508:	9a 95       	dec	r25
     50a:	f1 f7       	brne	.-4      	; 0x508 <can_write_reg+0x32>
}

void can_write_reg(unsigned char data,unsigned char address)
{
  sja_write_register(data,address);
}
     50c:	08 95       	ret

0000050e <can_enable_irq>:

void can_enable_irq()
{
  sja_enable_irq;
     50e:	8b b7       	in	r24, 0x3b	; 59
     510:	80 64       	ori	r24, 0x40	; 64
     512:	8b bf       	out	0x3b, r24	; 59
}
     514:	08 95       	ret

00000516 <can_disable_irq>:

void can_disable_irq()
{
  sja_disable_irq;
     516:	8b b7       	in	r24, 0x3b	; 59
     518:	8f 7b       	andi	r24, 0xBF	; 191
     51a:	8b bf       	out	0x3b, r24	; 59
}
     51c:	08 95       	ret

0000051e <sja1000p_send_msg>:
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_send_msg()
{
  can_write_reg(sjaCMR_TR, SJACMR);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

  return 0;
}
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret

0000052a <sja1000p_read>:
 * @chip: pointer to chip state structure
 * @obj: pinter to CAN message queue information
 *
 * File: src/sja1000p.c
 */
void sja1000p_read(struct canmsg_t *rx_msg) {
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	3c 01       	movw	r6, r24

  unsigned char i, flags, len;
  unsigned long pom;

  flags = can_read_reg(SJAFRM);
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     54e:	98 2e       	mov	r9, r24

  pom = (can_read_reg(SJAID0)<<10);
     550:	81 e1       	ldi	r24, 0x11	; 17
     552:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     556:	b8 2e       	mov	r11, r24
     558:	bb 0c       	add	r11, r11
     55a:	bb 0c       	add	r11, r11
     55c:	aa 24       	eor	r10, r10
     55e:	cc 24       	eor	r12, r12
     560:	b7 fc       	sbrc	r11, 7
     562:	c0 94       	com	r12
     564:	dc 2c       	mov	r13, r12
  pom = pom<<11;
  
  rx_msg->id =
     566:	82 e1       	ldi	r24, 0x12	; 18
     568:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     56c:	88 2e       	mov	r8, r24
     56e:	83 e1       	ldi	r24, 0x13	; 19
     570:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     574:	e8 2e       	mov	r14, r24
     576:	84 e1       	ldi	r24, 0x14	; 20
     578:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     57c:	38 2d       	mov	r19, r8
     57e:	32 95       	swap	r19
     580:	33 0f       	add	r19, r19
     582:	30 7e       	andi	r19, 0xE0	; 224
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	44 27       	eor	r20, r20
     588:	37 fd       	sbrc	r19, 7
     58a:	40 95       	com	r20
     58c:	54 2f       	mov	r21, r20
     58e:	ff 24       	eor	r15, r15
     590:	ee 0c       	add	r14, r14
     592:	ff 1c       	adc	r15, r15
     594:	e2 94       	swap	r14
     596:	f2 94       	swap	r15
     598:	70 ef       	ldi	r23, 0xF0	; 240
     59a:	f7 22       	and	r15, r23
     59c:	fe 24       	eor	r15, r14
     59e:	e7 22       	and	r14, r23
     5a0:	fe 24       	eor	r15, r14
     5a2:	00 27       	eor	r16, r16
     5a4:	f7 fc       	sbrc	r15, 7
     5a6:	00 95       	com	r16
     5a8:	10 2f       	mov	r17, r16
     5aa:	2e 0d       	add	r18, r14
     5ac:	3f 1d       	adc	r19, r15
     5ae:	40 1f       	adc	r20, r16
     5b0:	51 1f       	adc	r21, r17
     5b2:	86 95       	lsr	r24
     5b4:	86 95       	lsr	r24
     5b6:	86 95       	lsr	r24
     5b8:	28 0f       	add	r18, r24
     5ba:	31 1d       	adc	r19, r1
     5bc:	41 1d       	adc	r20, r1
     5be:	51 1d       	adc	r21, r1
     5c0:	6b e0       	ldi	r22, 0x0B	; 11
     5c2:	aa 0c       	add	r10, r10
     5c4:	bb 1c       	adc	r11, r11
     5c6:	cc 1c       	adc	r12, r12
     5c8:	dd 1c       	adc	r13, r13
     5ca:	6a 95       	dec	r22
     5cc:	d1 f7       	brne	.-12     	; 0x5c2 <sja1000p_read+0x98>
     5ce:	2a 0d       	add	r18, r10
     5d0:	3b 1d       	adc	r19, r11
     5d2:	4c 1d       	adc	r20, r12
     5d4:	5d 1d       	adc	r21, r13
     5d6:	f3 01       	movw	r30, r6
     5d8:	21 83       	std	Z+1, r18	; 0x01
     5da:	32 83       	std	Z+2, r19	; 0x02
     5dc:	43 83       	std	Z+3, r20	; 0x03
     5de:	54 83       	std	Z+4, r21	; 0x04
    pom +
    (can_read_reg(SJAID1)<<13) +
    (can_read_reg(SJAID2)<<5) +
    (can_read_reg(SJAID3)>>3);
  
  rx_msg->flags =
     5e0:	29 2d       	mov	r18, r9
     5e2:	22 1f       	adc	r18, r18
     5e4:	22 27       	eor	r18, r18
     5e6:	22 1f       	adc	r18, r18
     5e8:	22 0f       	add	r18, r18
     5ea:	22 0f       	add	r18, r18
     5ec:	89 2d       	mov	r24, r9
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	00 24       	eor	r0, r0
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	00 1c       	adc	r0, r0
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	00 1c       	adc	r0, r0
     5fe:	89 2f       	mov	r24, r25
     600:	90 2d       	mov	r25, r0
     602:	81 70       	andi	r24, 0x01	; 1
     604:	28 2b       	or	r18, r24
     606:	20 83       	st	Z, r18
    ((flags & sjaFRM_RTR) ? MSG_RTR : 0) |
    ((flags & sjaFRM_FF) ? MSG_EXT : 0);
  
  len = flags & sjaFRM_DLC_M;
     608:	ff e0       	ldi	r31, 0x0F	; 15
     60a:	9f 22       	and	r9, r31
  
  rx_msg->length = len;
     60c:	f3 01       	movw	r30, r6
     60e:	95 82       	std	Z+5, r9	; 0x05
     610:	09 2d       	mov	r16, r9
     612:	09 30       	cpi	r16, 0x09	; 9
     614:	10 f1       	brcs	.+68     	; 0x65a <sja1000p_read+0x130>
     616:	08 e0       	ldi	r16, 0x08	; 8
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     618:	e3 01       	movw	r28, r6
     61a:	10 e0       	ldi	r17, 0x00	; 0
    rx_msg->data[i] = can_read_reg(SJADATE+i);
     61c:	81 2f       	mov	r24, r17
     61e:	8b 5e       	subi	r24, 0xEB	; 235
     620:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     624:	8e 83       	std	Y+6, r24	; 0x06
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     626:	1f 5f       	subi	r17, 0xFF	; 255
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	10 17       	cp	r17, r16
     62c:	b8 f3       	brcs	.-18     	; 0x61c <sja1000p_read+0xf2>
    rx_msg->data[i] = can_read_reg(SJADATE+i);
  }
  
  rx_msg->status = NEW;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	f3 01       	movw	r30, r6
     632:	86 87       	std	Z+14, r24	; 0x0e

  can_write_reg(sjaCMR_RRB, SJACMR);
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	08 95       	ret
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     65a:	99 20       	and	r9, r9
     65c:	e9 f6       	brne	.-70     	; 0x618 <sja1000p_read+0xee>
     65e:	e7 cf       	rjmp	.-50     	; 0x62e <sja1000p_read+0x104>

00000660 <sja1000p_irq_handler>:
 * CAN controller chip and distribution of message through attached
 * message queues.
 * File: src/sja1000p.c
 */
char sja1000p_irq_handler(struct canmsg_t *rx_msg)
{
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
  unsigned char irq_register, status;

  irq_register = can_read_reg(SJAIR);
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     670:	18 2f       	mov	r17, r24

#ifdef DEBUG
    CANMSG("Interrupt");
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	69 e8       	ldi	r22, 0x89	; 137
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
    debug(1,irq_register);
     67c:	41 2f       	mov	r20, r17
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 1b 02 	call	0x436	; 0x436 <debug>
     68a:	20 e1       	ldi	r18, 0x10	; 16
     68c:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     68e:	48 ec       	ldi	r20, 0xC8	; 200
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	ca 01       	movw	r24, r20
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <sja1000p_irq_handler+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69c:	d1 f7       	brne	.-12     	; 0x692 <sja1000p_irq_handler+0x32>
    _delay_ms(1000);
#endif  

  if ((irq_register & (sjaIR_BEI|sjaIR_EPI|sjaIR_DOI|sjaIR_EI|sjaIR_TI|sjaIR_RI)) == 0) {
     69e:	81 2f       	mov	r24, r17
     6a0:	8f 7a       	andi	r24, 0xAF	; 175
     6a2:	a1 f4       	brne	.+40     	; 0x6cc <sja1000p_irq_handler+0x6c>
#ifdef DEBUG
    CANMSG("None int. flag");
     6a4:	63 e9       	ldi	r22, 0x93	; 147
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     6ac:	20 e1       	ldi	r18, 0x10	; 16
     6ae:	37 e2       	ldi	r19, 0x27	; 39
     6b0:	48 ec       	ldi	r20, 0xC8	; 200
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	ca 01       	movw	r24, r20
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <sja1000p_irq_handler+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6be:	d1 f7       	brne	.-12     	; 0x6b4 <sja1000p_irq_handler+0x54>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
      can_write_reg(0, SJAMOD);
    }
  }

  return 1;
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret
    _delay_ms(1000);
#endif
    return 0;
  }

  status = can_read_reg(SJASR);
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     6d2:	08 2f       	mov	r16, r24

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
     6d4:	80 fd       	sbrc	r24, 0
     6d6:	0a c0       	rjmp	.+20     	; 0x6ec <sja1000p_irq_handler+0x8c>
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     6d8:	1c 7a       	andi	r17, 0xAC	; 172
     6da:	11 f0       	breq	.+4      	; 0x6e0 <sja1000p_irq_handler+0x80>
    // Some error happened
    
    if(status & sjaSR_BS) {
     6dc:	07 fd       	sbrc	r16, 7
     6de:	1b c0       	rjmp	.+54     	; 0x716 <sja1000p_irq_handler+0xb6>
      CANMSG("bus-off");
      _delay_ms(1000);
      CANMSG("resetting chip");
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     6e0:	81 e0       	ldi	r24, 0x01	; 1
    }
  }

  return 1;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
#ifdef DEBUG
    CANMSG("IRQ: RI or RBS");
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	62 ea       	ldi	r22, 0xA2	; 162
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     6f6:	20 e1       	ldi	r18, 0x10	; 16
     6f8:	37 e2       	ldi	r19, 0x27	; 39
     6fa:	48 ec       	ldi	r20, 0xC8	; 200
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	ca 01       	movw	r24, r20
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <sja1000p_irq_handler+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     704:	21 50       	subi	r18, 0x01	; 1
     706:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     708:	d1 f7       	brne	.-12     	; 0x6fe <sja1000p_irq_handler+0x9e>
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 95 02 	call	0x52a	; 0x52a <sja1000p_read>
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     710:	1c 7a       	andi	r17, 0xAC	; 172
     712:	21 f7       	brne	.-56     	; 0x6dc <sja1000p_irq_handler+0x7c>
     714:	e5 cf       	rjmp	.-54     	; 0x6e0 <sja1000p_irq_handler+0x80>
    // Some error happened
    
    if(status & sjaSR_BS) {
#ifdef DEBUG
      CANMSG("bus-off");
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	61 eb       	ldi	r22, 0xB1	; 177
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     720:	20 e1       	ldi	r18, 0x10	; 16
     722:	37 e2       	ldi	r19, 0x27	; 39
     724:	48 ec       	ldi	r20, 0xC8	; 200
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	ca 01       	movw	r24, r20
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <sja1000p_irq_handler+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	d1 f7       	brne	.-12     	; 0x728 <sja1000p_irq_handler+0xc8>
      _delay_ms(1000);
      CANMSG("resetting chip");
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	69 eb       	ldi	r22, 0xB9	; 185
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     73e:	20 e1       	ldi	r18, 0x10	; 16
     740:	37 e2       	ldi	r19, 0x27	; 39
     742:	48 ec       	ldi	r20, 0xC8	; 200
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	ca 01       	movw	r24, r20
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <sja1000p_irq_handler+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     750:	d1 f7       	brne	.-12     	; 0x746 <sja1000p_irq_handler+0xe6>
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	b2 cf       	rjmp	.-156    	; 0x6c2 <sja1000p_irq_handler+0x62>

0000075e <sja1000p_disable_configuration>:
/**
 * sja1000p_disable_configuration - disable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_disable_configuration()
{
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     76a:	80 ff       	sbrs	r24, 0
     76c:	15 c0       	rjmp	.+42     	; 0x798 <sja1000p_disable_configuration+0x3a>
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	c8 ec       	ldi	r28, 0xC8	; 200
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <sja1000p_disable_configuration+0x1c>
     776:	13 33       	cpi	r17, 0x33	; 51
     778:	b1 f0       	breq	.+44     	; 0x7a6 <sja1000p_disable_configuration+0x48>
// could be as long as 11*128 bit times after buss-off
    can_write_reg(0, SJAMOD);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
     782:	ce 01       	movw	r24, r28
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <sja1000p_disable_configuration+0x26>
    _delay_us(100);
    i++;
     788:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     790:	80 fd       	sbrc	r24, 0
     792:	f1 cf       	rjmp	.-30     	; 0x776 <sja1000p_disable_configuration+0x18>
    can_write_reg(0, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     794:	1a 30       	cpi	r17, 0x0A	; 10
     796:	38 f4       	brcc	.+14     	; 0x7a6 <sja1000p_disable_configuration+0x48>
    _delay_ms(1000);
#endif
    return -1;
  }

  can_enable_irq();
     798:	0e 94 87 02 	call	0x50e	; 0x50e <can_enable_irq>
     79c:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	08 95       	ret
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("Err. exit reset");
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	68 ec       	ldi	r22, 0xC8	; 200
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     7b0:	20 e1       	ldi	r18, 0x10	; 16
     7b2:	37 e2       	ldi	r19, 0x27	; 39
     7b4:	48 ec       	ldi	r20, 0xC8	; 200
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	ca 01       	movw	r24, r20
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <sja1000p_disable_configuration+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7be:	21 50       	subi	r18, 0x01	; 1
     7c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <sja1000p_disable_configuration+0x5a>
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	eb cf       	rjmp	.-42     	; 0x79e <sja1000p_disable_configuration+0x40>

000007c8 <sja1000p_enable_configuration>:
/**
 * sja1000p_enable_configuration - enable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_enable_configuration()
{
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  can_disable_irq();
     7ce:	0e 94 8b 02 	call	0x516	; 0x516 <can_disable_irq>

  flags = can_read_reg(SJAMOD);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     7d8:	80 fd       	sbrc	r24, 0
     7da:	27 c0       	rjmp	.+78     	; 0x82a <sja1000p_enable_configuration+0x62>
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	c8 ec       	ldi	r28, 0xC8	; 200
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
    can_write_reg(sjaMOD_RM, SJAMOD);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <sja1000p_enable_configuration+0x24>
    _delay_us(100);
    i++;
     7f0:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>

  can_disable_irq();

  flags = can_read_reg(SJAMOD);

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     7f8:	80 fd       	sbrc	r24, 0
     7fa:	15 c0       	rjmp	.+42     	; 0x826 <sja1000p_enable_configuration+0x5e>
     7fc:	1b 30       	cpi	r17, 0x0B	; 11
     7fe:	89 f7       	brne	.-30     	; 0x7e2 <sja1000p_enable_configuration+0x1a>
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("Reset mode error");
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	68 ed       	ldi	r22, 0xD8	; 216
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     80a:	20 e1       	ldi	r18, 0x10	; 16
     80c:	37 e2       	ldi	r19, 0x27	; 39
     80e:	48 ec       	ldi	r20, 0xC8	; 200
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	ca 01       	movw	r24, r20
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <sja1000p_enable_configuration+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81c:	d1 f7       	brne	.-12     	; 0x812 <sja1000p_enable_configuration+0x4a>
    _delay_ms(1000);
#endif
    can_enable_irq();
     81e:	0e 94 87 02 	call	0x50e	; 0x50e <can_enable_irq>
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	12 c0       	rjmp	.+36     	; 0x84a <sja1000p_enable_configuration+0x82>
    can_write_reg(sjaMOD_RM, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     826:	1a 30       	cpi	r17, 0x0A	; 10
     828:	58 f7       	brcc	.-42     	; 0x800 <sja1000p_enable_configuration+0x38>
#endif
    can_enable_irq();
    return -1;
  }
#ifdef DEBUG
  CANMSG("Reset mode OK");
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	69 ee       	ldi	r22, 0xE9	; 233
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     834:	20 e1       	ldi	r18, 0x10	; 16
     836:	37 e2       	ldi	r19, 0x27	; 39
     838:	48 ec       	ldi	r20, 0xC8	; 200
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	ca 01       	movw	r24, r20
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <sja1000p_enable_configuration+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     842:	21 50       	subi	r18, 0x01	; 1
     844:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     846:	d1 f7       	brne	.-12     	; 0x83c <sja1000p_enable_configuration+0x74>
     848:	80 e0       	ldi	r24, 0x00	; 0
  _delay_ms(1000);
#endif
  return 0;
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	08 95       	ret

00000852 <sja1000p_pre_write_config>:
 * into chip buffer in this function.
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_pre_write_config(struct canmsg_t *msg)
{
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     864:	0a e1       	ldi	r16, 0x1A	; 26
     866:	04 c0       	rjmp	.+8      	; 0x870 <sja1000p_pre_write_config+0x1e>
  unsigned long id;
  unsigned char status;
  unsigned char len;

  /* Wait until Transmit Buffer Status is released */
  while ( !((status = can_read_reg(SJASR)) & sjaSR_TBS) && 
     868:	1f 5f       	subi	r17, 0xFF	; 255
     86a:	80 2f       	mov	r24, r16
     86c:	8a 95       	dec	r24
     86e:	f1 f7       	brne	.-4      	; 0x86c <sja1000p_pre_write_config+0x1a>
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     876:	82 fd       	sbrc	r24, 2
     878:	02 c0       	rjmp	.+4      	; 0x87e <sja1000p_pre_write_config+0x2c>
     87a:	1a 30       	cpi	r17, 0x0A	; 10
     87c:	a9 f7       	brne	.-22     	; 0x868 <sja1000p_pre_write_config+0x16>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
    _delay_us(10);
  }
  
  if(status & sjaSR_BS) {
     87e:	87 fd       	sbrc	r24, 7
     880:	94 c0       	rjmp	.+296    	; 0x9aa <sja1000p_pre_write_config+0x158>
    can_write_reg(0, SJARXERR);
    can_write_reg(0, SJATXERR1);
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     888:	82 ff       	sbrs	r24, 2
     88a:	58 c0       	rjmp	.+176    	; 0x93c <sja1000p_pre_write_config+0xea>
      _delay_ms(1000);
#endif
      return -1;
    }
  }
  len = msg->length;
     88c:	dd 80       	ldd	r13, Y+5	; 0x05
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	8d 15       	cp	r24, r13
     892:	10 f4       	brcc	.+4      	; 0x898 <sja1000p_pre_write_config+0x46>
     894:	98 e0       	ldi	r25, 0x08	; 8
     896:	d9 2e       	mov	r13, r25
  if(len > CAN_MSG_LENGTH) len = CAN_MSG_LENGTH;
  
  /* len &= sjaFRM_DLC_M; ensured by above condition already */
  can_write_reg(sjaFRM_FF |len, SJAFRM);
     898:	8d 2d       	mov	r24, r13
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	60 e1       	ldi	r22, 0x10	; 16
     89e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  
  id = msg->id<<3;
     8a2:	e9 80       	ldd	r14, Y+1	; 0x01
     8a4:	fa 80       	ldd	r15, Y+2	; 0x02
     8a6:	0b 81       	ldd	r16, Y+3	; 0x03
     8a8:	1c 81       	ldd	r17, Y+4	; 0x04
     8aa:	ee 0c       	add	r14, r14
     8ac:	ff 1c       	adc	r15, r15
     8ae:	00 1f       	adc	r16, r16
     8b0:	11 1f       	adc	r17, r17
     8b2:	ee 0c       	add	r14, r14
     8b4:	ff 1c       	adc	r15, r15
     8b6:	00 1f       	adc	r16, r16
     8b8:	11 1f       	adc	r17, r17
     8ba:	ee 0c       	add	r14, r14
     8bc:	ff 1c       	adc	r15, r15
     8be:	00 1f       	adc	r16, r16
     8c0:	11 1f       	adc	r17, r17
  can_write_reg(id & 0xff, SJAID3);
     8c2:	8e 2d       	mov	r24, r14
     8c4:	64 e1       	ldi	r22, 0x14	; 20
     8c6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  id >>= 8;
     8ca:	bb 27       	eor	r27, r27
     8cc:	a1 2f       	mov	r26, r17
     8ce:	90 2f       	mov	r25, r16
     8d0:	8f 2d       	mov	r24, r15
  can_write_reg(id & 0xff, SJAID2);
     8d2:	63 e1       	ldi	r22, 0x13	; 19
     8d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  id >>= 8;
     8d8:	c8 01       	movw	r24, r16
     8da:	aa 27       	eor	r26, r26
     8dc:	bb 27       	eor	r27, r27
  can_write_reg(id & 0xff, SJAID1);
     8de:	62 e1       	ldi	r22, 0x12	; 18
     8e0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  id >>= 8;
  can_write_reg(id, SJAID0);
     8e4:	e1 2e       	mov	r14, r17
     8e6:	ff 24       	eor	r15, r15
     8e8:	00 27       	eor	r16, r16
     8ea:	11 27       	eor	r17, r17
     8ec:	8e 2d       	mov	r24, r14
     8ee:	61 e1       	ldi	r22, 0x11	; 17
     8f0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  
  for(i=0; i < len; i++) {
     8f4:	dd 20       	and	r13, r13
     8f6:	51 f0       	breq	.+20     	; 0x90c <sja1000p_pre_write_config+0xba>
     8f8:	10 e0       	ldi	r17, 0x00	; 0
    can_write_reg(msg->data[i], SJADATE+i);
     8fa:	1b 5e       	subi	r17, 0xEB	; 235
     8fc:	8e 81       	ldd	r24, Y+6	; 0x06
     8fe:	61 2f       	mov	r22, r17
     900:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  id >>= 8;
  can_write_reg(id & 0xff, SJAID1);
  id >>= 8;
  can_write_reg(id, SJAID0);
  
  for(i=0; i < len; i++) {
     904:	14 51       	subi	r17, 0x14	; 20
     906:	21 96       	adiw	r28, 0x01	; 1
     908:	1d 15       	cp	r17, r13
     90a:	b8 f3       	brcs	.-18     	; 0x8fa <sja1000p_pre_write_config+0xa8>
    can_write_reg(msg->data[i], SJADATE+i);
  }
#ifdef DEBUG
    CANMSG("Tx");
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	62 e2       	ldi	r22, 0x22	; 34
     910:	71 e0       	ldi	r23, 0x01	; 1
     912:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     916:	20 e1       	ldi	r18, 0x10	; 16
     918:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     91a:	48 ec       	ldi	r20, 0xC8	; 200
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	ca 01       	movw	r24, r20
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <sja1000p_pre_write_config+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     924:	21 50       	subi	r18, 0x01	; 1
     926:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     928:	d1 f7       	brne	.-12     	; 0x91e <sja1000p_pre_write_config+0xcc>
     92a:	80 e0       	ldi	r24, 0x00	; 0
    _delay_ms(1000);
#endif
  return 0;
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	08 95       	ret
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
#ifdef DEBUG
    CANMSG("TX timed out");
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	66 e0       	ldi	r22, 0x06	; 6
     940:	71 e0       	ldi	r23, 0x01	; 1
     942:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     946:	20 e1       	ldi	r18, 0x10	; 16
     948:	37 e2       	ldi	r19, 0x27	; 39
     94a:	48 ec       	ldi	r20, 0xC8	; 200
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	ca 01       	movw	r24, r20
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <sja1000p_pre_write_config+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     954:	21 50       	subi	r18, 0x01	; 1
     956:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     958:	d1 f7       	brne	.-12     	; 0x94e <sja1000p_pre_write_config+0xfc>
#endif
// here we should check if there is no write/select waiting for this
// transmit. If so, set error ret and wake up.
// CHECKME: if we do not disable sjaIER_TIE (TX IRQ) here we get interrupt
// immediately
    can_write_reg(sjaCMR_AT, SJACMR);
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
     962:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     964:	0a e1       	ldi	r16, 0x1A	; 26
     966:	04 c0       	rjmp	.+8      	; 0x970 <sja1000p_pre_write_config+0x11e>
    i = 0;
    while ( !(can_read_reg(SJASR) & sjaSR_TBS) &&
     968:	1f 5f       	subi	r17, 0xFF	; 255
     96a:	80 2f       	mov	r24, r16
     96c:	8a 95       	dec	r24
     96e:	f1 f7       	brne	.-4      	; 0x96c <sja1000p_pre_write_config+0x11a>
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     976:	82 fd       	sbrc	r24, 2
     978:	02 c0       	rjmp	.+4      	; 0x97e <sja1000p_pre_write_config+0x12c>
     97a:	1a 30       	cpi	r17, 0x0A	; 10
     97c:	a9 f7       	brne	.-22     	; 0x968 <sja1000p_pre_write_config+0x116>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
      _delay_us(10);
    }
    if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
     984:	82 fd       	sbrc	r24, 2
     986:	82 cf       	rjmp	.-252    	; 0x88c <sja1000p_pre_write_config+0x3a>
#ifdef DEBUG
      CANMSG("Tx err. Reset!");
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	63 e1       	ldi	r22, 0x13	; 19
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     992:	20 e1       	ldi	r18, 0x10	; 16
     994:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     996:	48 ec       	ldi	r20, 0xC8	; 200
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	ca 01       	movw	r24, r20
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <sja1000p_pre_write_config+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a4:	d1 f7       	brne	.-12     	; 0x99a <sja1000p_pre_write_config+0x148>
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	c1 cf       	rjmp	.-126    	; 0x92c <sja1000p_pre_write_config+0xda>
  }
  
  if(status & sjaSR_BS) {
    /* Try to recover from error condition */
#ifdef DEBUG
    CANMSG("Bus recovering");
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	67 ef       	ldi	r22, 0xF7	; 247
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     9b4:	20 e1       	ldi	r18, 0x10	; 16
     9b6:	37 e2       	ldi	r19, 0x27	; 39
     9b8:	48 ec       	ldi	r20, 0xC8	; 200
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	ca 01       	movw	r24, r20
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <sja1000p_pre_write_config+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c6:	d1 f7       	brne	.-12     	; 0x9bc <sja1000p_pre_write_config+0x16a>
    _delay_ms(1000);
#endif
    sja1000p_enable_configuration();
     9c8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sja1000p_enable_configuration>
    can_write_reg(0, SJARXERR);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	6e e0       	ldi	r22, 0x0E	; 14
     9d0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
    can_write_reg(0, SJATXERR1);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	6f e0       	ldi	r22, 0x0F	; 15
     9d8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
    can_read_reg(SJAECC);
     9dc:	8c e0       	ldi	r24, 0x0C	; 12
     9de:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
    sja1000p_disable_configuration();
     9e2:	0e 94 af 03 	call	0x75e	; 0x75e <sja1000p_disable_configuration>
     9e6:	4d cf       	rjmp	.-358    	; 0x882 <sja1000p_pre_write_config+0x30>

000009e8 <sja1000p_baud_rate>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_baud_rate(unsigned long rate, unsigned long clock, unsigned char sjw,unsigned char sampl_pt, unsigned char flags)
{
     9e8:	2f 92       	push	r2
     9ea:	3f 92       	push	r3
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	67 97       	sbiw	r28, 0x17	; 23
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	69 8b       	std	Y+17, r22	; 0x11
     a1e:	7a 8b       	std	Y+18, r23	; 0x12
     a20:	8b 8b       	std	Y+19, r24	; 0x13
     a22:	9c 8b       	std	Y+20, r25	; 0x14
     a24:	49 01       	movw	r8, r18
     a26:	5a 01       	movw	r10, r20
     a28:	0d 8b       	std	Y+21, r16	; 0x15
     a2a:	ee 8a       	std	Y+22, r14	; 0x16
     a2c:	cf 8a       	std	Y+23, r12	; 0x17
  unsigned long best_error = 1000000000, error;
  unsigned long best_tseg=0, best_brp=0, best_rate=0, brp=0;
  unsigned long tseg=0, tseg1=0, tseg2=0;
  
  if (sja1000p_enable_configuration())
     a2e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sja1000p_enable_configuration>
     a32:	88 23       	and	r24, r24
     a34:	09 f0       	breq	.+2      	; 0xa38 <sja1000p_baud_rate+0x50>
     a36:	4f c1       	rjmp	.+670    	; 0xcd6 <sja1000p_baud_rate+0x2ee>
    return -1;

  clock /=2;
     a38:	a5 01       	movw	r20, r10
     a3a:	94 01       	movw	r18, r8
     a3c:	56 95       	lsr	r21
     a3e:	47 95       	ror	r20
     a40:	37 95       	ror	r19
     a42:	27 95       	ror	r18
     a44:	29 87       	std	Y+9, r18	; 0x09
     a46:	3a 87       	std	Y+10, r19	; 0x0a
     a48:	4b 87       	std	Y+11, r20	; 0x0b
     a4a:	5c 87       	std	Y+12, r21	; 0x0c
     a4c:	54 e0       	ldi	r21, 0x04	; 4
     a4e:	e5 2e       	mov	r14, r21
     a50:	f1 2c       	mov	r15, r1
     a52:	01 2d       	mov	r16, r1
     a54:	11 2d       	mov	r17, r1
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	9a ec       	ldi	r25, 0xCA	; 202
     a5a:	aa e9       	ldi	r26, 0x9A	; 154
     a5c:	bb e3       	ldi	r27, 0x3B	; 59
     a5e:	8d 87       	std	Y+13, r24	; 0x0d
     a60:	9e 87       	std	Y+14, r25	; 0x0e
     a62:	af 87       	std	Y+15, r26	; 0x0f
     a64:	b8 8b       	std	Y+16, r27	; 0x10
     a66:	1d 82       	std	Y+5, r1	; 0x05
     a68:	1e 82       	std	Y+6, r1	; 0x06
     a6a:	1f 82       	std	Y+7, r1	; 0x07
     a6c:	18 86       	std	Y+8, r1	; 0x08
     a6e:	19 82       	std	Y+1, r1	; 0x01
     a70:	1a 82       	std	Y+2, r1	; 0x02
     a72:	1b 82       	std	Y+3, r1	; 0x03
     a74:	1c 82       	std	Y+4, r1	; 0x04
     a76:	38 c0       	rjmp	.+112    	; 0xae8 <sja1000p_baud_rate+0x100>
  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
    brp = clock/((1+tseg/2)*rate)+tseg%2;
    if (brp == 0 || brp > 64)
      continue;
    error = rate - clock/(brp*(1+tseg/2));
     a78:	ca 01       	movw	r24, r20
     a7a:	b9 01       	movw	r22, r18
     a7c:	a4 01       	movw	r20, r8
     a7e:	93 01       	movw	r18, r6
     a80:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsi3>
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	69 85       	ldd	r22, Y+9	; 0x09
     a8a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a90:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodsi4>
     a94:	89 89       	ldd	r24, Y+17	; 0x11
     a96:	9a 89       	ldd	r25, Y+18	; 0x12
     a98:	ab 89       	ldd	r26, Y+19	; 0x13
     a9a:	bc 89       	ldd	r27, Y+20	; 0x14
     a9c:	82 1b       	sub	r24, r18
     a9e:	93 0b       	sbc	r25, r19
     aa0:	a4 0b       	sbc	r26, r20
     aa2:	b5 0b       	sbc	r27, r21
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     aa4:	2d 85       	ldd	r18, Y+13	; 0x0d
     aa6:	3e 85       	ldd	r19, Y+14	; 0x0e
     aa8:	4f 85       	ldd	r20, Y+15	; 0x0f
     aaa:	58 89       	ldd	r21, Y+16	; 0x10
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	4a 07       	cpc	r20, r26
     ab2:	5b 07       	cpc	r21, r27
     ab4:	08 f4       	brcc	.+2      	; 0xab8 <sja1000p_baud_rate+0xd0>
     ab6:	4d c0       	rjmp	.+154    	; 0xb52 <sja1000p_baud_rate+0x16a>
     ab8:	8d 87       	std	Y+13, r24	; 0x0d
     aba:	9e 87       	std	Y+14, r25	; 0x0e
     abc:	af 87       	std	Y+15, r26	; 0x0f
     abe:	b8 8b       	std	Y+16, r27	; 0x10
    return -1;

  clock /=2;

  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
     ac0:	08 94       	sec
     ac2:	e1 1c       	adc	r14, r1
     ac4:	f1 1c       	adc	r15, r1
     ac6:	01 1d       	adc	r16, r1
     ac8:	11 1d       	adc	r17, r1
     aca:	32 e3       	ldi	r19, 0x32	; 50
     acc:	e3 16       	cp	r14, r19
     ace:	f1 04       	cpc	r15, r1
     ad0:	01 05       	cpc	r16, r1
     ad2:	11 05       	cpc	r17, r1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <sja1000p_baud_rate+0xf0>
     ad6:	46 c0       	rjmp	.+140    	; 0xb64 <sja1000p_baud_rate+0x17c>
     ad8:	ad 82       	std	Y+5, r10	; 0x05
     ada:	be 82       	std	Y+6, r11	; 0x06
     adc:	cf 82       	std	Y+7, r12	; 0x07
     ade:	d8 86       	std	Y+8, r13	; 0x08
     ae0:	29 82       	std	Y+1, r2	; 0x01
     ae2:	3a 82       	std	Y+2, r3	; 0x02
     ae4:	4b 82       	std	Y+3, r4	; 0x03
     ae6:	5c 82       	std	Y+4, r5	; 0x04
    brp = clock/((1+tseg/2)*rate)+tseg%2;
     ae8:	57 01       	movw	r10, r14
     aea:	68 01       	movw	r12, r16
     aec:	d6 94       	lsr	r13
     aee:	c7 94       	ror	r12
     af0:	b7 94       	ror	r11
     af2:	a7 94       	ror	r10
     af4:	35 01       	movw	r6, r10
     af6:	46 01       	movw	r8, r12
     af8:	08 94       	sec
     afa:	61 1c       	adc	r6, r1
     afc:	71 1c       	adc	r7, r1
     afe:	81 1c       	adc	r8, r1
     b00:	91 1c       	adc	r9, r1
     b02:	c4 01       	movw	r24, r8
     b04:	b3 01       	movw	r22, r6
     b06:	29 89       	ldd	r18, Y+17	; 0x11
     b08:	3a 89       	ldd	r19, Y+18	; 0x12
     b0a:	4b 89       	ldd	r20, Y+19	; 0x13
     b0c:	5c 89       	ldd	r21, Y+20	; 0x14
     b0e:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsi3>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	69 85       	ldd	r22, Y+9	; 0x09
     b18:	7a 85       	ldd	r23, Y+10	; 0x0a
     b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodsi4>
     b22:	d8 01       	movw	r26, r16
     b24:	c7 01       	movw	r24, r14
     b26:	81 70       	andi	r24, 0x01	; 1
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	a0 70       	andi	r26, 0x00	; 0
     b2c:	b0 70       	andi	r27, 0x00	; 0
     b2e:	28 0f       	add	r18, r24
     b30:	39 1f       	adc	r19, r25
     b32:	4a 1f       	adc	r20, r26
     b34:	5b 1f       	adc	r21, r27
    if (brp == 0 || brp > 64)
     b36:	19 01       	movw	r2, r18
     b38:	2a 01       	movw	r4, r20
     b3a:	08 94       	sec
     b3c:	21 08       	sbc	r2, r1
     b3e:	31 08       	sbc	r3, r1
     b40:	41 08       	sbc	r4, r1
     b42:	51 08       	sbc	r5, r1
     b44:	90 e4       	ldi	r25, 0x40	; 64
     b46:	29 16       	cp	r2, r25
     b48:	31 04       	cpc	r3, r1
     b4a:	41 04       	cpc	r4, r1
     b4c:	51 04       	cpc	r5, r1
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <sja1000p_baud_rate+0x16a>
     b50:	93 cf       	rjmp	.-218    	; 0xa78 <sja1000p_baud_rate+0x90>
    error = rate - clock/(brp*(1+tseg/2));
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     b52:	ad 80       	ldd	r10, Y+5	; 0x05
     b54:	be 80       	ldd	r11, Y+6	; 0x06
     b56:	cf 80       	ldd	r12, Y+7	; 0x07
     b58:	d8 84       	ldd	r13, Y+8	; 0x08
     b5a:	29 80       	ldd	r2, Y+1	; 0x01
     b5c:	3a 80       	ldd	r3, Y+2	; 0x02
     b5e:	4b 80       	ldd	r4, Y+3	; 0x03
     b60:	5c 80       	ldd	r5, Y+4	; 0x04
     b62:	ae cf       	rjmp	.-164    	; 0xac0 <sja1000p_baud_rate+0xd8>
      best_tseg = tseg/2;
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
     b64:	8d 85       	ldd	r24, Y+13	; 0x0d
     b66:	9e 85       	ldd	r25, Y+14	; 0x0e
     b68:	af 85       	ldd	r26, Y+15	; 0x0f
     b6a:	b8 89       	ldd	r27, Y+16	; 0x10
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	a1 05       	cpc	r26, r1
     b70:	b1 05       	cpc	r27, r1
     b72:	81 f0       	breq	.+32     	; 0xb94 <sja1000p_baud_rate+0x1ac>
     b74:	69 89       	ldd	r22, Y+17	; 0x11
     b76:	7a 89       	ldd	r23, Y+18	; 0x12
     b78:	8b 89       	ldd	r24, Y+19	; 0x13
     b7a:	9c 89       	ldd	r25, Y+20	; 0x14
     b7c:	2d 85       	ldd	r18, Y+13	; 0x0d
     b7e:	3e 85       	ldd	r19, Y+14	; 0x0e
     b80:	4f 85       	ldd	r20, Y+15	; 0x0f
     b82:	58 89       	ldd	r21, Y+16	; 0x10
     b84:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodsi4>
     b88:	2a 30       	cpi	r18, 0x0A	; 10
     b8a:	31 05       	cpc	r19, r1
     b8c:	41 05       	cpc	r20, r1
     b8e:	51 05       	cpc	r21, r1
     b90:	08 f4       	brcc	.+2      	; 0xb94 <sja1000p_baud_rate+0x1ac>
     b92:	92 c0       	rjmp	.+292    	; 0xcb8 <sja1000p_baud_rate+0x2d0>
    CANMSG("Baud rate error");
    _delay_ms(1000);
#endif
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     b94:	c6 01       	movw	r24, r12
     b96:	b5 01       	movw	r22, r10
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	8f 4f       	sbci	r24, 0xFF	; 255
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	ae 89       	ldd	r26, Y+22	; 0x16
     ba2:	2a 2f       	mov	r18, r26
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsi3>
     bae:	24 e6       	ldi	r18, 0x64	; 100
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodsi4>
     bba:	35 01       	movw	r6, r10
     bbc:	46 01       	movw	r8, r12
     bbe:	62 1a       	sub	r6, r18
     bc0:	73 0a       	sbc	r7, r19
     bc2:	84 0a       	sbc	r8, r20
     bc4:	95 0a       	sbc	r9, r21
     bc6:	b8 e0       	ldi	r27, 0x08	; 8
     bc8:	6b 16       	cp	r6, r27
     bca:	71 04       	cpc	r7, r1
     bcc:	81 04       	cpc	r8, r1
     bce:	91 04       	cpc	r9, r1
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <sja1000p_baud_rate+0x1ec>
     bd2:	6c c0       	rjmp	.+216    	; 0xcac <sja1000p_baud_rate+0x2c4>
    tseg2 = 0;
  
  if (tseg2 > sjaMAX_TSEG2)
    tseg2 = sjaMAX_TSEG2;
  
  tseg1 = best_tseg-tseg2-2;
     bd4:	2e ef       	ldi	r18, 0xFE	; 254
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f ef       	ldi	r20, 0xFF	; 255
     bda:	5f ef       	ldi	r21, 0xFF	; 255
     bdc:	a2 0e       	add	r10, r18
     bde:	b3 1e       	adc	r11, r19
     be0:	c4 1e       	adc	r12, r20
     be2:	d5 1e       	adc	r13, r21
     be4:	d6 01       	movw	r26, r12
     be6:	c5 01       	movw	r24, r10
     be8:	86 19       	sub	r24, r6
     bea:	97 09       	sbc	r25, r7
     bec:	a8 09       	sbc	r26, r8
     bee:	b9 09       	sbc	r27, r9
     bf0:	22 e0       	ldi	r18, 0x02	; 2
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	a2 0e       	add	r10, r18
     bfa:	b3 1e       	adc	r11, r19
     bfc:	c4 1e       	adc	r12, r20
     bfe:	d5 1e       	adc	r13, r21
  
  if (tseg1>sjaMAX_TSEG1) {
     c00:	80 31       	cpi	r24, 0x10	; 16
     c02:	91 05       	cpc	r25, r1
     c04:	a1 05       	cpc	r26, r1
     c06:	b1 05       	cpc	r27, r1
     c08:	08 f0       	brcs	.+2      	; 0xc0c <sja1000p_baud_rate+0x224>
     c0a:	42 c0       	rjmp	.+132    	; 0xc90 <sja1000p_baud_rate+0x2a8>
     c0c:	18 2f       	mov	r17, r24
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
     c0e:	3d 89       	ldd	r19, Y+21	; 0x15
     c10:	32 95       	swap	r19
     c12:	33 0f       	add	r19, r19
     c14:	33 0f       	add	r19, r19
     c16:	30 7c       	andi	r19, 0xC0	; 192
     c18:	83 2f       	mov	r24, r19
     c1a:	82 29       	or	r24, r2
     c1c:	66 e0       	ldi	r22, 0x06	; 6
     c1e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     c22:	4f 89       	ldd	r20, Y+23	; 0x17
     c24:	41 fd       	sbrc	r20, 1
     c26:	59 c0       	rjmp	.+178    	; 0xcda <sja1000p_baud_rate+0x2f2>
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	86 2d       	mov	r24, r6
     c2c:	82 95       	swap	r24
     c2e:	80 7f       	andi	r24, 0xF0	; 240
     c30:	81 2b       	or	r24, r17
     c32:	89 2b       	or	r24, r25
     c34:	67 e0       	ldi	r22, 0x07	; 7
     c36:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
          | tseg1, SJABTR1);

  sja1000p_disable_configuration();
     c3a:	0e 94 af 03 	call	0x75e	; 0x75e <sja1000p_disable_configuration>

#ifdef DEBUG 
  CANMSG("Baud rate OK");
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	65 e3       	ldi	r22, 0x35	; 53
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     c48:	20 e1       	ldi	r18, 0x10	; 16
     c4a:	37 e2       	ldi	r19, 0x27	; 39
     c4c:	48 ec       	ldi	r20, 0xC8	; 200
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	ca 01       	movw	r24, r20
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <sja1000p_baud_rate+0x26a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	21 50       	subi	r18, 0x01	; 1
     c58:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5a:	d1 f7       	brne	.-12     	; 0xc50 <sja1000p_baud_rate+0x268>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
  _delay_ms(1000);
#endif  
  return 0;
}
     c5e:	67 96       	adiw	r28, 0x17	; 23
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	9f 90       	pop	r9
     c80:	8f 90       	pop	r8
     c82:	7f 90       	pop	r7
     c84:	6f 90       	pop	r6
     c86:	5f 90       	pop	r5
     c88:	4f 90       	pop	r4
     c8a:	3f 90       	pop	r3
     c8c:	2f 90       	pop	r2
     c8e:	08 95       	ret
  
  tseg1 = best_tseg-tseg2-2;
  
  if (tseg1>sjaMAX_TSEG1) {
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
     c90:	2f ee       	ldi	r18, 0xEF	; 239
     c92:	62 2e       	mov	r6, r18
     c94:	2f ef       	ldi	r18, 0xFF	; 255
     c96:	72 2e       	mov	r7, r18
     c98:	2f ef       	ldi	r18, 0xFF	; 255
     c9a:	82 2e       	mov	r8, r18
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	92 2e       	mov	r9, r18
     ca0:	6a 0c       	add	r6, r10
     ca2:	7b 1c       	adc	r7, r11
     ca4:	8c 1c       	adc	r8, r12
     ca6:	9d 1c       	adc	r9, r13
     ca8:	1f e0       	ldi	r17, 0x0F	; 15
     caa:	b1 cf       	rjmp	.-158    	; 0xc0e <sja1000p_baud_rate+0x226>
    CANMSG("Baud rate error");
    _delay_ms(1000);
#endif
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     cac:	37 e0       	ldi	r19, 0x07	; 7
     cae:	63 2e       	mov	r6, r19
     cb0:	71 2c       	mov	r7, r1
     cb2:	81 2c       	mov	r8, r1
     cb4:	91 2c       	mov	r9, r1
     cb6:	8e cf       	rjmp	.-228    	; 0xbd4 <sja1000p_baud_rate+0x1ec>
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
#ifdef DEBUG
    CANMSG("Baud rate error");
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	65 e2       	ldi	r22, 0x25	; 37
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     cc2:	20 e1       	ldi	r18, 0x10	; 16
     cc4:	37 e2       	ldi	r19, 0x27	; 39
     cc6:	48 ec       	ldi	r20, 0xC8	; 200
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	ca 01       	movw	r24, r20
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <sja1000p_baud_rate+0x2e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	21 50       	subi	r18, 0x01	; 1
     cd2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	d1 f7       	brne	.-12     	; 0xcca <sja1000p_baud_rate+0x2e2>
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	c2 cf       	rjmp	.-124    	; 0xc5e <sja1000p_baud_rate+0x276>
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     cda:	90 e8       	ldi	r25, 0x80	; 128
     cdc:	a6 cf       	rjmp	.-180    	; 0xc2a <sja1000p_baud_rate+0x242>

00000cde <sja1000p_extended_mask>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	5b 01       	movw	r10, r22
     cf2:	6c 01       	movw	r12, r24
     cf4:	79 01       	movw	r14, r18
     cf6:	8a 01       	movw	r16, r20
   char i;

  if (sja1000p_enable_configuration())
     cf8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sja1000p_enable_configuration>
     cfc:	88 23       	and	r24, r24
     cfe:	31 f5       	brne	.+76     	; 0xd4c <sja1000p_extended_mask+0x6e>
     d00:	f3 e1       	ldi	r31, 0x13	; 19
     d02:	9f 2e       	mov	r9, r31
    return -1;

// LSB to +3, MSB to +0 
  for(i=SJA_PeliCAN_AC_LEN; --i>=0;) {
    can_write_reg(code&0xff,SJAACR0+i);
     d04:	8a 2d       	mov	r24, r10
     d06:	69 2d       	mov	r22, r9
     d08:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
    can_write_reg(mask&0xff,SJAAMR0+i);
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	98 0e       	add	r9, r24
     d10:	8e 2d       	mov	r24, r14
     d12:	69 2d       	mov	r22, r9
     d14:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
    code >>= 8;
     d18:	ab 2c       	mov	r10, r11
     d1a:	bc 2c       	mov	r11, r12
     d1c:	cd 2c       	mov	r12, r13
     d1e:	dd 24       	eor	r13, r13
    mask >>= 8;
     d20:	ef 2c       	mov	r14, r15
     d22:	f0 2e       	mov	r15, r16
     d24:	01 2f       	mov	r16, r17
     d26:	11 27       	eor	r17, r17
     d28:	8b ef       	ldi	r24, 0xFB	; 251
     d2a:	98 0e       	add	r9, r24

  if (sja1000p_enable_configuration())
    return -1;

// LSB to +3, MSB to +0 
  for(i=SJA_PeliCAN_AC_LEN; --i>=0;) {
     d2c:	8f e0       	ldi	r24, 0x0F	; 15
     d2e:	98 16       	cp	r9, r24
     d30:	49 f7       	brne	.-46     	; 0xd04 <sja1000p_extended_mask+0x26>
    can_write_reg(mask&0xff,SJAAMR0+i);
    code >>= 8;
    mask >>= 8;
  }

  sja1000p_disable_configuration();  
     d32:	0e 94 af 03 	call	0x75e	; 0x75e <sja1000p_disable_configuration>
     d36:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	08 95       	ret
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
   char i;

  if (sja1000p_enable_configuration())
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	f4 cf       	rjmp	.-24     	; 0xd38 <sja1000p_extended_mask+0x5a>

00000d50 <sja1000p_chip_config>:
 * computes and sets baudrate with use of function sja1000p_baud_rate().
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_chip_config(struct canchip_t *chip)
{
     d50:	cf 92       	push	r12
     d52:	ef 92       	push	r14
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
  unsigned char i;
  unsigned char n, r;
  
  if (sja1000p_enable_configuration())
     d5e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <sja1000p_enable_configuration>
     d62:	88 23       	and	r24, r24
     d64:	41 f0       	breq	.+16     	; 0xd76 <sja1000p_chip_config+0x26>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
#ifdef DEBUG  
  CANMSG("Config OK");
  _delay_ms(1000);
#endif
  return 0;
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ef 90       	pop	r14
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret
  
  if (sja1000p_enable_configuration())
    return -1;

  /* Set mode, clock out, comparator */
  can_write_reg(sjaCDR_PELICAN|chip->sja_cdr_reg,SJACDR); 
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	6f e1       	ldi	r22, 0x1F	; 31
     d7c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

  /* Ensure, that interrupts are disabled even on the chip level now */
  can_write_reg(sjaDISABLE_INTERRUPTS, SJAIER);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	64 e0       	ldi	r22, 0x04	; 4
     d84:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
     d88:	8a 85       	ldd	r24, Y+10	; 0x0a
     d8a:	68 e0       	ldi	r22, 0x08	; 8
     d8c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>
     d90:	0a e5       	ldi	r16, 0x5A	; 90
     d92:	10 e1       	ldi	r17, 0x10	; 16
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
     d94:	80 2f       	mov	r24, r16
     d96:	61 2f       	mov	r22, r17
     d98:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     d9c:	01 5f       	subi	r16, 0xF1	; 241
     d9e:	1f 5f       	subi	r17, 0xFF	; 255
     da0:	02 3d       	cpi	r16, 0xD2	; 210
     da2:	c1 f7       	brne	.-16     	; 0xd94 <sja1000p_chip_config+0x44>
     da4:	1a e5       	ldi	r17, 0x5A	; 90
     da6:	00 e1       	ldi	r16, 0x10	; 16
     da8:	01 c0       	rjmp	.+2      	; 0xdac <sja1000p_chip_config+0x5c>
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     daa:	11 5f       	subi	r17, 0xF1	; 241
    r = n^can_read_reg(SJAACR0+i);
     dac:	80 2f       	mov	r24, r16
     dae:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_read_reg>
    if (r) {
     db2:	18 17       	cp	r17, r24
     db4:	09 f0       	breq	.+2      	; 0xdb8 <sja1000p_chip_config+0x68>
     db6:	48 c0       	rjmp	.+144    	; 0xe48 <sja1000p_chip_config+0xf8>
     db8:	0f 5f       	subi	r16, 0xFF	; 255
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     dba:	13 3c       	cpi	r17, 0xC3	; 195
     dbc:	b1 f7       	brne	.-20     	; 0xdaa <sja1000p_chip_config+0x5a>
#endif
      return -1;
    }
  }

  if (sja1000p_extended_mask(0x0000000, 0xfffffff))
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f ef       	ldi	r20, 0xFF	; 255
     dcc:	5f e0       	ldi	r21, 0x0F	; 15
     dce:	0e 94 6f 06 	call	0xcde	; 0xcde <sja1000p_extended_mask>
     dd2:	88 23       	and	r24, r24
     dd4:	41 f6       	brne	.-112    	; 0xd66 <sja1000p_chip_config+0x16>
    return -1;
  
  if (!chip->baudrate)
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	61 15       	cp	r22, r1
     de0:	71 05       	cpc	r23, r1
     de2:	81 05       	cpc	r24, r1
     de4:	91 05       	cpc	r25, r1
     de6:	61 f4       	brne	.+24     	; 0xe00 <sja1000p_chip_config+0xb0>
    chip->baudrate=1000000;
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	92 e4       	ldi	r25, 0x42	; 66
     dec:	af e0       	ldi	r26, 0x0F	; 15
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	af 83       	std	Y+7, r26	; 0x07
     df6:	b8 87       	std	Y+8, r27	; 0x08
     df8:	60 e4       	ldi	r22, 0x40	; 64
     dfa:	72 e4       	ldi	r23, 0x42	; 66
     dfc:	8f e0       	ldi	r24, 0x0F	; 15
     dfe:	90 e0       	ldi	r25, 0x00	; 0
  
  if (sja1000p_baud_rate(chip->baudrate,chip->clock,0,75,0))
     e00:	29 81       	ldd	r18, Y+1	; 0x01
     e02:	3a 81       	ldd	r19, Y+2	; 0x02
     e04:	4b 81       	ldd	r20, Y+3	; 0x03
     e06:	5c 81       	ldd	r21, Y+4	; 0x04
     e08:	00 e0       	ldi	r16, 0x00	; 0
     e0a:	ab e4       	ldi	r26, 0x4B	; 75
     e0c:	ea 2e       	mov	r14, r26
     e0e:	cc 24       	eor	r12, r12
     e10:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <sja1000p_baud_rate>
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <sja1000p_chip_config+0xca>
     e18:	a6 cf       	rjmp	.-180    	; 0xd66 <sja1000p_chip_config+0x16>
    return -1;

  /* Enable hardware interrupts */
  can_write_reg(sjaENABLE_INTERRUPTS, SJAIER); 
     e1a:	8f ea       	ldi	r24, 0xAF	; 175
     e1c:	64 e0       	ldi	r22, 0x04	; 4
     e1e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <can_write_reg>

  sja1000p_disable_configuration();
     e22:	0e 94 af 03 	call	0x75e	; 0x75e <sja1000p_disable_configuration>
  
#ifdef DEBUG  
  CANMSG("Config OK");
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	6f e4       	ldi	r22, 0x4F	; 79
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     e30:	20 e1       	ldi	r18, 0x10	; 16
     e32:	37 e2       	ldi	r19, 0x27	; 39
     e34:	48 ec       	ldi	r20, 0xC8	; 200
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	ca 01       	movw	r24, r20
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <sja1000p_chip_config+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	d1 f7       	brne	.-12     	; 0xe38 <sja1000p_chip_config+0xe8>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 cf       	rjmp	.-224    	; 0xd68 <sja1000p_chip_config+0x18>

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    r = n^can_read_reg(SJAACR0+i);
    if (r) {
#ifdef DEBUG
      CANMSG("Config error");
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	62 e4       	ldi	r22, 0x42	; 66
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     e52:	20 e1       	ldi	r18, 0x10	; 16
     e54:	37 e2       	ldi	r19, 0x27	; 39
     e56:	48 ec       	ldi	r20, 0xC8	; 200
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	ca 01       	movw	r24, r20
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <sja1000p_chip_config+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	21 50       	subi	r18, 0x01	; 1
     e62:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e64:	d1 f7       	brne	.-12     	; 0xe5a <sja1000p_chip_config+0x10a>
     e66:	7f cf       	rjmp	.-258    	; 0xd66 <sja1000p_chip_config+0x16>

00000e68 <__vector_14>:
  }
}


ISR(ADC_vect)
{
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	8f 93       	push	r24
  unsigned char channel = 0;
  
  adc_data[channel] = ADCH;
     e74:	85 b1       	in	r24, 0x05	; 5
     e76:	80 93 ff 01 	sts	0x01FF, r24
  
  // Select next ADC input
  if (++channel > (LAST_ADC - FIRST_ADC))
    channel = 0;
  
  ADMUX = (FIRST_ADC | (ADC_VREF_TYPE & 0xff)) + channel;
     e7a:	81 e6       	ldi	r24, 0x61	; 97
     e7c:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e7e:	8a e1       	ldi	r24, 0x1A	; 26
     e80:	8a 95       	dec	r24
     e82:	f1 f7       	brne	.-4      	; 0xe80 <__vector_14+0x18>
  
  _delay_us(10);
  
  adc_start;
     e84:	37 9a       	sbi	0x06, 7	; 6
}
     e86:	8f 91       	pop	r24
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <fsm_sensor_init>:
    }
   }
}

void fsm_sensor_init(struct fsm *fsm, enum event event)
{
     e92:	fc 01       	movw	r30, r24
  switch (event) {
     e94:	61 30       	cpi	r22, 0x01	; 1
     e96:	71 05       	cpc	r23, r1
     e98:	a1 f0       	breq	.+40     	; 0xec2 <fsm_sensor_init+0x30>
     e9a:	62 30       	cpi	r22, 0x02	; 2
     e9c:	71 05       	cpc	r23, r1
     e9e:	09 f0       	breq	.+2      	; 0xea2 <fsm_sensor_init+0x10>
     ea0:	08 95       	ret
    fsm->sensor_ready = true;
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
#ifdef DEBUG    
    CANMSG("FSM init OK");
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	69 e5       	ldi	r22, 0x59	; 89
     ea6:	71 e0       	ldi	r23, 0x01	; 1
     ea8:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     eac:	20 e1       	ldi	r18, 0x10	; 16
     eae:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eb0:	48 ec       	ldi	r20, 0xC8	; 200
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ca 01       	movw	r24, r20
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <fsm_sensor_init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	d1 f7       	brne	.-12     	; 0xeb4 <fsm_sensor_init+0x22>
     ec0:	08 95       	ret
{
  switch (event) {
  case EVENT_ENTRY:
    break;
  case EVENT_DO:
    fsm->measurement_start = true;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	84 83       	std	Z+4, r24	; 0x04
    fsm->send_samples = false;
     ec6:	15 82       	std	Z+5, r1	; 0x05
    fsm->sensor_ready = true;
     ec8:	86 83       	std	Z+6, r24	; 0x06
    fsm->current_state = wait_for_cmd;
     eca:	8a e6       	ldi	r24, 0x6A	; 106
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
     ed2:	08 95       	ret

00000ed4 <wait_for_cmd>:
    break;
  }
}

static void wait_for_cmd(struct fsm *fsm, enum event event)
{  
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ec 01       	movw	r28, r24
  switch (event) {
     eda:	61 30       	cpi	r22, 0x01	; 1
     edc:	71 05       	cpc	r23, r1
     ede:	51 f0       	breq	.+20     	; 0xef4 <wait_for_cmd+0x20>
     ee0:	62 30       	cpi	r22, 0x02	; 2
     ee2:	71 05       	cpc	r23, r1
     ee4:	21 f4       	brne	.+8      	; 0xeee <wait_for_cmd+0x1a>
    if (fsm->measurement_start && (sen_cfg.channel_avrg[0]
      || sen_cfg.channel_avrg[1] || sen_cfg.channel_avrg[2]) )
       fsm->current_state = sensor_capture_data;
    break;
  case EVENT_EXIT:
    fsm->sensor_ready = false;
     ee6:	1e 82       	std	Y+6, r1	; 0x06
    fsm->measurement_start = sen_cfg.delivery;
     ee8:	80 91 c6 01 	lds	r24, 0x01C6
     eec:	8c 83       	std	Y+4, r24	; 0x04
    break;
  }
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret
  switch (event) {
  case EVENT_ENTRY:
    break;
  case EVENT_DO:
#ifdef DEBUG
    CANMSG("FSM wait for cmd");
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	65 e6       	ldi	r22, 0x65	; 101
     ef8:	71 e0       	ldi	r23, 0x01	; 1
     efa:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     efe:	20 e1       	ldi	r18, 0x10	; 16
     f00:	37 e2       	ldi	r19, 0x27	; 39
     f02:	48 ec       	ldi	r20, 0xC8	; 200
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	ca 01       	movw	r24, r20
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <wait_for_cmd+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0c:	21 50       	subi	r18, 0x01	; 1
     f0e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	d1 f7       	brne	.-12     	; 0xf06 <wait_for_cmd+0x32>
    _delay_ms(1000);
#endif
    /* waiting to start adc sampling */
    if (fsm->measurement_start && (sen_cfg.channel_avrg[0]
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	88 23       	and	r24, r24
     f16:	59 f3       	breq	.-42     	; 0xeee <wait_for_cmd+0x1a>
     f18:	80 91 c7 01 	lds	r24, 0x01C7
     f1c:	88 23       	and	r24, r24
     f1e:	41 f4       	brne	.+16     	; 0xf30 <wait_for_cmd+0x5c>
     f20:	80 91 c8 01 	lds	r24, 0x01C8
     f24:	88 23       	and	r24, r24
     f26:	21 f4       	brne	.+8      	; 0xf30 <wait_for_cmd+0x5c>
     f28:	80 91 c9 01 	lds	r24, 0x01C9
     f2c:	88 23       	and	r24, r24
     f2e:	f9 f2       	breq	.-66     	; 0xeee <wait_for_cmd+0x1a>
      || sen_cfg.channel_avrg[1] || sen_cfg.channel_avrg[2]) )
       fsm->current_state = sensor_capture_data;
     f30:	88 ed       	ldi	r24, 0xD8	; 216
     f32:	97 e0       	ldi	r25, 0x07	; 7
     f34:	99 83       	std	Y+1, r25	; 0x01
     f36:	88 83       	st	Y, r24
  case EVENT_EXIT:
    fsm->sensor_ready = false;
    fsm->measurement_start = sen_cfg.delivery;
    break;
  }
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <sensor_init>:
  unsigned char i = 0;
  
  char *idn = SENSOR_IDN;
  
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
     f3e:	84 e0       	ldi	r24, 0x04	; 4
     f40:	80 93 cb 01 	sts	0x01CB, r24
  idn_msg.id = SENSOR_ID;
     f44:	10 92 cc 01 	sts	0x01CC, r1
     f48:	10 92 cd 01 	sts	0x01CD, r1
     f4c:	10 92 ce 01 	sts	0x01CE, r1
     f50:	10 92 cf 01 	sts	0x01CF, r1
  idn_msg.length = strlen(idn);
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	80 93 d0 01 	sts	0x01D0, r24
     f5a:	e6 e7       	ldi	r30, 0x76	; 118
     f5c:	f1 e0       	ldi	r31, 0x01	; 1
     f5e:	a1 ed       	ldi	r26, 0xD1	; 209
     f60:	b1 e0       	ldi	r27, 0x01	; 1
  
  for (;i < strlen(idn);i++) {
    idn_msg.data[i] = idn[i];
     f62:	81 91       	ld	r24, Z+
     f64:	8d 93       	st	X+, r24
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
  idn_msg.id = SENSOR_ID;
  idn_msg.length = strlen(idn);
  
  for (;i < strlen(idn);i++) {
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	ee 37       	cpi	r30, 0x7E	; 126
     f6a:	f8 07       	cpc	r31, r24
     f6c:	d1 f7       	brne	.-12     	; 0xf62 <sensor_init+0x24>
  
  /* initialize sen_cfg structure with default values
   * channel 0 - 2 enabled, no averaging, continual delivery
   * no treshold */
  for (i = 0;i < 3; i++) {
    sen_cfg.channel_avrg[i] = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 c7 01 	sts	0x01C7, r24
     f74:	80 93 c8 01 	sts	0x01C8, r24
     f78:	80 93 c9 01 	sts	0x01C9, r24
  }
  
  sen_cfg.delivery = 1;
     f7c:	80 93 c6 01 	sts	0x01C6, r24
  sen_cfg.treshold = 0;
     f80:	10 92 ca 01 	sts	0x01CA, r1
  
  ADCSRA = 0x88;  /* ADC enabled. interrupt enabled, no prescaler */
     f84:	88 e8       	ldi	r24, 0x88	; 136
     f86:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x60;   /*  Vref = Vcc, ADC output in ADCH */
     f88:	80 e6       	ldi	r24, 0x60	; 96
     f8a:	87 b9       	out	0x07, r24	; 7
  
  adc_start;
     f8c:	37 9a       	sbi	0x06, 7	; 6
  
#ifdef DEBUG
  CANMSG("Sensor init OK");
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	6f e7       	ldi	r22, 0x7F	; 127
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	37 e2       	ldi	r19, 0x27	; 39
     f9c:	48 ec       	ldi	r20, 0xC8	; 200
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	ca 01       	movw	r24, r20
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <sensor_init+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <sensor_init+0x62>
  _delay_ms(1000);
#endif

  return 0;
}
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <sensor_capture_data>:
    break;
  }
}

static void sensor_capture_data(struct fsm *fsm, enum event event)
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
  switch (event) {
     fb6:	61 30       	cpi	r22, 0x01	; 1
     fb8:	71 05       	cpc	r23, r1
     fba:	e1 f0       	breq	.+56     	; 0xff4 <sensor_capture_data+0x44>
     fbc:	61 30       	cpi	r22, 0x01	; 1
     fbe:	71 05       	cpc	r23, r1
     fc0:	38 f0       	brcs	.+14     	; 0xfd0 <sensor_capture_data+0x20>
     fc2:	62 30       	cpi	r22, 0x02	; 2
     fc4:	71 05       	cpc	r23, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <sensor_capture_data+0x1a>
    
    if (fsm->send_samples)
      fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
    fsm->measurement_start = false;
     fc8:	1c 82       	std	Y+4, r1	; 0x04
    break;
  }
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret
static void sensor_capture_data(struct fsm *fsm, enum event event)
{
  switch (event) {
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM capture data");
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	6e e8       	ldi	r22, 0x8E	; 142
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	37 e2       	ldi	r19, 0x27	; 39
     fde:	48 ec       	ldi	r20, 0xC8	; 200
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	ca 01       	movw	r24, r20
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <sensor_capture_data+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	21 50       	subi	r18, 0x01	; 1
     fea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fec:	d1 f7       	brne	.-12     	; 0xfe2 <sensor_capture_data+0x32>
    break;
  case EVENT_EXIT:
    fsm->measurement_start = false;
    break;
  }
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret
static void save_samples(struct fsm *fsm)
{
   static timer adc_time = 0;
   static int counter = 0;

  if(timer0_msec >= adc_time + 1000)   // save ADC sample every ADC_PERIOD us
     ff4:	20 91 da 01 	lds	r18, 0x01DA
     ff8:	30 91 db 01 	lds	r19, 0x01DB
     ffc:	40 91 dc 01 	lds	r20, 0x01DC
    1000:	50 91 dd 01 	lds	r21, 0x01DD
    1004:	80 91 c2 01 	lds	r24, 0x01C2
    1008:	90 91 c3 01 	lds	r25, 0x01C3
    100c:	a0 91 c4 01 	lds	r26, 0x01C4
    1010:	b0 91 c5 01 	lds	r27, 0x01C5
    1014:	88 51       	subi	r24, 0x18	; 24
    1016:	9c 4f       	sbci	r25, 0xFC	; 252
    1018:	af 4f       	sbci	r26, 0xFF	; 255
    101a:	bf 4f       	sbci	r27, 0xFF	; 255
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	4a 07       	cpc	r20, r26
    1022:	5b 07       	cpc	r21, r27
    1024:	50 f4       	brcc	.+20     	; 0x103a <sensor_capture_data+0x8a>
#endif
    break;
  case EVENT_DO:
    save_samples(fsm);
    
    if (fsm->send_samples)
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	88 23       	and	r24, r24
    102a:	79 f2       	breq	.-98     	; 0xfca <sensor_capture_data+0x1a>
      fsm->current_state = wait_for_cmd;
    102c:	8a e6       	ldi	r24, 0x6A	; 106
    102e:	97 e0       	ldi	r25, 0x07	; 7
    1030:	99 83       	std	Y+1, r25	; 0x01
    1032:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    fsm->measurement_start = false;
    break;
  }
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret
   static timer adc_time = 0;
   static int counter = 0;

  if(timer0_msec >= adc_time + 1000)   // save ADC sample every ADC_PERIOD us
  {
    adc_time = timer0_msec;
    103a:	80 91 da 01 	lds	r24, 0x01DA
    103e:	90 91 db 01 	lds	r25, 0x01DB
    1042:	a0 91 dc 01 	lds	r26, 0x01DC
    1046:	b0 91 dd 01 	lds	r27, 0x01DD
    104a:	80 93 c2 01 	sts	0x01C2, r24
    104e:	90 93 c3 01 	sts	0x01C3, r25
    1052:	a0 93 c4 01 	sts	0x01C4, r26
    1056:	b0 93 c5 01 	sts	0x01C5, r27
    debug(1,counter++);
    105a:	40 91 c0 01 	lds	r20, 0x01C0
    105e:	50 91 c1 01 	lds	r21, 0x01C1
    1062:	4f 5f       	subi	r20, 0xFF	; 255
    1064:	5f 4f       	sbci	r21, 0xFF	; 255
    1066:	50 93 c1 01 	sts	0x01C1, r21
    106a:	40 93 c0 01 	sts	0x01C0, r20
    106e:	41 50       	subi	r20, 0x01	; 1
    1070:	50 40       	sbci	r21, 0x00	; 0
    1072:	66 27       	eor	r22, r22
    1074:	57 fd       	sbrc	r21, 7
    1076:	60 95       	com	r22
    1078:	76 2f       	mov	r23, r22
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 1b 02 	call	0x436	; 0x436 <debug>
//     
//     fsm->adc_data[ADC_DATA][counter] = adc_val[0];
//     fsm->adc_data[ADC_TIME][counter] = time_base;
//     counter++;
//     
    if(counter >= 10)
    1080:	80 91 c0 01 	lds	r24, 0x01C0
    1084:	90 91 c1 01 	lds	r25, 0x01C1
    1088:	0a 97       	sbiw	r24, 0x0a	; 10
    108a:	6c f2       	brlt	.-102    	; 0x1026 <sensor_capture_data+0x76>
    {
      counter = 0;
    108c:	10 92 c1 01 	sts	0x01C1, r1
    1090:	10 92 c0 01 	sts	0x01C0, r1
      fsm->send_samples = true;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	c6 cf       	rjmp	.-116    	; 0x1026 <sensor_capture_data+0x76>

0000109a <sensor_config>:

  return 0;
}

char sensor_config(struct canmsg_t *rx_msg, struct fsm *fsm)
{
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	eb 01       	movw	r28, r22
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    10a2:	fc 01       	movw	r30, r24
    10a4:	21 81       	ldd	r18, Z+1	; 0x01
    10a6:	32 81       	ldd	r19, Z+2	; 0x02
    10a8:	43 81       	ldd	r20, Z+3	; 0x03
    10aa:	54 81       	ldd	r21, Z+4	; 0x04
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	41 05       	cpc	r20, r1
    10b2:	51 05       	cpc	r21, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <sensor_config+0x1e>
    10b6:	6e c0       	rjmp	.+220    	; 0x1194 <sensor_config+0xfa>
    _delay_ms(1000);
#endif
  }
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    10b8:	da 01       	movw	r26, r20
    10ba:	c9 01       	movw	r24, r18
    10bc:	1d e0       	ldi	r17, 0x0D	; 13
    10be:	b6 95       	lsr	r27
    10c0:	a7 95       	ror	r26
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	1a 95       	dec	r17
    10c8:	d1 f7       	brne	.-12     	; 0x10be <sensor_config+0x24>
    10ca:	80 93 ca 01 	sts	0x01CA, r24
    
    for (;i < 3;i++) {
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    10ce:	da 01       	movw	r26, r20
    10d0:	c9 01       	movw	r24, r18
    10d2:	fa e0       	ldi	r31, 0x0A	; 10
    10d4:	b6 95       	lsr	r27
    10d6:	a7 95       	ror	r26
    10d8:	97 95       	ror	r25
    10da:	87 95       	ror	r24
    10dc:	fa 95       	dec	r31
    10de:	d1 f7       	brne	.-12     	; 0x10d4 <sensor_config+0x3a>
    10e0:	78 2f       	mov	r23, r24
    10e2:	77 70       	andi	r23, 0x07	; 7
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	12 2f       	mov	r17, r18
    10e8:	17 70       	andi	r17, 0x07	; 7
    10ea:	da 01       	movw	r26, r20
    10ec:	c9 01       	movw	r24, r18
    10ee:	e7 e0       	ldi	r30, 0x07	; 7
    10f0:	b6 95       	lsr	r27
    10f2:	a7 95       	ror	r26
    10f4:	97 95       	ror	r25
    10f6:	87 95       	ror	r24
    10f8:	ea 95       	dec	r30
    10fa:	d1 f7       	brne	.-12     	; 0x10f0 <sensor_config+0x56>
    10fc:	87 70       	andi	r24, 0x07	; 7
    10fe:	e6 2f       	mov	r30, r22
    1100:	f0 e0       	ldi	r31, 0x00	; 0
//static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    1102:	61 30       	cpi	r22, 0x01	; 1
    1104:	51 f0       	breq	.+20     	; 0x111a <sensor_config+0x80>
    1106:	61 30       	cpi	r22, 0x01	; 1
    1108:	68 f4       	brcc	.+26     	; 0x1124 <sensor_config+0x8a>
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    110a:	ea 53       	subi	r30, 0x3A	; 58
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	71 83       	std	Z+1, r23	; 0x01
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	e6 2f       	mov	r30, r22
    1114:	f0 e0       	ldi	r31, 0x00	; 0
//static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    1116:	61 30       	cpi	r22, 0x01	; 1
    1118:	b1 f7       	brne	.-20     	; 0x1106 <sensor_config+0x6c>
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    111a:	ea 53       	subi	r30, 0x3A	; 58
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	81 83       	std	Z+1, r24	; 0x01
  }
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
    1120:	62 e0       	ldi	r22, 0x02	; 2
    1122:	ed cf       	rjmp	.-38     	; 0x10fe <sensor_config+0x64>
//static void sensor_send_data(struct fsm *fsm, enum event event);

static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    1124:	62 30       	cpi	r22, 0x02	; 2
    1126:	39 f1       	breq	.+78     	; 0x1176 <sensor_config+0xdc>
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    1128:	ea 53       	subi	r30, 0x3A	; 58
    112a:	fe 4f       	sbci	r31, 0xFE	; 254
    112c:	11 83       	std	Z+1, r17	; 0x01
  }
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
    112e:	6f 5f       	subi	r22, 0xFF	; 255
    1130:	63 30       	cpi	r22, 0x03	; 3
    1132:	28 f3       	brcs	.-54     	; 0x10fe <sensor_config+0x64>
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    }
    
    sen_cfg.delivery = delivery(rx_msg->id);
    1134:	76 e0       	ldi	r23, 0x06	; 6
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	7a 95       	dec	r23
    1140:	d1 f7       	brne	.-12     	; 0x1136 <sensor_config+0x9c>
    1142:	82 2f       	mov	r24, r18
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	80 93 c6 01 	sts	0x01C6, r24
    
    fsm->measurement_start = true;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	8c 83       	std	Y+4, r24	; 0x04
  }
  
#ifdef DEBUG
  CANMSG("Sensor config OK");
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	6e ea       	ldi	r22, 0xAE	; 174
    1152:	71 e0       	ldi	r23, 0x01	; 1
    1154:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
    1158:	20 e1       	ldi	r18, 0x10	; 16
    115a:	37 e2       	ldi	r19, 0x27	; 39
    115c:	48 ec       	ldi	r20, 0xC8	; 200
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	ca 01       	movw	r24, r20
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <sensor_config+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	21 50       	subi	r18, 0x01	; 1
    1168:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	d1 f7       	brne	.-12     	; 0x1160 <sensor_config+0xc6>
    116c:	80 e0       	ldi	r24, 0x00	; 0
  _delay_ms(1000);
#endif
  
  return 0;
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	08 95       	ret
  else {
    /* if recived message is ADC configuration */
    sen_cfg.treshold = treshold(rx_msg->id);
    
    for (;i < 3;i++) {
      sen_cfg.channel_avrg[i] = channel_avrg(rx_msg->id,shift(i));
    1176:	ea 53       	subi	r30, 0x3A	; 58
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	da 01       	movw	r26, r20
    117c:	c9 01       	movw	r24, r18
    117e:	b6 95       	lsr	r27
    1180:	a7 95       	ror	r26
    1182:	97 95       	ror	r25
    1184:	87 95       	ror	r24
    1186:	b6 95       	lsr	r27
    1188:	a7 95       	ror	r26
    118a:	97 95       	ror	r25
    118c:	87 95       	ror	r24
    118e:	87 70       	andi	r24, 0x07	; 7
    1190:	81 83       	std	Z+1, r24	; 0x01
    1192:	d0 cf       	rjmp	.-96     	; 0x1134 <sensor_config+0x9a>
{
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    if (sja1000p_pre_write_config(&idn_msg))
    1194:	8b ec       	ldi	r24, 0xCB	; 203
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 29 04 	call	0x852	; 0x852 <sja1000p_pre_write_config>
    119c:	88 23       	and	r24, r24
    119e:	11 f0       	breq	.+4      	; 0x11a4 <sensor_config+0x10a>
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	e5 cf       	rjmp	.-54     	; 0x116e <sensor_config+0xd4>
      return -1;
    
    sja1000p_send_msg();
    11a4:	0e 94 8f 02 	call	0x51e	; 0x51e <sja1000p_send_msg>
    
#ifdef DEBUG
    CANMSG("IDN? answer OK");
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	6f e9       	ldi	r22, 0x9F	; 159
    11ac:	71 e0       	ldi	r23, 0x01	; 1
    11ae:	0e 94 09 02 	call	0x412	; 0x412 <lcd_puts_line>
    11b2:	20 e1       	ldi	r18, 0x10	; 16
    11b4:	37 e2       	ldi	r19, 0x27	; 39
    11b6:	48 ec       	ldi	r20, 0xC8	; 200
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	ca 01       	movw	r24, r20
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <sensor_config+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c0:	21 50       	subi	r18, 0x01	; 1
    11c2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c4:	d1 f7       	brne	.-12     	; 0x11ba <sensor_config+0x120>
    11c6:	c3 cf       	rjmp	.-122    	; 0x114e <sensor_config+0xb4>

000011c8 <__vector_19>:

/*
 * Osetreni preruseni od citace zpozdeni
 */
ISR(TIMER0_COMP_vect)
{
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
  /* increment msec @1kHz */
    ++timer0_msec;
    11da:	80 91 da 01 	lds	r24, 0x01DA
    11de:	90 91 db 01 	lds	r25, 0x01DB
    11e2:	a0 91 dc 01 	lds	r26, 0x01DC
    11e6:	b0 91 dd 01 	lds	r27, 0x01DD
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	a1 1d       	adc	r26, r1
    11ee:	b1 1d       	adc	r27, r1
    11f0:	80 93 da 01 	sts	0x01DA, r24
    11f4:	90 93 db 01 	sts	0x01DB, r25
    11f8:	a0 93 dc 01 	sts	0x01DC, r26
    11fc:	b0 93 dd 01 	sts	0x01DD, r27
}
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <timer0_init_1khz>:
/**
  Timer 0 - delay in miliseconds
*/
void timer0_init_1khz()
{
  TCNT0 = 0;
    1212:	12 be       	out	0x32, r1	; 50
  OCR0 = 124;
    1214:	8c e7       	ldi	r24, 0x7C	; 124
    1216:	8c bf       	out	0x3c, r24	; 60
  TIMSK |= 0x02;    /* interrupt enable when OC */
    1218:	89 b7       	in	r24, 0x39	; 57
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= 0x0B;     /* CTC mode, delicka 64x, normal port op. */
    121e:	83 b7       	in	r24, 0x33	; 51
    1220:	8b 60       	ori	r24, 0x0B	; 11
    1222:	83 bf       	out	0x33, r24	; 51
}
    1224:	08 95       	ret

00001226 <init_fsm>:
#include "../include/fsm.h"

void init_fsm(struct fsm *fsm, state_fcn initial_state)
{
    1226:	fc 01       	movw	r30, r24
    1228:	9b 01       	movw	r18, r22
	fsm->current_state = initial_state;
    122a:	71 83       	std	Z+1, r23	; 0x01
    122c:	60 83       	st	Z, r22
	fsm->current_state(fsm, EVENT_ENTRY);
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	09 95       	icall
}
    1236:	08 95       	ret

00001238 <run_fsm>:

void run_fsm(struct fsm *fsm){
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
	fsm->last_state = fsm->current_state;		// set actual state
    123e:	e8 81       	ld	r30, Y
    1240:	f9 81       	ldd	r31, Y+1	; 0x01
    1242:	fb 83       	std	Y+3, r31	; 0x03
    1244:	ea 83       	std	Y+2, r30	; 0x02
	fsm->current_state(fsm, EVENT_DO);		// change parameter
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	09 95       	icall
	
	if(fsm->last_state != fsm->current_state){ 	// if state was changed
    124c:	ea 81       	ldd	r30, Y+2	; 0x02
    124e:	fb 81       	ldd	r31, Y+3	; 0x03
    1250:	88 81       	ld	r24, Y
    1252:	99 81       	ldd	r25, Y+1	; 0x01
    1254:	e8 17       	cp	r30, r24
    1256:	f9 07       	cpc	r31, r25
    1258:	51 f0       	breq	.+20     	; 0x126e <run_fsm+0x36>
		fsm->last_state(fsm, EVENT_EXIT); 	// finish the old state
    125a:	ce 01       	movw	r24, r28
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	09 95       	icall
		fsm->current_state(fsm, EVENT_ENTRY); 	// initialize the new state
    1262:	e8 81       	ld	r30, Y
    1264:	f9 81       	ldd	r31, Y+1	; 0x01
    1266:	ce 01       	movw	r24, r28
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	09 95       	icall
	}
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <__mulsi3>:
    1274:	62 9f       	mul	r22, r18
    1276:	d0 01       	movw	r26, r0
    1278:	73 9f       	mul	r23, r19
    127a:	f0 01       	movw	r30, r0
    127c:	82 9f       	mul	r24, r18
    127e:	e0 0d       	add	r30, r0
    1280:	f1 1d       	adc	r31, r1
    1282:	64 9f       	mul	r22, r20
    1284:	e0 0d       	add	r30, r0
    1286:	f1 1d       	adc	r31, r1
    1288:	92 9f       	mul	r25, r18
    128a:	f0 0d       	add	r31, r0
    128c:	83 9f       	mul	r24, r19
    128e:	f0 0d       	add	r31, r0
    1290:	74 9f       	mul	r23, r20
    1292:	f0 0d       	add	r31, r0
    1294:	65 9f       	mul	r22, r21
    1296:	f0 0d       	add	r31, r0
    1298:	99 27       	eor	r25, r25
    129a:	72 9f       	mul	r23, r18
    129c:	b0 0d       	add	r27, r0
    129e:	e1 1d       	adc	r30, r1
    12a0:	f9 1f       	adc	r31, r25
    12a2:	63 9f       	mul	r22, r19
    12a4:	b0 0d       	add	r27, r0
    12a6:	e1 1d       	adc	r30, r1
    12a8:	f9 1f       	adc	r31, r25
    12aa:	bd 01       	movw	r22, r26
    12ac:	cf 01       	movw	r24, r30
    12ae:	11 24       	eor	r1, r1
    12b0:	08 95       	ret

000012b2 <__udivmodsi4>:
    12b2:	a1 e2       	ldi	r26, 0x21	; 33
    12b4:	1a 2e       	mov	r1, r26
    12b6:	aa 1b       	sub	r26, r26
    12b8:	bb 1b       	sub	r27, r27
    12ba:	fd 01       	movw	r30, r26
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <__udivmodsi4_ep>

000012be <__udivmodsi4_loop>:
    12be:	aa 1f       	adc	r26, r26
    12c0:	bb 1f       	adc	r27, r27
    12c2:	ee 1f       	adc	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	a2 17       	cp	r26, r18
    12c8:	b3 07       	cpc	r27, r19
    12ca:	e4 07       	cpc	r30, r20
    12cc:	f5 07       	cpc	r31, r21
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <__udivmodsi4_ep>
    12d0:	a2 1b       	sub	r26, r18
    12d2:	b3 0b       	sbc	r27, r19
    12d4:	e4 0b       	sbc	r30, r20
    12d6:	f5 0b       	sbc	r31, r21

000012d8 <__udivmodsi4_ep>:
    12d8:	66 1f       	adc	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	1a 94       	dec	r1
    12e2:	69 f7       	brne	.-38     	; 0x12be <__udivmodsi4_loop>
    12e4:	60 95       	com	r22
    12e6:	70 95       	com	r23
    12e8:	80 95       	com	r24
    12ea:	90 95       	com	r25
    12ec:	9b 01       	movw	r18, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	bd 01       	movw	r22, r26
    12f2:	cf 01       	movw	r24, r30
    12f4:	08 95       	ret

000012f6 <ltoa>:
    12f6:	fa 01       	movw	r30, r20
    12f8:	cf 93       	push	r28
    12fa:	ff 93       	push	r31
    12fc:	ef 93       	push	r30
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	44 f1       	brlt	.+80     	; 0x1352 <ltoa+0x5c>
    1302:	25 32       	cpi	r18, 0x25	; 37
    1304:	34 f5       	brge	.+76     	; 0x1352 <ltoa+0x5c>
    1306:	c2 2f       	mov	r28, r18
    1308:	e8 94       	clt
    130a:	ca 30       	cpi	r28, 0x0A	; 10
    130c:	49 f4       	brne	.+18     	; 0x1320 <ltoa+0x2a>
    130e:	97 fb       	bst	r25, 7
    1310:	3e f4       	brtc	.+14     	; 0x1320 <ltoa+0x2a>
    1312:	90 95       	com	r25
    1314:	80 95       	com	r24
    1316:	70 95       	com	r23
    1318:	61 95       	neg	r22
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8f 4f       	sbci	r24, 0xFF	; 255
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	2c 2f       	mov	r18, r28
    1322:	33 27       	eor	r19, r19
    1324:	44 27       	eor	r20, r20
    1326:	55 27       	eor	r21, r21
    1328:	ff 93       	push	r31
    132a:	ef 93       	push	r30
    132c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodsi4>
    1330:	ef 91       	pop	r30
    1332:	ff 91       	pop	r31
    1334:	60 5d       	subi	r22, 0xD0	; 208
    1336:	6a 33       	cpi	r22, 0x3A	; 58
    1338:	0c f0       	brlt	.+2      	; 0x133c <ltoa+0x46>
    133a:	69 5d       	subi	r22, 0xD9	; 217
    133c:	61 93       	st	Z+, r22
    133e:	b9 01       	movw	r22, r18
    1340:	ca 01       	movw	r24, r20
    1342:	60 50       	subi	r22, 0x00	; 0
    1344:	70 40       	sbci	r23, 0x00	; 0
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	90 40       	sbci	r25, 0x00	; 0
    134a:	51 f7       	brne	.-44     	; 0x1320 <ltoa+0x2a>
    134c:	16 f4       	brtc	.+4      	; 0x1352 <ltoa+0x5c>
    134e:	cd e2       	ldi	r28, 0x2D	; 45
    1350:	c1 93       	st	Z+, r28
    1352:	10 82       	st	Z, r1
    1354:	8f 91       	pop	r24
    1356:	9f 91       	pop	r25
    1358:	cf 91       	pop	r28
    135a:	0c 94 af 09 	jmp	0x135e	; 0x135e <strrev>

0000135e <strrev>:
    135e:	dc 01       	movw	r26, r24
    1360:	fc 01       	movw	r30, r24
    1362:	67 2f       	mov	r22, r23
    1364:	71 91       	ld	r23, Z+
    1366:	77 23       	and	r23, r23
    1368:	e1 f7       	brne	.-8      	; 0x1362 <strrev+0x4>
    136a:	32 97       	sbiw	r30, 0x02	; 2
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <strrev+0x18>
    136e:	7c 91       	ld	r23, X
    1370:	6d 93       	st	X+, r22
    1372:	70 83       	st	Z, r23
    1374:	62 91       	ld	r22, -Z
    1376:	ae 17       	cp	r26, r30
    1378:	bf 07       	cpc	r27, r31
    137a:	c8 f3       	brcs	.-14     	; 0x136e <strrev+0x10>
    137c:	08 95       	ret

0000137e <_exit>:
    137e:	f8 94       	cli

00001380 <__stop_program>:
    1380:	ff cf       	rjmp	.-2      	; 0x1380 <__stop_program>
