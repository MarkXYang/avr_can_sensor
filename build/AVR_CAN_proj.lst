
../build/AVR_CAN_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  000012f6  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  008000e6  008000e6  00001410  2**0
                  ALLOC
  3 .stab         00003fc0  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002225  00000000  00000000  000053d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 35       	cpi	r26, 0x53	; 83
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
  sja1000p_irq_handler(&rx_msg);
}

/* MAIN */
int main(void)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
  timer sensor_time = timer_msec;
      9a:	e0 90 33 01 	lds	r14, 0x0133
      9e:	f0 90 34 01 	lds	r15, 0x0134
      a2:	00 91 35 01 	lds	r16, 0x0135
      a6:	10 91 36 01 	lds	r17, 0x0136
  
  sei();  /* global interrupt enable */
      aa:	78 94       	sei
  
  timer0_init_1khz();
      ac:	0e 94 89 08 	call	0x1112	; 0x1112 <timer0_init_1khz>
  
  lcd_init(LCD_DISP_ON);
      b0:	8c e0       	ldi	r24, 0x0C	; 12
      b2:	0e 94 94 01 	call	0x328	; 0x328 <lcd_init>
  
  CANMSG("CAN senzor");
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	60 e6       	ldi	r22, 0x60	; 96
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
      c0:	88 ee       	ldi	r24, 0xE8	; 232
      c2:	93 e0       	ldi	r25, 0x03	; 3
      c4:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
  
  init_fsm(&fsm_sensor,&fsm_sensor_init);
      c8:	87 e3       	ldi	r24, 0x37	; 55
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	63 e8       	ldi	r22, 0x83	; 131
      ce:	76 e0       	ldi	r23, 0x06	; 6
      d0:	0e 94 c8 08 	call	0x1190	; 0x1190 <init_fsm>
      d4:	8a e0       	ldi	r24, 0x0A	; 10
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e8 0e       	add	r14, r24
      de:	f9 1e       	adc	r15, r25
      e0:	0a 1f       	adc	r16, r26
      e2:	1b 1f       	adc	r17, r27
  
  
  while(1) {
    
    if (timer_msec >= (sensor_time + 10)) {
      e4:	80 91 33 01 	lds	r24, 0x0133
      e8:	90 91 34 01 	lds	r25, 0x0134
      ec:	a0 91 35 01 	lds	r26, 0x0135
      f0:	b0 91 36 01 	lds	r27, 0x0136
      f4:	8e 15       	cp	r24, r14
      f6:	9f 05       	cpc	r25, r15
      f8:	a0 07       	cpc	r26, r16
      fa:	b1 07       	cpc	r27, r17
      fc:	68 f4       	brcc	.+26     	; 0x118 <main+0x86>
      
      /* run fsm every x ms*/
      run_fsm(&fsm_sensor);
    }
    
    if (rx_msg.status == NEW) {
      fe:	80 91 4b 01 	lds	r24, 0x014B
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	79 f7       	brne	.-34     	; 0xe4 <main+0x52>
      rx_msg.status = NONE;
     106:	10 92 4b 01 	sts	0x014B, r1
      sensor_config(&rx_msg,&fsm_sensor);
     10a:	8d e3       	ldi	r24, 0x3D	; 61
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	67 e3       	ldi	r22, 0x37	; 55
     110:	71 e0       	ldi	r23, 0x01	; 1
     112:	0e 94 af 07 	call	0xf5e	; 0xf5e <sensor_config>
     116:	e6 cf       	rjmp	.-52     	; 0xe4 <main+0x52>
  
  
  while(1) {
    
    if (timer_msec >= (sensor_time + 10)) {
      sensor_time = timer_msec;
     118:	e0 90 33 01 	lds	r14, 0x0133
     11c:	f0 90 34 01 	lds	r15, 0x0134
     120:	00 91 35 01 	lds	r16, 0x0135
     124:	10 91 36 01 	lds	r17, 0x0136
      debug(1,timer_msec);
     128:	40 91 33 01 	lds	r20, 0x0133
     12c:	50 91 34 01 	lds	r21, 0x0134
     130:	60 91 35 01 	lds	r22, 0x0135
     134:	70 91 36 01 	lds	r23, 0x0136
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	0e 94 ef 01 	call	0x3de	; 0x3de <debug>
      
      /* run fsm every x ms*/
      run_fsm(&fsm_sensor);
     13e:	87 e3       	ldi	r24, 0x37	; 55
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <run_fsm>
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	e8 0e       	add	r14, r24
     150:	f9 1e       	adc	r15, r25
     152:	0a 1f       	adc	r16, r26
     154:	1b 1f       	adc	r17, r27
     156:	d3 cf       	rjmp	.-90     	; 0xfe <main+0x6c>

00000158 <__vector_1>:

struct fsm fsm_sensor;

/* SJA interrupt service routine */
ISR(INT0_vect)
{
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
  sja1000p_irq_handler(&rx_msg);
     17a:	8d e3       	ldi	r24, 0x3D	; 61
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 c1 02 	call	0x582	; 0x582 <sja1000p_irq_handler>
}
     182:	ff 91       	pop	r31
     184:	ef 91       	pop	r30
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	0f 90       	pop	r0
     1a0:	1f 90       	pop	r1
     1a2:	18 95       	reti

000001a4 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     1a4:	66 23       	and	r22, r22
     1a6:	49 f1       	breq	.+82     	; 0x1fa <lcd_write+0x56>
       lcd_rs_high();
     1a8:	c0 9a       	sbi	0x18, 0	; 24
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();
     1aa:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1ac:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1ae:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1b0:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1b2:	8e 9a       	sbi	0x11, 6	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1b4:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1b6:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1b8:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1ba:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1bc:	87 fd       	sbrc	r24, 7
     1be:	1f c0       	rjmp	.+62     	; 0x1fe <lcd_write+0x5a>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1c0:	86 fd       	sbrc	r24, 6
     1c2:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1c4:	85 fd       	sbrc	r24, 5
     1c6:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1c8:	84 fd       	sbrc	r24, 4
     1ca:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1cc:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_write+0x2c>
    lcd_e_low();
     1d0:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1d2:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1d4:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1d6:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1d8:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1da:	83 fd       	sbrc	r24, 3
     1dc:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1de:	82 fd       	sbrc	r24, 2
     1e0:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1e2:	81 fd       	sbrc	r24, 1
     1e4:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1e6:	80 fd       	sbrc	r24, 0
     1e8:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1ea:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_write+0x4a>
    lcd_e_low();
     1ee:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1f0:	93 9a       	sbi	0x12, 3	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1f2:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1f4:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1f6:	96 9a       	sbi	0x12, 6	; 18
    }
}
     1f8:	08 95       	ret


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     1fa:	c0 98       	cbi	0x18, 0	; 24
     1fc:	d6 cf       	rjmp	.-84     	; 0x1aa <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1fe:	96 9a       	sbi	0x12, 6	; 18
     200:	df cf       	rjmp	.-66     	; 0x1c0 <lcd_write+0x1c>

00000202 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     202:	88 23       	and	r24, r24
     204:	09 f1       	breq	.+66     	; 0x248 <lcd_read+0x46>
        lcd_rs_high();                       /* RS=1: read data      */
     206:	c0 9a       	sbi	0x18, 0	; 24
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    lcd_rw_high();                           /* RW=1  read mode      */
     208:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     20a:	8b 98       	cbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     20c:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     20e:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     210:	8e 98       	cbi	0x11, 6	; 17
                
        /* read high nibble first */
        lcd_e_high();
     212:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
     214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_read+0x14>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     216:	83 9b       	sbis	0x10, 3	; 16
     218:	15 c0       	rjmp	.+42     	; 0x244 <lcd_read+0x42>
     21a:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     21c:	84 99       	sbic	0x10, 4	; 16
     21e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     220:	85 99       	sbic	0x10, 5	; 16
     222:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     224:	86 99       	sbic	0x10, 6	; 16
     226:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     228:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_read+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     22c:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_read+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     230:	83 99       	sbic	0x10, 3	; 16
     232:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     234:	84 99       	sbic	0x10, 4	; 16
     236:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     238:	85 99       	sbic	0x10, 5	; 16
     23a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     23c:	86 99       	sbic	0x10, 6	; 16
     23e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     240:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     242:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	ea cf       	rjmp	.-44     	; 0x21c <lcd_read+0x1a>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     248:	c0 98       	cbi	0x18, 0	; 24
     24a:	de cf       	rjmp	.-68     	; 0x208 <lcd_read+0x6>

0000024c <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 01 01 	call	0x202	; 0x202 <lcd_read>
     252:	87 fd       	sbrc	r24, 7
     254:	fb cf       	rjmp	.-10     	; 0x24c <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     256:	84 e0       	ldi	r24, 0x04	; 4
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 01 01 	call	0x202	; 0x202 <lcd_read>
    
}/* lcd_waitbusy */
     264:	08 95       	ret

00000266 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     266:	1f 93       	push	r17
     268:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     26a:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_waitbusy>
    lcd_write(cmd,0);
     26e:	81 2f       	mov	r24, r17
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_write>
}
     276:	1f 91       	pop	r17
     278:	08 95       	ret

0000027a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     27a:	1f 93       	push	r17
     27c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     27e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_waitbusy>
    lcd_write(data,1);
     282:	81 2f       	mov	r24, r17
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_write>
}
     28a:	1f 91       	pop	r17
     28c:	08 95       	ret

0000028e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     28e:	66 23       	and	r22, r22
     290:	21 f0       	breq	.+8      	; 0x29a <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     292:	80 54       	subi	r24, 0x40	; 64
     294:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
     298:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     29a:	80 58       	subi	r24, 0x80	; 128
     29c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
     2a0:	08 95       	ret

000002a2 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     2a2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_waitbusy>
}
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret

000002aa <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
}
     2b0:	08 95       	ret

000002b2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
}
     2b8:	08 95       	ret

000002ba <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     2ba:	1f 93       	push	r17
     2bc:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     2be:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_waitbusy>
    if (c=='\n')
     2c2:	1a 30       	cpi	r17, 0x0A	; 10
     2c4:	39 f4       	brne	.+14     	; 0x2d4 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2c6:	80 34       	cpi	r24, 0x40	; 64
     2c8:	58 f0       	brcs	.+22     	; 0x2e0 <lcd_putc+0x26>
     2ca:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     2cc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     2d0:	1f 91       	pop	r17
     2d2:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2d4:	81 2f       	mov	r24, r17
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_write>
    }

}/* lcd_putc */
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2e0:	80 ec       	ldi	r24, 0xC0	; 192
     2e2:	f4 cf       	rjmp	.-24     	; 0x2cc <lcd_putc+0x12>

000002e4 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
     2ea:	80 81       	ld	r24, Z
     2ec:	88 23       	and	r24, r24
     2ee:	39 f0       	breq	.+14     	; 0x2fe <lcd_puts+0x1a>
     2f0:	ef 01       	movw	r28, r30
        lcd_putc(c);
     2f2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	88 23       	and	r24, r24
     2fc:	d1 f7       	brne	.-12     	; 0x2f2 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     30a:	84 91       	lpm	r24, Z+
     30c:	88 23       	and	r24, r24
     30e:	49 f0       	breq	.+18     	; 0x322 <lcd_puts_p+0x1e>
     310:	ef 01       	movw	r28, r30
     312:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     314:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_putc>
     318:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     31a:	21 96       	adiw	r28, 0x01	; 1
     31c:	84 91       	lpm	r24, Z+
     31e:	88 23       	and	r24, r24
     320:	c9 f7       	brne	.-14     	; 0x314 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     328:	1f 93       	push	r17
     32a:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     32c:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     32e:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     330:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     332:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     334:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     336:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     338:	8e 9a       	sbi	0x11, 6	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	9d e7       	ldi	r25, 0x7D	; 125
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     342:	94 9a       	sbi	0x12, 4	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     344:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     346:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_init+0x22>
    lcd_e_low();
     34a:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	97 e2       	ldi	r25, 0x27	; 39
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     354:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     356:	00 c0       	rjmp	.+0      	; 0x358 <lcd_init+0x30>
    lcd_e_low();
     358:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     364:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_init+0x40>
    lcd_e_low();
     368:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     36a:	fc 01       	movw	r30, r24
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     370:	93 98       	cbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     372:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     374:	00 c0       	rjmp	.+0      	; 0x376 <lcd_init+0x4e>
    lcd_e_low();
     376:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     388:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     392:	81 2f       	mov	r24, r17
     394:	0e 94 33 01 	call	0x266	; 0x266 <lcd_command>

}/* lcd_init */
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <lcd_clear_line>:
    lcd_puts(string);
}

/* Clear line specified by line_nr */
void lcd_clear_line(unsigned char line_nr)
{
     39c:	1f 93       	push	r17
     39e:	68 2f       	mov	r22, r24
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_gotoxy>
     3a6:	10 e0       	ldi	r17, 0x00	; 0
  
  for (;i < LCD_DISP_LENGTH; i++) {
    lcd_puts(" ");
     3a8:	8b e6       	ldi	r24, 0x6B	; 107
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_puts>
{
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
  
  for (;i < LCD_DISP_LENGTH; i++) {
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
     3b2:	10 31       	cpi	r17, 0x10	; 16
     3b4:	c9 f7       	brne	.-14     	; 0x3a8 <lcd_clear_line+0xc>
    lcd_puts(" ");
  }
}
     3b6:	1f 91       	pop	r17
     3b8:	08 95       	ret

000003ba <lcd_puts_line>:
#include "../include/display.h"
#include <stdlib.h>

/* Print string parameter to line specified by line_nr */
void lcd_puts_line(unsigned char line_nr,const char *string)
{
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	f8 2e       	mov	r15, r24
     3c2:	8b 01       	movw	r16, r22
    lcd_clear_line(line_nr);
     3c4:	0e 94 ce 01 	call	0x39c	; 0x39c <lcd_clear_line>
    lcd_gotoxy(0,line_nr);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	6f 2d       	mov	r22, r15
     3cc:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_gotoxy>
    lcd_puts(string);
     3d0:	c8 01       	movw	r24, r16
     3d2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <lcd_puts>
}
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	08 95       	ret

000003de <debug>:
    lcd_puts(" ");
  }
}

void debug(unsigned char line_nr,unsigned long num)
{
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	1f 93       	push	r17
     3e4:	df 93       	push	r29
     3e6:	cf 93       	push	r28
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	2b 97       	sbiw	r28, 0x0b	; 11
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	18 2f       	mov	r17, r24
  char string[11];
  
  ultoa(num,string,10);
     3fa:	cb 01       	movw	r24, r22
     3fc:	ba 01       	movw	r22, r20
     3fe:	7e 01       	movw	r14, r28
     400:	08 94       	sec
     402:	e1 1c       	adc	r14, r1
     404:	f1 1c       	adc	r15, r1
     406:	a7 01       	movw	r20, r14
     408:	2a e0       	ldi	r18, 0x0A	; 10
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	0e 94 44 09 	call	0x1288	; 0x1288 <ultoa>
  
  lcd_puts_line(line_nr,string);
     410:	81 2f       	mov	r24, r17
     412:	b7 01       	movw	r22, r14
     414:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
}
     418:	2b 96       	adiw	r28, 0x0b	; 11
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	08 95       	ret

00000430 <sja_init_ports>:
#define sja_disable_irq GICR &= ~(1 << SJA_INT_BIT) /* AVR interrupt from SJA disabled */
#define sja_enable_irq  GICR |= (1 << SJA_INT_BIT)  /* AVR interrupt from SJA enabled */

void sja_init_ports()
{
  sja_bus_out;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	84 bb       	out	0x14, r24	; 20
  sja_ctrl_out;
     434:	8a b3       	in	r24, 0x1a	; 26
     436:	80 6f       	ori	r24, 0xF0	; 240
     438:	8a bb       	out	0x1a, r24	; 26
  sja_int_init;
     43a:	8a 98       	cbi	0x11, 2	; 17
     43c:	92 9a       	sbi	0x12, 2	; 18
     43e:	85 b7       	in	r24, 0x35	; 53
     440:	85 bf       	out	0x35, r24	; 53
  sja_enable_irq;
     442:	8b b7       	in	r24, 0x3b	; 59
     444:	80 64       	ori	r24, 0x40	; 64
     446:	8b bf       	out	0x3b, r24	; 59
}
     448:	08 95       	ret

0000044a <can_read_reg>:

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     44a:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     44c:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     44e:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     450:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     452:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     454:	9f ef       	ldi	r25, 0xFF	; 255
     456:	94 bb       	out	0x14, r25	; 20
     458:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	28 2f       	mov	r18, r24
     45e:	2a 95       	dec	r18
     460:	f1 f7       	brne	.-4      	; 0x45e <can_read_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     462:	df 98       	cbi	0x1b, 7	; 27
     464:	28 2f       	mov	r18, r24
     466:	2a 95       	dec	r18
     468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
static unsigned char sja_read_register(unsigned char address)
{
  unsigned char data;
  
  sja_write_address(address);
  sja_cs_low;
     46a:	de 98       	cbi	0x1b, 6	; 27
  sja_rd_low;
     46c:	dd 98       	cbi	0x1b, 5	; 27
  sja_bus_in;
     46e:	95 bb       	out	0x15, r25	; 21
     470:	14 ba       	out	0x14, r1	; 20
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <__stack+0x13>
  _delay_us(1);
  data = SJA_BUS_DATA;
     476:	83 b3       	in	r24, 0x13	; 19
  sja_rd_high;
     478:	dd 9a       	sbi	0x1b, 5	; 27
  sja_cs_high;
     47a:	de 9a       	sbi	0x1b, 6	; 27
}

unsigned char can_read_reg(unsigned char address)
{ 
  return sja_read_register(address);
}
     47c:	08 95       	ret

0000047e <can_write_reg>:
  sja_enable_irq;
}

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     47e:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     480:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     482:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     484:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     486:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	24 bb       	out	0x14, r18	; 20
     48c:	65 bb       	out	0x15, r22	; 21
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	39 2f       	mov	r19, r25
     492:	3a 95       	dec	r19
     494:	f1 f7       	brne	.-4      	; 0x492 <can_write_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     496:	df 98       	cbi	0x1b, 7	; 27
     498:	39 2f       	mov	r19, r25
     49a:	3a 95       	dec	r19
     49c:	f1 f7       	brne	.-4      	; 0x49a <can_write_reg+0x1c>
}

static void sja_write_register(unsigned char data,unsigned char address)
{
  sja_write_address(address);
  sja_cs_low;
     49e:	de 98       	cbi	0x1b, 6	; 27
  sja_wr_low;
     4a0:	dc 98       	cbi	0x1b, 4	; 27
  sja_bus_write(data);
     4a2:	24 bb       	out	0x14, r18	; 20
     4a4:	85 bb       	out	0x15, r24	; 21
     4a6:	89 2f       	mov	r24, r25
     4a8:	8a 95       	dec	r24
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <can_write_reg+0x2a>
  _delay_us(1);
  sja_wr_high;
     4ac:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     4ae:	de 9a       	sbi	0x1b, 6	; 27
     4b0:	9a 95       	dec	r25
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <can_write_reg+0x32>
}

void can_write_reg(unsigned char data,unsigned char address)
{
  sja_write_register(data,address);
}
     4b4:	08 95       	ret

000004b6 <can_enable_irq>:

void can_enable_irq()
{
  sja_enable_irq;
     4b6:	8b b7       	in	r24, 0x3b	; 59
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	8b bf       	out	0x3b, r24	; 59
}
     4bc:	08 95       	ret

000004be <can_disable_irq>:

void can_disable_irq()
{
  sja_disable_irq;
     4be:	8b b7       	in	r24, 0x3b	; 59
     4c0:	8f 7b       	andi	r24, 0xBF	; 191
     4c2:	8b bf       	out	0x3b, r24	; 59
}
     4c4:	08 95       	ret

000004c6 <sja1000p_send_msg>:
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_send_msg()
{
  can_write_reg(sjaCMR_TR, SJACMR);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

  return 0;
}
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <sja1000p_read>:
 * @chip: pointer to chip state structure
 * @obj: pinter to CAN message queue information
 *
 * File: src/sja1000p.c
 */
void sja1000p_read(struct canmsg_t *rx_msg) {
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	7c 01       	movw	r14, r24

  unsigned char i, flags, len;

  flags = can_read_reg(SJAFRM);
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     4e6:	18 2f       	mov	r17, r24
  
  rx_msg->id[0] = can_read_reg(SJAID0);
     4e8:	81 e1       	ldi	r24, 0x11	; 17
     4ea:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     4ee:	f7 01       	movw	r30, r14
     4f0:	81 83       	std	Z+1, r24	; 0x01
  rx_msg->id[1] = can_read_reg(SJAID1);
     4f2:	82 e1       	ldi	r24, 0x12	; 18
     4f4:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     4f8:	f7 01       	movw	r30, r14
     4fa:	82 83       	std	Z+2, r24	; 0x02
  rx_msg->id[2] = can_read_reg(SJAID2);
     4fc:	83 e1       	ldi	r24, 0x13	; 19
     4fe:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     502:	f7 01       	movw	r30, r14
     504:	83 83       	std	Z+3, r24	; 0x03
  rx_msg->id[3] = can_read_reg(SJAID3) >> 3;
     506:	84 e1       	ldi	r24, 0x14	; 20
     508:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     50c:	86 95       	lsr	r24
     50e:	86 95       	lsr	r24
     510:	86 95       	lsr	r24
     512:	f7 01       	movw	r30, r14
     514:	84 83       	std	Z+4, r24	; 0x04
  
  rx_msg->flags =
     516:	21 2f       	mov	r18, r17
     518:	22 1f       	adc	r18, r18
     51a:	22 27       	eor	r18, r18
     51c:	22 1f       	adc	r18, r18
     51e:	22 0f       	add	r18, r18
     520:	22 0f       	add	r18, r18
     522:	81 2f       	mov	r24, r17
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	00 24       	eor	r0, r0
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	00 1c       	adc	r0, r0
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	00 1c       	adc	r0, r0
     534:	89 2f       	mov	r24, r25
     536:	90 2d       	mov	r25, r0
     538:	81 70       	andi	r24, 0x01	; 1
     53a:	28 2b       	or	r18, r24
     53c:	20 83       	st	Z, r18
    ((flags & sjaFRM_RTR) ? MSG_RTR : 0) |
    ((flags & sjaFRM_FF) ? MSG_EXT : 0);
  
  len = flags & sjaFRM_DLC_M;
     53e:	1f 70       	andi	r17, 0x0F	; 15
  
  rx_msg->length = len;
     540:	15 83       	std	Z+5, r17	; 0x05
     542:	01 2f       	mov	r16, r17
     544:	19 30       	cpi	r17, 0x09	; 9
     546:	d0 f0       	brcs	.+52     	; 0x57c <sja1000p_read+0xaa>
     548:	08 e0       	ldi	r16, 0x08	; 8
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     54a:	e7 01       	movw	r28, r14
     54c:	10 e0       	ldi	r17, 0x00	; 0
    rx_msg->data[i] = can_read_reg(SJADATE+i);
     54e:	81 2f       	mov	r24, r17
     550:	8b 5e       	subi	r24, 0xEB	; 235
     552:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     556:	8e 83       	std	Y+6, r24	; 0x06
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     558:	1f 5f       	subi	r17, 0xFF	; 255
     55a:	21 96       	adiw	r28, 0x01	; 1
     55c:	10 17       	cp	r17, r16
     55e:	b8 f3       	brcs	.-18     	; 0x54e <sja1000p_read+0x7c>
    rx_msg->data[i] = can_read_reg(SJADATE+i);
  }
  
  rx_msg->status = NEW;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	f7 01       	movw	r30, r14
     564:	86 87       	std	Z+14, r24	; 0x0e

  can_write_reg(sjaCMR_RRB, SJACMR);
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     57c:	11 23       	and	r17, r17
     57e:	29 f7       	brne	.-54     	; 0x54a <sja1000p_read+0x78>
     580:	ef cf       	rjmp	.-34     	; 0x560 <sja1000p_read+0x8e>

00000582 <sja1000p_irq_handler>:
 * CAN controller chip and distribution of message through attached
 * message queues.
 * File: src/sja1000p.c
 */
char sja1000p_irq_handler(struct canmsg_t *rx_msg)
{
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
  unsigned char irq_register, status;

  irq_register = can_read_reg(SJAIR);  
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     592:	18 2f       	mov	r17, r24

  if ((irq_register & (sjaIR_BEI|sjaIR_EPI|sjaIR_DOI|sjaIR_EI|sjaIR_TI|sjaIR_RI)) == 0) {
     594:	8f 7a       	andi	r24, 0xAF	; 175
     596:	29 f4       	brne	.+10     	; 0x5a2 <sja1000p_irq_handler+0x20>
      can_write_reg(0, SJAMOD);
    }
  }

  return 1;
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret
     _delay_ms(1000);
 #endif
    return 0;
  }

  status = can_read_reg(SJASR);
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     5a8:	08 2f       	mov	r16, r24

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
     5aa:	80 fd       	sbrc	r24, 0
     5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <sja1000p_irq_handler+0x40>
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     5ae:	1c 7a       	andi	r17, 0xAC	; 172
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <sja1000p_irq_handler+0x34>
    // Some error happened
    
    if(status & sjaSR_BS) {
     5b2:	07 fd       	sbrc	r16, 7
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <sja1000p_irq_handler+0x48>
      lcd_puts_line(0,"SJA bus-off");
      _delay_ms(1000);
      lcd_puts_line(0,"SJA resetting..");
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     5b6:	81 e0       	ldi	r24, 0x01	; 1
    }
  }

  return 1;
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret
  if (status & sjaSR_RBS) {
#ifdef DEBUG
    lcd_puts_line(0,"SJA IRQ RI, RBS");
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
     5c2:	ce 01       	movw	r24, r28
     5c4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <sja1000p_read>
     5c8:	f2 cf       	rjmp	.-28     	; 0x5ae <sja1000p_irq_handler+0x2c>
      lcd_puts_line(0,"SJA bus-off");
      _delay_ms(1000);
      lcd_puts_line(0,"SJA resetting..");
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	e1 cf       	rjmp	.-62     	; 0x598 <sja1000p_irq_handler+0x16>

000005d6 <sja1000p_disable_configuration>:
/**
 * sja1000p_disable_configuration - disable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_disable_configuration()
{
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     5e2:	80 ff       	sbrs	r24, 0
     5e4:	1a c0       	rjmp	.+52     	; 0x61a <sja1000p_disable_configuration+0x44>
     5e6:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5e8:	c8 ec       	ldi	r28, 0xC8	; 200
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <sja1000p_disable_configuration+0x1c>
     5ee:	13 33       	cpi	r17, 0x33	; 51
     5f0:	79 f0       	breq	.+30     	; 0x610 <sja1000p_disable_configuration+0x3a>
// could be as long as 11*128 bit times after buss-off
    can_write_reg(0, SJAMOD);
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <sja1000p_disable_configuration+0x26>
    _delay_us(100);
    i++;
     600:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     608:	80 fd       	sbrc	r24, 0
     60a:	f1 cf       	rjmp	.-30     	; 0x5ee <sja1000p_disable_configuration+0x18>
    can_write_reg(0, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     60c:	1a 30       	cpi	r17, 0x0A	; 10
     60e:	28 f0       	brcs	.+10     	; 0x61a <sja1000p_disable_configuration+0x44>
    return -1;
  }

  can_enable_irq();

  return 0;
     610:	8f ef       	ldi	r24, 0xFF	; 255
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	08 95       	ret
    CANMSG("SJA err exit rst");
#endif
    return -1;
  }

  can_enable_irq();
     61a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_enable_irq>
     61e:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <sja1000p_enable_configuration>:
/**
 * sja1000p_enable_configuration - enable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_enable_configuration()
{
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  can_disable_irq();
     62e:	0e 94 5f 02 	call	0x4be	; 0x4be <can_disable_irq>

  flags = can_read_reg(SJAMOD);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     638:	80 fd       	sbrc	r24, 0
     63a:	18 c0       	rjmp	.+48     	; 0x66c <sja1000p_enable_configuration+0x44>
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	c8 ec       	ldi	r28, 0xC8	; 200
     640:	d0 e0       	ldi	r29, 0x00	; 0
    can_write_reg(sjaMOD_RM, SJAMOD);
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
     64a:	ce 01       	movw	r24, r28
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <sja1000p_enable_configuration+0x24>
    _delay_us(100);
    i++;
     650:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>

  can_disable_irq();

  flags = can_read_reg(SJAMOD);

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     658:	80 fd       	sbrc	r24, 0
     65a:	06 c0       	rjmp	.+12     	; 0x668 <sja1000p_enable_configuration+0x40>
     65c:	1b 30       	cpi	r17, 0x0B	; 11
     65e:	89 f7       	brne	.-30     	; 0x642 <sja1000p_enable_configuration+0x1a>
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("SJA rst mode err");
#endif
    can_enable_irq();
     660:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_enable_irq>
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	03 c0       	rjmp	.+6      	; 0x66e <sja1000p_enable_configuration+0x46>
    can_write_reg(sjaMOD_RM, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     668:	1a 30       	cpi	r17, 0x0A	; 10
     66a:	d0 f7       	brcc	.-12     	; 0x660 <sja1000p_enable_configuration+0x38>
#ifdef DEBUG
    CANMSG("SJA rst mode err");
#endif
    can_enable_irq();
    return -1;
     66c:	80 e0       	ldi	r24, 0x00	; 0
  }
#ifdef DEBUG
  CANMSG("SJA rst mode OK");
#endif
  return 0;
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	08 95       	ret

00000676 <sja1000p_pre_write_config>:
 * into chip buffer in this function.
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_pre_write_config(struct canmsg_t *msg)
{
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
     680:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     682:	0a e1       	ldi	r16, 0x1A	; 26
     684:	04 c0       	rjmp	.+8      	; 0x68e <sja1000p_pre_write_config+0x18>
  unsigned char i = 0; 
  unsigned char status;
  unsigned char len;

  /* Wait until Transmit Buffer Status is released */
  while ( !((status = can_read_reg(SJASR)) & sjaSR_TBS) && 
     686:	1f 5f       	subi	r17, 0xFF	; 255
     688:	80 2f       	mov	r24, r16
     68a:	8a 95       	dec	r24
     68c:	f1 f7       	brne	.-4      	; 0x68a <sja1000p_pre_write_config+0x14>
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     694:	82 fd       	sbrc	r24, 2
     696:	02 c0       	rjmp	.+4      	; 0x69c <sja1000p_pre_write_config+0x26>
     698:	1a 30       	cpi	r17, 0x0A	; 10
     69a:	a9 f7       	brne	.-22     	; 0x686 <sja1000p_pre_write_config+0x10>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
    _delay_us(10);
  }
  
  if(status & sjaSR_BS) {
     69c:	87 fd       	sbrc	r24, 7
     69e:	34 c0       	rjmp	.+104    	; 0x708 <sja1000p_pre_write_config+0x92>
    can_write_reg(0, SJATXERR1);
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     6a6:	82 ff       	sbrs	r24, 2
     6a8:	3f c0       	rjmp	.+126    	; 0x728 <sja1000p_pre_write_config+0xb2>
      CANMSG("Reset SJA chip!");
#endif
      return -1;
    }
  }
  len = msg->length;
     6aa:	0d 81       	ldd	r16, Y+5	; 0x05
     6ac:	09 30       	cpi	r16, 0x09	; 9
     6ae:	50 f5       	brcc	.+84     	; 0x704 <sja1000p_pre_write_config+0x8e>
  if(len > CAN_MSG_LENGTH) len = CAN_MSG_LENGTH;
  
  /* len &= sjaFRM_DLC_M; ensured by above condition already */
  can_write_reg(sjaFRM_FF |len, SJAFRM);
     6b0:	80 2f       	mov	r24, r16
     6b2:	80 68       	ori	r24, 0x80	; 128
     6b4:	60 e1       	ldi	r22, 0x10	; 16
     6b6:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  
  can_write_reg(msg->id[3] << 3, SJAID3);
     6ba:	8c 81       	ldd	r24, Y+4	; 0x04
     6bc:	88 0f       	add	r24, r24
     6be:	88 0f       	add	r24, r24
     6c0:	88 0f       	add	r24, r24
     6c2:	64 e1       	ldi	r22, 0x14	; 20
     6c4:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  can_write_reg(msg->id[2], SJAID2);
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	63 e1       	ldi	r22, 0x13	; 19
     6cc:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  can_write_reg(msg->id[1], SJAID1);
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	62 e1       	ldi	r22, 0x12	; 18
     6d4:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  can_write_reg(msg->id[0], SJAID0);
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	61 e1       	ldi	r22, 0x11	; 17
     6dc:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  
  for(i=0; i < len; i++) {
     6e0:	00 23       	and	r16, r16
     6e2:	51 f0       	breq	.+20     	; 0x6f8 <sja1000p_pre_write_config+0x82>
     6e4:	10 e0       	ldi	r17, 0x00	; 0
    can_write_reg(msg->data[i], SJADATE+i);
     6e6:	1b 5e       	subi	r17, 0xEB	; 235
     6e8:	8e 81       	ldd	r24, Y+6	; 0x06
     6ea:	61 2f       	mov	r22, r17
     6ec:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  can_write_reg(msg->id[3] << 3, SJAID3);
  can_write_reg(msg->id[2], SJAID2);
  can_write_reg(msg->id[1], SJAID1);
  can_write_reg(msg->id[0], SJAID0);
  
  for(i=0; i < len; i++) {
     6f0:	14 51       	subi	r17, 0x14	; 20
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	10 17       	cp	r17, r16
     6f6:	b8 f3       	brcs	.-18     	; 0x6e6 <sja1000p_pre_write_config+0x70>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
  }
#ifdef DEBUG
    CANMSG("SJA TX...");
#endif
  return 0;
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	08 95       	ret
      CANMSG("Reset SJA chip!");
#endif
      return -1;
    }
  }
  len = msg->length;
     704:	08 e0       	ldi	r16, 0x08	; 8
     706:	d4 cf       	rjmp	.-88     	; 0x6b0 <sja1000p_pre_write_config+0x3a>
  if(status & sjaSR_BS) {
    /* Try to recover from error condition */
#ifdef DEBUG
    CANMSG("SJA bus recover");
#endif
    sja1000p_enable_configuration();
     708:	0e 94 14 03 	call	0x628	; 0x628 <sja1000p_enable_configuration>
    can_write_reg(0, SJARXERR);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	6e e0       	ldi	r22, 0x0E	; 14
     710:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
    can_write_reg(0, SJATXERR1);
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	6f e0       	ldi	r22, 0x0F	; 15
     718:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
    can_read_reg(SJAECC);
     71c:	8c e0       	ldi	r24, 0x0C	; 12
     71e:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
    sja1000p_disable_configuration();
     722:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sja1000p_disable_configuration>
     726:	bc cf       	rjmp	.-136    	; 0x6a0 <sja1000p_pre_write_config+0x2a>
#endif
// here we should check if there is no write/select waiting for this
// transmit. If so, set error ret and wake up.
// CHECKME: if we do not disable sjaIER_TIE (TX IRQ) here we get interrupt
// immediately
    can_write_reg(sjaCMR_AT, SJACMR);
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	0a e1       	ldi	r16, 0x1A	; 26
     734:	04 c0       	rjmp	.+8      	; 0x73e <sja1000p_pre_write_config+0xc8>
    i = 0;
    while ( !(can_read_reg(SJASR) & sjaSR_TBS) &&
     736:	1f 5f       	subi	r17, 0xFF	; 255
     738:	80 2f       	mov	r24, r16
     73a:	8a 95       	dec	r24
     73c:	f1 f7       	brne	.-4      	; 0x73a <sja1000p_pre_write_config+0xc4>
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     744:	82 fd       	sbrc	r24, 2
     746:	02 c0       	rjmp	.+4      	; 0x74c <sja1000p_pre_write_config+0xd6>
     748:	1a 30       	cpi	r17, 0x0A	; 10
     74a:	a9 f7       	brne	.-22     	; 0x736 <sja1000p_pre_write_config+0xc0>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
      _delay_us(10);
    }
    if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
     752:	82 fd       	sbrc	r24, 2
     754:	aa cf       	rjmp	.-172    	; 0x6aa <sja1000p_pre_write_config+0x34>
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	d0 cf       	rjmp	.-96     	; 0x6fa <sja1000p_pre_write_config+0x84>

0000075a <sja1000p_baud_rate>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_baud_rate(unsigned long rate, unsigned long clock, unsigned char sjw,unsigned char sampl_pt, unsigned char flags)
{
     75a:	2f 92       	push	r2
     75c:	3f 92       	push	r3
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	67 97       	sbiw	r28, 0x17	; 23
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	69 8b       	std	Y+17, r22	; 0x11
     790:	7a 8b       	std	Y+18, r23	; 0x12
     792:	8b 8b       	std	Y+19, r24	; 0x13
     794:	9c 8b       	std	Y+20, r25	; 0x14
     796:	49 01       	movw	r8, r18
     798:	5a 01       	movw	r10, r20
     79a:	0d 8b       	std	Y+21, r16	; 0x15
     79c:	ee 8a       	std	Y+22, r14	; 0x16
     79e:	cf 8a       	std	Y+23, r12	; 0x17
  unsigned long best_error = 1000000000, error;
  unsigned long best_tseg=0, best_brp=0, best_rate=0, brp=0;
  unsigned long tseg=0, tseg1=0, tseg2=0;
  
  if (sja1000p_enable_configuration())
     7a0:	0e 94 14 03 	call	0x628	; 0x628 <sja1000p_enable_configuration>
     7a4:	88 23       	and	r24, r24
     7a6:	09 f0       	breq	.+2      	; 0x7aa <sja1000p_baud_rate+0x50>
     7a8:	42 c1       	rjmp	.+644    	; 0xa2e <sja1000p_baud_rate+0x2d4>
    return -1;

  clock /=2;
     7aa:	a5 01       	movw	r20, r10
     7ac:	94 01       	movw	r18, r8
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	29 87       	std	Y+9, r18	; 0x09
     7b8:	3a 87       	std	Y+10, r19	; 0x0a
     7ba:	4b 87       	std	Y+11, r20	; 0x0b
     7bc:	5c 87       	std	Y+12, r21	; 0x0c
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	9a ec       	ldi	r25, 0xCA	; 202
     7c2:	aa e9       	ldi	r26, 0x9A	; 154
     7c4:	bb e3       	ldi	r27, 0x3B	; 59
     7c6:	8d 87       	std	Y+13, r24	; 0x0d
     7c8:	9e 87       	std	Y+14, r25	; 0x0e
     7ca:	af 87       	std	Y+15, r26	; 0x0f
     7cc:	b8 8b       	std	Y+16, r27	; 0x10
     7ce:	1d 82       	std	Y+5, r1	; 0x05
     7d0:	1e 82       	std	Y+6, r1	; 0x06
     7d2:	1f 82       	std	Y+7, r1	; 0x07
     7d4:	18 86       	std	Y+8, r1	; 0x08
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	1b 82       	std	Y+3, r1	; 0x03
     7dc:	1c 82       	std	Y+4, r1	; 0x04
     7de:	74 e0       	ldi	r23, 0x04	; 4
     7e0:	e7 2e       	mov	r14, r23
     7e2:	f1 2c       	mov	r15, r1
     7e4:	01 2d       	mov	r16, r1
     7e6:	11 2d       	mov	r17, r1
     7e8:	38 c0       	rjmp	.+112    	; 0x85a <sja1000p_baud_rate+0x100>
  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
    brp = clock/((1+tseg/2)*rate)+tseg%2;
    if (brp == 0 || brp > 64)
      continue;
    error = rate - clock/(brp*(1+tseg/2));
     7ea:	ca 01       	movw	r24, r20
     7ec:	b9 01       	movw	r22, r18
     7ee:	a4 01       	movw	r20, r8
     7f0:	93 01       	movw	r18, r6
     7f2:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsi3>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	69 85       	ldd	r22, Y+9	; 0x09
     7fc:	7a 85       	ldd	r23, Y+10	; 0x0a
     7fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     800:	9c 85       	ldd	r25, Y+12	; 0x0c
     802:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     806:	89 89       	ldd	r24, Y+17	; 0x11
     808:	9a 89       	ldd	r25, Y+18	; 0x12
     80a:	ab 89       	ldd	r26, Y+19	; 0x13
     80c:	bc 89       	ldd	r27, Y+20	; 0x14
     80e:	82 1b       	sub	r24, r18
     810:	93 0b       	sbc	r25, r19
     812:	a4 0b       	sbc	r26, r20
     814:	b5 0b       	sbc	r27, r21
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     816:	2d 85       	ldd	r18, Y+13	; 0x0d
     818:	3e 85       	ldd	r19, Y+14	; 0x0e
     81a:	4f 85       	ldd	r20, Y+15	; 0x0f
     81c:	58 89       	ldd	r21, Y+16	; 0x10
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	4a 07       	cpc	r20, r26
     824:	5b 07       	cpc	r21, r27
     826:	08 f4       	brcc	.+2      	; 0x82a <sja1000p_baud_rate+0xd0>
     828:	4d c0       	rjmp	.+154    	; 0x8c4 <sja1000p_baud_rate+0x16a>
     82a:	8d 87       	std	Y+13, r24	; 0x0d
     82c:	9e 87       	std	Y+14, r25	; 0x0e
     82e:	af 87       	std	Y+15, r26	; 0x0f
     830:	b8 8b       	std	Y+16, r27	; 0x10
    return -1;

  clock /=2;

  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
     832:	08 94       	sec
     834:	e1 1c       	adc	r14, r1
     836:	f1 1c       	adc	r15, r1
     838:	01 1d       	adc	r16, r1
     83a:	11 1d       	adc	r17, r1
     83c:	32 e3       	ldi	r19, 0x32	; 50
     83e:	e3 16       	cp	r14, r19
     840:	f1 04       	cpc	r15, r1
     842:	01 05       	cpc	r16, r1
     844:	11 05       	cpc	r17, r1
     846:	09 f4       	brne	.+2      	; 0x84a <sja1000p_baud_rate+0xf0>
     848:	46 c0       	rjmp	.+140    	; 0x8d6 <sja1000p_baud_rate+0x17c>
     84a:	ad 82       	std	Y+5, r10	; 0x05
     84c:	be 82       	std	Y+6, r11	; 0x06
     84e:	cf 82       	std	Y+7, r12	; 0x07
     850:	d8 86       	std	Y+8, r13	; 0x08
     852:	29 82       	std	Y+1, r2	; 0x01
     854:	3a 82       	std	Y+2, r3	; 0x02
     856:	4b 82       	std	Y+3, r4	; 0x03
     858:	5c 82       	std	Y+4, r5	; 0x04
    brp = clock/((1+tseg/2)*rate)+tseg%2;
     85a:	57 01       	movw	r10, r14
     85c:	68 01       	movw	r12, r16
     85e:	d6 94       	lsr	r13
     860:	c7 94       	ror	r12
     862:	b7 94       	ror	r11
     864:	a7 94       	ror	r10
     866:	35 01       	movw	r6, r10
     868:	46 01       	movw	r8, r12
     86a:	08 94       	sec
     86c:	61 1c       	adc	r6, r1
     86e:	71 1c       	adc	r7, r1
     870:	81 1c       	adc	r8, r1
     872:	91 1c       	adc	r9, r1
     874:	c4 01       	movw	r24, r8
     876:	b3 01       	movw	r22, r6
     878:	29 89       	ldd	r18, Y+17	; 0x11
     87a:	3a 89       	ldd	r19, Y+18	; 0x12
     87c:	4b 89       	ldd	r20, Y+19	; 0x13
     87e:	5c 89       	ldd	r21, Y+20	; 0x14
     880:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsi3>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	69 85       	ldd	r22, Y+9	; 0x09
     88a:	7a 85       	ldd	r23, Y+10	; 0x0a
     88c:	8b 85       	ldd	r24, Y+11	; 0x0b
     88e:	9c 85       	ldd	r25, Y+12	; 0x0c
     890:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     894:	d8 01       	movw	r26, r16
     896:	c7 01       	movw	r24, r14
     898:	81 70       	andi	r24, 0x01	; 1
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	28 0f       	add	r18, r24
     8a2:	39 1f       	adc	r19, r25
     8a4:	4a 1f       	adc	r20, r26
     8a6:	5b 1f       	adc	r21, r27
    if (brp == 0 || brp > 64)
     8a8:	19 01       	movw	r2, r18
     8aa:	2a 01       	movw	r4, r20
     8ac:	08 94       	sec
     8ae:	21 08       	sbc	r2, r1
     8b0:	31 08       	sbc	r3, r1
     8b2:	41 08       	sbc	r4, r1
     8b4:	51 08       	sbc	r5, r1
     8b6:	90 e4       	ldi	r25, 0x40	; 64
     8b8:	29 16       	cp	r2, r25
     8ba:	31 04       	cpc	r3, r1
     8bc:	41 04       	cpc	r4, r1
     8be:	51 04       	cpc	r5, r1
     8c0:	08 f4       	brcc	.+2      	; 0x8c4 <sja1000p_baud_rate+0x16a>
     8c2:	93 cf       	rjmp	.-218    	; 0x7ea <sja1000p_baud_rate+0x90>
    error = rate - clock/(brp*(1+tseg/2));
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     8c4:	ad 80       	ldd	r10, Y+5	; 0x05
     8c6:	be 80       	ldd	r11, Y+6	; 0x06
     8c8:	cf 80       	ldd	r12, Y+7	; 0x07
     8ca:	d8 84       	ldd	r13, Y+8	; 0x08
     8cc:	29 80       	ldd	r2, Y+1	; 0x01
     8ce:	3a 80       	ldd	r3, Y+2	; 0x02
     8d0:	4b 80       	ldd	r4, Y+3	; 0x03
     8d2:	5c 80       	ldd	r5, Y+4	; 0x04
     8d4:	ae cf       	rjmp	.-164    	; 0x832 <sja1000p_baud_rate+0xd8>
      best_tseg = tseg/2;
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
     8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	af 85       	ldd	r26, Y+15	; 0x0f
     8dc:	b8 89       	ldd	r27, Y+16	; 0x10
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	a1 05       	cpc	r26, r1
     8e2:	b1 05       	cpc	r27, r1
     8e4:	81 f0       	breq	.+32     	; 0x906 <sja1000p_baud_rate+0x1ac>
     8e6:	69 89       	ldd	r22, Y+17	; 0x11
     8e8:	7a 89       	ldd	r23, Y+18	; 0x12
     8ea:	8b 89       	ldd	r24, Y+19	; 0x13
     8ec:	9c 89       	ldd	r25, Y+20	; 0x14
     8ee:	2d 85       	ldd	r18, Y+13	; 0x0d
     8f0:	3e 85       	ldd	r19, Y+14	; 0x0e
     8f2:	4f 85       	ldd	r20, Y+15	; 0x0f
     8f4:	58 89       	ldd	r21, Y+16	; 0x10
     8f6:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     8fa:	2a 30       	cpi	r18, 0x0A	; 10
     8fc:	31 05       	cpc	r19, r1
     8fe:	41 05       	cpc	r20, r1
     900:	51 05       	cpc	r21, r1
     902:	08 f4       	brcc	.+2      	; 0x906 <sja1000p_baud_rate+0x1ac>
     904:	8b c0       	rjmp	.+278    	; 0xa1c <sja1000p_baud_rate+0x2c2>
    CANMSG("SAJ b-r error");
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	ae 89       	ldd	r26, Y+22	; 0x16
     914:	2a 2f       	mov	r18, r26
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsi3>
     920:	24 e6       	ldi	r18, 0x64	; 100
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
     92c:	35 01       	movw	r6, r10
     92e:	46 01       	movw	r8, r12
     930:	62 1a       	sub	r6, r18
     932:	73 0a       	sbc	r7, r19
     934:	84 0a       	sbc	r8, r20
     936:	95 0a       	sbc	r9, r21
     938:	b8 e0       	ldi	r27, 0x08	; 8
     93a:	6b 16       	cp	r6, r27
     93c:	71 04       	cpc	r7, r1
     93e:	81 04       	cpc	r8, r1
     940:	91 04       	cpc	r9, r1
     942:	08 f0       	brcs	.+2      	; 0x946 <sja1000p_baud_rate+0x1ec>
     944:	65 c0       	rjmp	.+202    	; 0xa10 <sja1000p_baud_rate+0x2b6>
    tseg2 = 0;
  
  if (tseg2 > sjaMAX_TSEG2)
    tseg2 = sjaMAX_TSEG2;
  
  tseg1 = best_tseg-tseg2-2;
     946:	2e ef       	ldi	r18, 0xFE	; 254
     948:	3f ef       	ldi	r19, 0xFF	; 255
     94a:	4f ef       	ldi	r20, 0xFF	; 255
     94c:	5f ef       	ldi	r21, 0xFF	; 255
     94e:	a2 0e       	add	r10, r18
     950:	b3 1e       	adc	r11, r19
     952:	c4 1e       	adc	r12, r20
     954:	d5 1e       	adc	r13, r21
     956:	d6 01       	movw	r26, r12
     958:	c5 01       	movw	r24, r10
     95a:	86 19       	sub	r24, r6
     95c:	97 09       	sbc	r25, r7
     95e:	a8 09       	sbc	r26, r8
     960:	b9 09       	sbc	r27, r9
     962:	22 e0       	ldi	r18, 0x02	; 2
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	a2 0e       	add	r10, r18
     96c:	b3 1e       	adc	r11, r19
     96e:	c4 1e       	adc	r12, r20
     970:	d5 1e       	adc	r13, r21
  
  if (tseg1>sjaMAX_TSEG1) {
     972:	80 31       	cpi	r24, 0x10	; 16
     974:	91 05       	cpc	r25, r1
     976:	a1 05       	cpc	r26, r1
     978:	b1 05       	cpc	r27, r1
     97a:	e0 f5       	brcc	.+120    	; 0x9f4 <sja1000p_baud_rate+0x29a>
     97c:	18 2f       	mov	r17, r24
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
     97e:	3d 89       	ldd	r19, Y+21	; 0x15
     980:	32 95       	swap	r19
     982:	33 0f       	add	r19, r19
     984:	33 0f       	add	r19, r19
     986:	30 7c       	andi	r19, 0xC0	; 192
     988:	83 2f       	mov	r24, r19
     98a:	82 29       	or	r24, r2
     98c:	66 e0       	ldi	r22, 0x06	; 6
     98e:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     992:	4f 89       	ldd	r20, Y+23	; 0x17
     994:	41 fd       	sbrc	r20, 1
     996:	4d c0       	rjmp	.+154    	; 0xa32 <sja1000p_baud_rate+0x2d8>
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	86 2d       	mov	r24, r6
     99c:	82 95       	swap	r24
     99e:	80 7f       	andi	r24, 0xF0	; 240
     9a0:	81 2b       	or	r24, r17
     9a2:	89 2b       	or	r24, r25
     9a4:	67 e0       	ldi	r22, 0x07	; 7
     9a6:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
          | tseg1, SJABTR1);

  sja1000p_disable_configuration();
     9aa:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sja1000p_disable_configuration>

  CANMSG("SJA baud rate OK");
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	6b e7       	ldi	r22, 0x7B	; 123
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     9b8:	88 ee       	ldi	r24, 0xE8	; 232
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
     9c0:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     9c2:	67 96       	adiw	r28, 0x17	; 23
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	3f 90       	pop	r3
     9f0:	2f 90       	pop	r2
     9f2:	08 95       	ret
  
  tseg1 = best_tseg-tseg2-2;
  
  if (tseg1>sjaMAX_TSEG1) {
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
     9f4:	4f ee       	ldi	r20, 0xEF	; 239
     9f6:	64 2e       	mov	r6, r20
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	74 2e       	mov	r7, r20
     9fc:	4f ef       	ldi	r20, 0xFF	; 255
     9fe:	84 2e       	mov	r8, r20
     a00:	4f ef       	ldi	r20, 0xFF	; 255
     a02:	94 2e       	mov	r9, r20
     a04:	6a 0c       	add	r6, r10
     a06:	7b 1c       	adc	r7, r11
     a08:	8c 1c       	adc	r8, r12
     a0a:	9d 1c       	adc	r9, r13
     a0c:	1f e0       	ldi	r17, 0x0F	; 15
     a0e:	b7 cf       	rjmp	.-146    	; 0x97e <sja1000p_baud_rate+0x224>
  }
  if (best_error && (rate/best_error < 10)) {
    CANMSG("SAJ b-r error");
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     a10:	57 e0       	ldi	r21, 0x07	; 7
     a12:	65 2e       	mov	r6, r21
     a14:	71 2c       	mov	r7, r1
     a16:	81 2c       	mov	r8, r1
     a18:	91 2c       	mov	r9, r1
     a1a:	95 cf       	rjmp	.-214    	; 0x946 <sja1000p_baud_rate+0x1ec>
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
    CANMSG("SAJ b-r error");
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	6d e6       	ldi	r22, 0x6D	; 109
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     a26:	88 ee       	ldi	r24, 0xE8	; 232
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	c8 cf       	rjmp	.-112    	; 0x9c2 <sja1000p_baud_rate+0x268>
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     a32:	90 e8       	ldi	r25, 0x80	; 128
     a34:	b2 cf       	rjmp	.-156    	; 0x99a <sja1000p_baud_rate+0x240>

00000a36 <sja1000p_extended_mask>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	5b 01       	movw	r10, r22
     a4a:	6c 01       	movw	r12, r24
     a4c:	79 01       	movw	r14, r18
     a4e:	8a 01       	movw	r16, r20
   char i;

  if (sja1000p_enable_configuration())
     a50:	0e 94 14 03 	call	0x628	; 0x628 <sja1000p_enable_configuration>
     a54:	88 23       	and	r24, r24
     a56:	31 f5       	brne	.+76     	; 0xaa4 <sja1000p_extended_mask+0x6e>
     a58:	b3 e1       	ldi	r27, 0x13	; 19
     a5a:	9b 2e       	mov	r9, r27
    return -1;

// LSB to +3, MSB to +0 
  for(i = SJA_PeliCAN_AC_LEN; --i >= 0;) {
    can_write_reg(code&0xff,SJAACR0+i);
     a5c:	8a 2d       	mov	r24, r10
     a5e:	69 2d       	mov	r22, r9
     a60:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
    can_write_reg(mask&0xff,SJAAMR0+i);
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	98 0e       	add	r9, r24
     a68:	8e 2d       	mov	r24, r14
     a6a:	69 2d       	mov	r22, r9
     a6c:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
    code >>= 8;
     a70:	ab 2c       	mov	r10, r11
     a72:	bc 2c       	mov	r11, r12
     a74:	cd 2c       	mov	r12, r13
     a76:	dd 24       	eor	r13, r13
    mask >>= 8;
     a78:	ef 2c       	mov	r14, r15
     a7a:	f0 2e       	mov	r15, r16
     a7c:	01 2f       	mov	r16, r17
     a7e:	11 27       	eor	r17, r17
     a80:	8b ef       	ldi	r24, 0xFB	; 251
     a82:	98 0e       	add	r9, r24

  if (sja1000p_enable_configuration())
    return -1;

// LSB to +3, MSB to +0 
  for(i = SJA_PeliCAN_AC_LEN; --i >= 0;) {
     a84:	8f e0       	ldi	r24, 0x0F	; 15
     a86:	98 16       	cp	r9, r24
     a88:	49 f7       	brne	.-46     	; 0xa5c <sja1000p_extended_mask+0x26>
    can_write_reg(mask&0xff,SJAAMR0+i);
    code >>= 8;
    mask >>= 8;
  }

  sja1000p_disable_configuration();  
     a8a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sja1000p_disable_configuration>
     a8e:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	08 95       	ret
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
   char i;

  if (sja1000p_enable_configuration())
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	f4 cf       	rjmp	.-24     	; 0xa90 <sja1000p_extended_mask+0x5a>

00000aa8 <sja1000p_chip_config>:
 * computes and sets baudrate with use of function sja1000p_baud_rate().
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_chip_config(struct canchip_t *chip)
{
     aa8:	cf 92       	push	r12
     aaa:	ef 92       	push	r14
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
  unsigned char i;
  unsigned char n, r;
  
  if (sja1000p_enable_configuration())
     ab6:	0e 94 14 03 	call	0x628	; 0x628 <sja1000p_enable_configuration>
     aba:	88 23       	and	r24, r24
     abc:	41 f0       	breq	.+16     	; 0xace <sja1000p_chip_config+0x26>

  sja1000p_disable_configuration();
  
  CANMSG("SJA config OK");
  
  return 0;
     abe:	8f ef       	ldi	r24, 0xFF	; 255
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ef 90       	pop	r14
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret
  
  if (sja1000p_enable_configuration())
    return -1;

  /* Set mode, clock out, comparator */
  can_write_reg(sjaCDR_PELICAN|chip->sja_cdr_reg,SJACDR); 
     ace:	88 89       	ldd	r24, Y+16	; 0x10
     ad0:	80 68       	ori	r24, 0x80	; 128
     ad2:	6f e1       	ldi	r22, 0x1F	; 31
     ad4:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

  /* Ensure, that interrupts are disabled even on the chip level now */
  can_write_reg(sjaDISABLE_INTERRUPTS, SJAIER);
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	64 e0       	ldi	r22, 0x04	; 4
     adc:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
     ae0:	89 89       	ldd	r24, Y+17	; 0x11
     ae2:	68 e0       	ldi	r22, 0x08	; 8
     ae4:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>
     ae8:	0a e5       	ldi	r16, 0x5A	; 90
     aea:	10 e1       	ldi	r17, 0x10	; 16
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
     aec:	80 2f       	mov	r24, r16
     aee:	61 2f       	mov	r22, r17
     af0:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     af4:	01 5f       	subi	r16, 0xF1	; 241
     af6:	1f 5f       	subi	r17, 0xFF	; 255
     af8:	02 3d       	cpi	r16, 0xD2	; 210
     afa:	c1 f7       	brne	.-16     	; 0xaec <sja1000p_chip_config+0x44>
     afc:	1a e5       	ldi	r17, 0x5A	; 90
     afe:	00 e1       	ldi	r16, 0x10	; 16
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <sja1000p_chip_config+0x5c>
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     b02:	11 5f       	subi	r17, 0xF1	; 241
    r = n^can_read_reg(SJAACR0+i);
     b04:	80 2f       	mov	r24, r16
     b06:	0e 94 25 02 	call	0x44a	; 0x44a <can_read_reg>
    if (r) {
     b0a:	18 17       	cp	r17, r24
     b0c:	09 f0       	breq	.+2      	; 0xb10 <sja1000p_chip_config+0x68>
     b0e:	42 c0       	rjmp	.+132    	; 0xb94 <sja1000p_chip_config+0xec>
      CANMSG("SJA config error");
      return -1;
     b10:	0f 5f       	subi	r16, 0xFF	; 255
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     b12:	13 3c       	cpi	r17, 0xC3	; 195
     b14:	b1 f7       	brne	.-20     	; 0xb02 <sja1000p_chip_config+0x5a>
      CANMSG("SJA config error");
      return -1;
    }
  }

  if (sja1000p_extended_mask(chip->filter_code, chip->filter_mask))
     b16:	6c 85       	ldd	r22, Y+12	; 0x0c
     b18:	7d 85       	ldd	r23, Y+13	; 0x0d
     b1a:	8e 85       	ldd	r24, Y+14	; 0x0e
     b1c:	9f 85       	ldd	r25, Y+15	; 0x0f
     b1e:	28 85       	ldd	r18, Y+8	; 0x08
     b20:	39 85       	ldd	r19, Y+9	; 0x09
     b22:	4a 85       	ldd	r20, Y+10	; 0x0a
     b24:	5b 85       	ldd	r21, Y+11	; 0x0b
     b26:	0e 94 1b 05 	call	0xa36	; 0xa36 <sja1000p_extended_mask>
     b2a:	88 23       	and	r24, r24
     b2c:	41 f6       	brne	.-112    	; 0xabe <sja1000p_chip_config+0x16>
    return -1;
  
  if (!chip->baudrate)
     b2e:	6c 81       	ldd	r22, Y+4	; 0x04
     b30:	7d 81       	ldd	r23, Y+5	; 0x05
     b32:	8e 81       	ldd	r24, Y+6	; 0x06
     b34:	9f 81       	ldd	r25, Y+7	; 0x07
     b36:	61 15       	cp	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	81 05       	cpc	r24, r1
     b3c:	91 05       	cpc	r25, r1
     b3e:	61 f4       	brne	.+24     	; 0xb58 <sja1000p_chip_config+0xb0>
    chip->baudrate=1000000;
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	92 e4       	ldi	r25, 0x42	; 66
     b44:	af e0       	ldi	r26, 0x0F	; 15
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	8c 83       	std	Y+4, r24	; 0x04
     b4a:	9d 83       	std	Y+5, r25	; 0x05
     b4c:	ae 83       	std	Y+6, r26	; 0x06
     b4e:	bf 83       	std	Y+7, r27	; 0x07
     b50:	60 e4       	ldi	r22, 0x40	; 64
     b52:	72 e4       	ldi	r23, 0x42	; 66
     b54:	8f e0       	ldi	r24, 0x0F	; 15
     b56:	90 e0       	ldi	r25, 0x00	; 0
  
  if (sja1000p_baud_rate(chip->baudrate,chip->clock,0,75,0))
     b58:	28 81       	ld	r18, Y
     b5a:	39 81       	ldd	r19, Y+1	; 0x01
     b5c:	4a 81       	ldd	r20, Y+2	; 0x02
     b5e:	5b 81       	ldd	r21, Y+3	; 0x03
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	1b e4       	ldi	r17, 0x4B	; 75
     b64:	e1 2e       	mov	r14, r17
     b66:	cc 24       	eor	r12, r12
     b68:	0e 94 ad 03 	call	0x75a	; 0x75a <sja1000p_baud_rate>
     b6c:	88 23       	and	r24, r24
     b6e:	09 f0       	breq	.+2      	; 0xb72 <sja1000p_chip_config+0xca>
     b70:	a6 cf       	rjmp	.-180    	; 0xabe <sja1000p_chip_config+0x16>
    return -1;

  /* Enable hardware interrupts */
  can_write_reg(sjaENABLE_INTERRUPTS, SJAIER); 
     b72:	8f ea       	ldi	r24, 0xAF	; 175
     b74:	64 e0       	ldi	r22, 0x04	; 4
     b76:	0e 94 3f 02 	call	0x47e	; 0x47e <can_write_reg>

  sja1000p_disable_configuration();
     b7a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sja1000p_disable_configuration>
  
  CANMSG("SJA config OK");
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	6d e9       	ldi	r22, 0x9D	; 157
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     b88:	88 ee       	ldi	r24, 0xE8	; 232
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	96 cf       	rjmp	.-212    	; 0xac0 <sja1000p_chip_config+0x18>
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    r = n^can_read_reg(SJAACR0+i);
    if (r) {
      CANMSG("SJA config error");
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	6c e8       	ldi	r22, 0x8C	; 140
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     b9e:	88 ee       	ldi	r24, 0xE8	; 232
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	8b cf       	rjmp	.-234    	; 0xac0 <sja1000p_chip_config+0x18>

00000baa <__vector_14>:
  }
}

/* ADC interrupt service routine */
ISR(ADC_vect)
{
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
  static unsigned char channel = 0;
  
  adc_data[channel] = ADCH;
     bbc:	90 91 ea 00 	lds	r25, 0x00EA
     bc0:	e9 2f       	mov	r30, r25
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	85 b1       	in	r24, 0x05	; 5
     bc6:	e4 5b       	subi	r30, 0xB4	; 180
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 83       	st	Z, r24
  
  /* Select next ADC channel */
  if (++channel > 2)
     bcc:	9f 5f       	subi	r25, 0xFF	; 255
     bce:	90 93 ea 00 	sts	0x00EA, r25
     bd2:	93 30       	cpi	r25, 0x03	; 3
     bd4:	18 f0       	brcs	.+6      	; 0xbdc <__vector_14+0x32>
    channel = 0;
     bd6:	10 92 ea 00 	sts	0x00EA, r1
     bda:	90 e0       	ldi	r25, 0x00	; 0
  
  ADMUX = (ADC_VREF_TYPE & 0xff) + channel;
     bdc:	90 5a       	subi	r25, 0xA0	; 160
     bde:	97 b9       	out	0x07, r25	; 7
  
  adc_start;
     be0:	36 9a       	sbi	0x06, 6	; 6
}
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0
     bf0:	1f 90       	pop	r1
     bf2:	18 95       	reti

00000bf4 <save_samples>:
  return 0;
}


static void save_samples()
{
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	86 ef       	ldi	r24, 0xF6	; 246
     c08:	a8 2e       	mov	r10, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	b8 2e       	mov	r11, r24
     c0e:	00 e0       	ldi	r16, 0x00	; 0
     c10:	10 e0       	ldi	r17, 0x00	; 0
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	cc 24       	eor	r12, r12
     c18:	dd 24       	eor	r13, r13
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
     c1a:	f5 01       	movw	r30, r10
     c1c:	f0 80       	ld	r15, Z
     c1e:	e0 e0       	ldi	r30, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
        adc_time = timer_msec;
        average += adc_data[i];
     c24:	e6 01       	movw	r28, r12
     c26:	c4 5b       	subi	r28, 0xB4	; 180
     c28:	de 4f       	sbci	r29, 0xFE	; 254
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
     c2a:	ef 15       	cp	r30, r15
     c2c:	08 f5       	brcc	.+66     	; 0xc70 <save_samples+0x7c>
     c2e:	a9 01       	movw	r20, r18
     c30:	98 01       	movw	r18, r16
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	4f 4f       	sbci	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
     c3a:	80 91 33 01 	lds	r24, 0x0133
     c3e:	90 91 34 01 	lds	r25, 0x0134
     c42:	a0 91 35 01 	lds	r26, 0x0135
     c46:	b0 91 36 01 	lds	r27, 0x0136
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	a4 07       	cpc	r26, r20
     c50:	b5 07       	cpc	r27, r21
     c52:	98 f3       	brcs	.-26     	; 0xc3a <save_samples+0x46>
        adc_time = timer_msec;
     c54:	00 91 33 01 	lds	r16, 0x0133
     c58:	10 91 34 01 	lds	r17, 0x0134
     c5c:	20 91 35 01 	lds	r18, 0x0135
     c60:	30 91 36 01 	lds	r19, 0x0136
        average += adc_data[i];
     c64:	88 81       	ld	r24, Y
     c66:	68 0f       	add	r22, r24
     c68:	71 1d       	adc	r23, r1
        counter++;
     c6a:	ef 5f       	subi	r30, 0xFF	; 255
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
     c6c:	ef 15       	cp	r30, r15
     c6e:	f8 f2       	brcs	.-66     	; 0xc2e <save_samples+0x3a>
      }
    }
    
    /* counts avarage value from saved samples,
       avoid dividing by zero when none sample saved */
    if (sen_cfg_lock.samples[i])
     c70:	ff 20       	and	r15, r15
     c72:	49 f0       	breq	.+18     	; 0xc86 <save_samples+0x92>
      sen_data.channel_data[i] = average / sen_cfg_lock.samples[i];
     c74:	f6 01       	movw	r30, r12
     c76:	e1 50       	subi	r30, 0x01	; 1
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	cb 01       	movw	r24, r22
     c7c:	6f 2d       	mov	r22, r15
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 0e 09 	call	0x121c	; 0x121c <__udivmodhi4>
     c84:	60 83       	st	Z, r22
     c86:	08 94       	sec
     c88:	c1 1c       	adc	r12, r1
     c8a:	d1 1c       	adc	r13, r1
     c8c:	08 94       	sec
     c8e:	a1 1c       	adc	r10, r1
     c90:	b1 1c       	adc	r11, r1
{
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	c8 16       	cp	r12, r24
     c96:	d1 04       	cpc	r13, r1
     c98:	09 f0       	breq	.+2      	; 0xc9c <save_samples+0xa8>
     c9a:	bf cf       	rjmp	.-130    	; 0xc1a <save_samples+0x26>
    
    counter = 0;
    average = 0;
  }
  
  adc_off;
     c9c:	37 98       	cbi	0x06, 7	; 6
  
  /* if treshold is set for any channel,
     check measured data limits, if overflow occured, set apropriate bit */
  if (sen_cfg_lock.treshold_channel
     c9e:	e0 91 fa 00 	lds	r30, 0x00FA
     ca2:	ee 23       	and	r30, r30
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <save_samples+0xc2>
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	e2 50       	subi	r30, 0x02	; 2
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	90 81       	ld	r25, Z
     cae:	80 91 f9 00 	lds	r24, 0x00F9
     cb2:	98 17       	cp	r25, r24
     cb4:	60 f4       	brcc	.+24     	; 0xcce <save_samples+0xda>
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
  else
    sen_data.overflow = 0;
     cb6:	10 92 02 01 	sts	0x0102, r1
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	08 95       	ret
  
  /* if treshold is set for any channel,
     check measured data limits, if overflow occured, set apropriate bit */
  if (sen_cfg_lock.treshold_channel
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	80 93 02 01 	sts	0x0102, r24
     cd4:	f2 cf       	rjmp	.-28     	; 0xcba <save_samples+0xc6>

00000cd6 <sensor_capture_data>:
  }
}

/* FSM state for capturing ADC samples */
static void sensor_capture_data(struct fsm *fsm, enum event event)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
  switch (event) {
     cdc:	61 15       	cp	r22, r1
     cde:	71 05       	cpc	r23, r1
     ce0:	31 f4       	brne	.+12     	; 0xcee <sensor_capture_data+0x18>
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM capture data");
#endif
    adc_on;
     ce2:	86 b1       	in	r24, 0x06	; 6
     ce4:	80 6c       	ori	r24, 0xC0	; 192
     ce6:	86 b9       	out	0x06, r24	; 6
    fsm->current_state = sensor_send_data;
    break;
  case EVENT_EXIT:
    break;
  }
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret
}

/* FSM state for capturing ADC samples */
static void sensor_capture_data(struct fsm *fsm, enum event event)
{
  switch (event) {
     cee:	61 30       	cpi	r22, 0x01	; 1
     cf0:	71 05       	cpc	r23, r1
     cf2:	d1 f7       	brne	.-12     	; 0xce8 <sensor_capture_data+0x12>
    CANMSG("FSM capture data");
#endif
    adc_on;
    break;
  case EVENT_DO:
    save_samples(fsm);
     cf4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <save_samples>
    fsm->current_state = sensor_send_data;
     cf8:	8a e5       	ldi	r24, 0x5A	; 90
     cfa:	97 e0       	ldi	r25, 0x07	; 7
     cfc:	99 83       	std	Y+1, r25	; 0x01
     cfe:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <fsm_sensor_init>:
  return 0;
}

/* FSM initial state */
void fsm_sensor_init(struct fsm *fsm, enum event event)
{
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
  switch (event) {
     d0e:	61 15       	cp	r22, r1
     d10:	71 05       	cpc	r23, r1
     d12:	09 f0       	breq	.+2      	; 0xd16 <fsm_sensor_init+0x10>
     d14:	64 c0       	rjmp	.+200    	; 0xdde <fsm_sensor_init+0xd8>
{
  unsigned char i = 0;
  
  char *idn = SENSOR_IDN;
  
  sja_init_ports();
     d16:	0e 94 18 02 	call	0x430	; 0x430 <sja_init_ports>
  
  /* fill chip structure with config values */
  chip.baudrate = SJA_BAUD;
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	92 e4       	ldi	r25, 0x42	; 66
     d1e:	af e0       	ldi	r26, 0x0F	; 15
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	80 93 25 01 	sts	0x0125, r24
     d26:	90 93 26 01 	sts	0x0126, r25
     d2a:	a0 93 27 01 	sts	0x0127, r26
     d2e:	b0 93 28 01 	sts	0x0128, r27
  chip.clock = SJA_CLOCK;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	94 e2       	ldi	r25, 0x24	; 36
     d36:	a4 ef       	ldi	r26, 0xF4	; 244
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	80 93 21 01 	sts	0x0121, r24
     d3e:	90 93 22 01 	sts	0x0122, r25
     d42:	a0 93 23 01 	sts	0x0123, r26
     d46:	b0 93 24 01 	sts	0x0124, r27
  chip.filter_mask = 0xffffffff;//~SENSOR_MASK;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
     d4e:	af ef       	ldi	r26, 0xFF	; 255
     d50:	bf ef       	ldi	r27, 0xFF	; 255
     d52:	80 93 29 01 	sts	0x0129, r24
     d56:	90 93 2a 01 	sts	0x012A, r25
     d5a:	a0 93 2b 01 	sts	0x012B, r26
     d5e:	b0 93 2c 01 	sts	0x012C, r27
  chip.filter_code = 0xffffffff;//SENSOR_MASK;
     d62:	80 93 2d 01 	sts	0x012D, r24
     d66:	90 93 2e 01 	sts	0x012E, r25
     d6a:	a0 93 2f 01 	sts	0x012F, r26
     d6e:	b0 93 30 01 	sts	0x0130, r27
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
     d72:	18 e0       	ldi	r17, 0x08	; 8
     d74:	10 93 31 01 	sts	0x0131, r17
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
     d78:	8a e1       	ldi	r24, 0x1A	; 26
     d7a:	80 93 32 01 	sts	0x0132, r24
  
  if(sja1000p_chip_config(&chip))
     d7e:	81 e2       	ldi	r24, 0x21	; 33
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 54 05 	call	0xaa8	; 0xaa8 <sja1000p_chip_config>
     d86:	88 23       	and	r24, r24
     d88:	a9 f5       	brne	.+106    	; 0xdf4 <fsm_sensor_init+0xee>
    
    return -1;
  }
  
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	80 93 03 01 	sts	0x0103, r24
  idn_msg.id[0] = MY_ID;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 04 01 	sts	0x0104, r24
  idn_msg.id[1] = 0;
     d96:	10 92 05 01 	sts	0x0105, r1
  idn_msg.id[2] = 0;
     d9a:	10 92 06 01 	sts	0x0106, r1
  idn_msg.id[3] = 0;
     d9e:	10 92 07 01 	sts	0x0107, r1
  
  idn_msg.length = strlen(idn);
     da2:	10 93 08 01 	sts	0x0108, r17
     da6:	eb ea       	ldi	r30, 0xAB	; 171
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	a9 e0       	ldi	r26, 0x09	; 9
     dac:	b1 e0       	ldi	r27, 0x01	; 1
  
  /* fill msg data bytes with my sensor ID chars  */
  for (;i < strlen(idn);i++) {
    idn_msg.data[i] = idn[i];
     dae:	81 91       	ld	r24, Z+
     db0:	8d 93       	st	X+, r24
  idn_msg.id[3] = 0;
  
  idn_msg.length = strlen(idn);
  
  /* fill msg data bytes with my sensor ID chars  */
  for (;i < strlen(idn);i++) {
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	e3 3b       	cpi	r30, 0xB3	; 179
     db6:	f8 07       	cpc	r31, r24
     db8:	d1 f7       	brne	.-12     	; 0xdae <fsm_sensor_init+0xa8>
    idn_msg.data[i] = idn[i];
  }
  
  ADCSRA = 0x0F;  /* ADC disabled. interrupt enabled, 128x prescaler ~4kHz */
     dba:	8f e0       	ldi	r24, 0x0F	; 15
     dbc:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x60;   /*  Vref = Vcc, ADC output in ADCH */
     dbe:	80 e6       	ldi	r24, 0x60	; 96
     dc0:	87 b9       	out	0x07, r24	; 7
  
  fsm->measurement_start = false;
     dc2:	1c 82       	std	Y+4, r1	; 0x04
  
  CANMSG("Sensor init OK");
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	66 ed       	ldi	r22, 0xD6	; 214
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     dce:	88 ee       	ldi	r24, 0xE8	; 232
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
#ifdef DEBUG    
    CANMSG("FSM init OK");
#endif
    break;
  }
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	08 95       	ret
}

/* FSM initial state */
void fsm_sensor_init(struct fsm *fsm, enum event event)
{
  switch (event) {
     dde:	61 30       	cpi	r22, 0x01	; 1
     de0:	71 05       	cpc	r23, r1
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <fsm_sensor_init+0xd0>
    if (sensor_init(fsm)) {
      // TODO init ERR - provest restart procesoru nejak
    }
    break;
  case EVENT_DO:
    fsm->current_state = wait_for_cmd;
     de4:	8d e0       	ldi	r24, 0x0D	; 13
     de6:	97 e0       	ldi	r25, 0x07	; 7
     de8:	99 83       	std	Y+1, r25	; 0x01
     dea:	88 83       	st	Y, r24
#ifdef DEBUG    
    CANMSG("FSM init OK");
#endif
    break;
  }
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	08 95       	ret
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
  
  if(sja1000p_chip_config(&chip))
  {
    CANMSG("SJA config error");
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	64 eb       	ldi	r22, 0xB4	; 180
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     dfe:	88 ee       	ldi	r24, 0xE8	; 232
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
    CANMSG("Restarting chip!");
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	65 ec       	ldi	r22, 0xC5	; 197
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_puts_line>
     e10:	88 ee       	ldi	r24, 0xE8	; 232
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	0e 94 93 08 	call	0x1126	; 0x1126 <delay_ms>
     e18:	de cf       	rjmp	.-68     	; 0xdd6 <fsm_sensor_init+0xd0>

00000e1a <wait_for_cmd>:
  }
}

/* FSM state, waiting for coniguration message recive */
static void wait_for_cmd(struct fsm *fsm, enum event event)
{
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
  static timer measurement_time = 0;
  
  switch (event) {
     e20:	61 30       	cpi	r22, 0x01	; 1
     e22:	71 05       	cpc	r23, r1
     e24:	49 f0       	breq	.+18     	; 0xe38 <wait_for_cmd+0x1e>
     e26:	62 30       	cpi	r22, 0x02	; 2
     e28:	71 05       	cpc	r23, r1
     e2a:	19 f4       	brne	.+6      	; 0xe32 <wait_for_cmd+0x18>
    break;
  case EVENT_EXIT:
    /* sets condition for next FSM start with aspect to delivery setting
        if delivery = shot, FSM rubs only ones
        if delivery = continual, FSM runs continuously untill new setting is recived */
    fsm->measurement_start = sen_cfg_lock.delivery;
     e2c:	80 91 f5 00 	lds	r24, 0x00F5
     e30:	8c 83       	std	Y+4, r24	; 0x04
    break;
  }
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret
    CANMSG("FSM wait for cmd");
#endif
    break;
  case EVENT_DO:
    /* waiting to start measurement via rx_msg */
    if (fsm->measurement_start && (timer_msec >= measurement_time + 1000)) {
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	88 23       	and	r24, r24
     e3c:	d1 f3       	breq	.-12     	; 0xe32 <wait_for_cmd+0x18>
     e3e:	20 91 33 01 	lds	r18, 0x0133
     e42:	30 91 34 01 	lds	r19, 0x0134
     e46:	40 91 35 01 	lds	r20, 0x0135
     e4a:	50 91 36 01 	lds	r21, 0x0136
     e4e:	80 91 e6 00 	lds	r24, 0x00E6
     e52:	90 91 e7 00 	lds	r25, 0x00E7
     e56:	a0 91 e8 00 	lds	r26, 0x00E8
     e5a:	b0 91 e9 00 	lds	r27, 0x00E9
     e5e:	88 51       	subi	r24, 0x18	; 24
     e60:	9c 4f       	sbci	r25, 0xFC	; 252
     e62:	af 4f       	sbci	r26, 0xFF	; 255
     e64:	bf 4f       	sbci	r27, 0xFF	; 255
     e66:	28 17       	cp	r18, r24
     e68:	39 07       	cpc	r19, r25
     e6a:	4a 07       	cpc	r20, r26
     e6c:	5b 07       	cpc	r21, r27
     e6e:	08 f3       	brcs	.-62     	; 0xe32 <wait_for_cmd+0x18>
      measurement_time = timer_msec;
     e70:	80 91 33 01 	lds	r24, 0x0133
     e74:	90 91 34 01 	lds	r25, 0x0134
     e78:	a0 91 35 01 	lds	r26, 0x0135
     e7c:	b0 91 36 01 	lds	r27, 0x0136
     e80:	80 93 e6 00 	sts	0x00E6, r24
     e84:	90 93 e7 00 	sts	0x00E7, r25
     e88:	a0 93 e8 00 	sts	0x00E8, r26
     e8c:	b0 93 e9 00 	sts	0x00E9, r27
      /* disable AVR interrupt, so the sen_cfg structure is propperly copied
         sen_cfg copy needed to perform proper measurement if new config recived */
      can_disable_irq();
     e90:	0e 94 5f 02 	call	0x4be	; 0x4be <can_disable_irq>
      sen_cfg_lock = sen_cfg;
     e94:	a5 ef       	ldi	r26, 0xF5	; 245
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	eb ee       	ldi	r30, 0xEB	; 235
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	01 90       	ld	r0, Z+
     ea0:	0d 92       	st	X+, r0
     ea2:	81 50       	subi	r24, 0x01	; 1
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <wait_for_cmd+0x84>
      can_enable_irq();
     ea6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_enable_irq>
      fsm->current_state = sensor_capture_data;
     eaa:	8b e6       	ldi	r24, 0x6B	; 107
     eac:	96 e0       	ldi	r25, 0x06	; 6
     eae:	99 83       	std	Y+1, r25	; 0x01
     eb0:	88 83       	st	Y, r24
     eb2:	bf cf       	rjmp	.-130    	; 0xe32 <wait_for_cmd+0x18>

00000eb4 <sensor_send_data>:
  }
}

/* FSM state for transmiting captured samples */
static void sensor_send_data(struct fsm *fsm, enum event event)
{
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
  switch (event) {
     eba:	61 30       	cpi	r22, 0x01	; 1
     ebc:	71 05       	cpc	r23, r1
     ebe:	19 f0       	breq	.+6      	; 0xec6 <sensor_send_data+0x12>
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
    break;
  }
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret
{
  unsigned char i = 0;
  
  /* set msg ID to rx_msg ID */
  for (i = 0; i < 4; i++) {
    tx_msg.id[i] = sen_cfg_lock.rx_msg_id[i];
     ec6:	80 91 fb 00 	lds	r24, 0x00FB
     eca:	80 93 13 01 	sts	0x0113, r24
     ece:	80 91 fc 00 	lds	r24, 0x00FC
     ed2:	80 93 14 01 	sts	0x0114, r24
     ed6:	80 91 fd 00 	lds	r24, 0x00FD
     eda:	80 93 15 01 	sts	0x0115, r24
     ede:	20 91 fe 00 	lds	r18, 0x00FE
     ee2:	20 93 16 01 	sts	0x0116, r18
  tx_msg.length = 0;
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
     ee6:	80 91 f6 00 	lds	r24, 0x00F6
     eea:	88 23       	and	r24, r24
     eec:	79 f5       	brne	.+94     	; 0xf4c <sensor_send_data+0x98>
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 91 f7 00 	lds	r24, 0x00F7
     ef4:	88 23       	and	r24, r24
     ef6:	41 f0       	breq	.+16     	; 0xf08 <sensor_send_data+0x54>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
     ef8:	e9 2f       	mov	r30, r25
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	ee 5e       	subi	r30, 0xEE	; 238
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	80 91 00 01 	lds	r24, 0x0100
     f04:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
     f06:	9f 5f       	subi	r25, 0xFF	; 255
  tx_msg.length = 0;
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
     f08:	80 91 f8 00 	lds	r24, 0x00F8
     f0c:	88 23       	and	r24, r24
     f0e:	41 f0       	breq	.+16     	; 0xf20 <sensor_send_data+0x6c>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
     f10:	e9 2f       	mov	r30, r25
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	ee 5e       	subi	r30, 0xEE	; 238
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	80 91 01 01 	lds	r24, 0x0101
     f1c:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	90 93 17 01 	sts	0x0117, r25
    }
  }
  
  /* if overflow occure, set appropriate bit in msg ID */
  if (sen_data.overflow)
     f24:	80 91 02 01 	lds	r24, 0x0102
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <sensor_send_data+0x7e>
    tx_msg.id[3]++;
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	20 93 16 01 	sts	0x0116, r18
  
  if (sja1000p_pre_write_config(&tx_msg)) {
     f32:	82 e1       	ldi	r24, 0x12	; 18
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 3b 03 	call	0x676	; 0x676 <sja1000p_pre_write_config>
     f3a:	88 23       	and	r24, r24
     f3c:	69 f0       	breq	.+26     	; 0xf58 <sensor_send_data+0xa4>
    CANMSG("FSM TX data");
#endif
    break;
  case EVENT_DO:
    send_samples();
    fsm->current_state = wait_for_cmd;
     f3e:	8d e0       	ldi	r24, 0x0D	; 13
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	99 83       	std	Y+1, r25	; 0x01
     f44:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
     f4c:	80 91 ff 00 	lds	r24, 0x00FF
     f50:	80 93 18 01 	sts	0x0118, r24
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	cc cf       	rjmp	.-104    	; 0xef0 <sensor_send_data+0x3c>
    CANMSG("FSM TX data err");
#endif    
    return -1;
  }
  
  sja1000p_send_msg();
     f58:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sja1000p_send_msg>
     f5c:	f0 cf       	rjmp	.-32     	; 0xf3e <sensor_send_data+0x8a>

00000f5e <sensor_config>:

  return 0;
}

char sensor_config(struct canmsg_t *rx_msg, struct fsm *fsm)
{
     f5e:	fc 01       	movw	r30, r24
     f60:	db 01       	movw	r26, r22
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id[0] == 0xff) {  
     f62:	81 81       	ldd	r24, Z+1	; 0x01
     f64:	8f 3f       	cpi	r24, 0xFF	; 255
     f66:	09 f4       	brne	.+2      	; 0xf6a <sensor_config+0xc>
     f68:	a3 c0       	rjmp	.+326    	; 0x10b0 <sensor_config+0x152>
    
#ifdef DEBUG
    CANMSG("IDN? answer OK");
#endif
  }
  else if (rx_msg->id[0] == MY_ID) {
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	11 f0       	breq	.+4      	; 0xf72 <sensor_config+0x14>
      
      /* decode and save delivery parameter from msg ID */
      sen_cfg.delivery = (rx_msg->id[3] >> 1) & 0x01;
      
      /* start FSM measurement */
      fsm->measurement_start = true;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
#endif
    }
  }
  
  return 0;
}
     f70:	08 95       	ret
  }
  else if (rx_msg->id[0] == MY_ID) {
    /* if recived message is MY_ID = ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
      sen_cfg.samples[0] = averaging((rx_msg->id[2] >> 3) & 7);
     f72:	33 81       	ldd	r19, Z+3	; 0x03


/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
     f74:	83 2f       	mov	r24, r19
     f76:	86 95       	lsr	r24
     f78:	86 95       	lsr	r24
     f7a:	86 95       	lsr	r24
     f7c:	87 70       	andi	r24, 0x07	; 7
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	09 f4       	brne	.+2      	; 0xf84 <sensor_config+0x26>
     f82:	8c c0       	rjmp	.+280    	; 0x109c <sensor_config+0x13e>
     f84:	85 30       	cpi	r24, 0x05	; 5
     f86:	08 f4       	brcc	.+2      	; 0xf8a <sensor_config+0x2c>
     f88:	54 c0       	rjmp	.+168    	; 0x1032 <sensor_config+0xd4>
     f8a:	86 30       	cpi	r24, 0x06	; 6
     f8c:	09 f4       	brne	.+2      	; 0xf90 <sensor_config+0x32>
     f8e:	76 c0       	rjmp	.+236    	; 0x107c <sensor_config+0x11e>
     f90:	86 30       	cpi	r24, 0x06	; 6
     f92:	08 f0       	brcs	.+2      	; 0xf96 <sensor_config+0x38>
     f94:	54 c0       	rjmp	.+168    	; 0x103e <sensor_config+0xe0>
     f96:	40 e2       	ldi	r20, 0x20	; 32
  }
  else if (rx_msg->id[0] == MY_ID) {
    /* if recived message is MY_ID = ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
      sen_cfg.samples[0] = averaging((rx_msg->id[2] >> 3) & 7);
     f98:	40 93 ec 00 	sts	0x00EC, r20


/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
     f9c:	83 2f       	mov	r24, r19
     f9e:	87 70       	andi	r24, 0x07	; 7
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <sensor_config+0x48>
     fa4:	71 c0       	rjmp	.+226    	; 0x1088 <sensor_config+0x12a>
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	08 f0       	brcs	.+2      	; 0xfac <sensor_config+0x4e>
     faa:	5f c0       	rjmp	.+190    	; 0x106a <sensor_config+0x10c>
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	09 f4       	brne	.+2      	; 0xfb2 <sensor_config+0x54>
     fb0:	79 c0       	rjmp	.+242    	; 0x10a4 <sensor_config+0x146>
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <sensor_config+0x5a>
     fb6:	74 c0       	rjmp	.+232    	; 0x10a0 <sensor_config+0x142>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f4       	brne	.+2      	; 0xfbe <sensor_config+0x60>
     fbc:	4a c0       	rjmp	.+148    	; 0x1052 <sensor_config+0xf4>
     fbe:	90 e0       	ldi	r25, 0x00	; 0
  else if (rx_msg->id[0] == MY_ID) {
    /* if recived message is MY_ID = ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
      sen_cfg.samples[0] = averaging((rx_msg->id[2] >> 3) & 7);
      sen_cfg.samples[1] = averaging(rx_msg->id[2] & 7);
     fc0:	90 93 ed 00 	sts	0x00ED, r25
      sen_cfg.samples[2] = averaging((rx_msg->id[3] >> 2) & 7);
     fc4:	24 81       	ldd	r18, Z+4	; 0x04


/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
     fc6:	82 2f       	mov	r24, r18
     fc8:	86 95       	lsr	r24
     fca:	86 95       	lsr	r24
     fcc:	87 70       	andi	r24, 0x07	; 7
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <sensor_config+0x76>
     fd2:	62 c0       	rjmp	.+196    	; 0x1098 <sensor_config+0x13a>
     fd4:	85 30       	cpi	r24, 0x05	; 5
     fd6:	08 f0       	brcs	.+2      	; 0xfda <sensor_config+0x7c>
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <sensor_config+0xfc>
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <sensor_config+0x82>
     fde:	52 c0       	rjmp	.+164    	; 0x1084 <sensor_config+0x126>
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <sensor_config+0x88>
     fe4:	57 c0       	rjmp	.+174    	; 0x1094 <sensor_config+0x136>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 f1       	breq	.+100    	; 0x104e <sensor_config+0xf0>
     fea:	80 e0       	ldi	r24, 0x00	; 0
    /* if recived message is MY_ID = ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
      sen_cfg.samples[0] = averaging((rx_msg->id[2] >> 3) & 7);
      sen_cfg.samples[1] = averaging(rx_msg->id[2] & 7);
      sen_cfg.samples[2] = averaging((rx_msg->id[3] >> 2) & 7);
     fec:	80 93 ee 00 	sts	0x00EE, r24
    
    /* if at least one sample for one channel will measured, continue in decoding */
    if (sen_cfg.samples[0] || sen_cfg.samples[1] || sen_cfg.samples[2]) {
     ff0:	44 23       	and	r20, r20
     ff2:	29 f4       	brne	.+10     	; 0xffe <sensor_config+0xa0>
     ff4:	99 23       	and	r25, r25
     ff6:	19 f4       	brne	.+6      	; 0xffe <sensor_config+0xa0>
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <sensor_config+0xa0>
     ffc:	b8 cf       	rjmp	.-144    	; 0xf6e <sensor_config+0x10>
      
      /* save RX msg ID */
      for (i = 0; i < 4; i++) {
        sen_cfg.rx_msg_id[i] = rx_msg->id[i];
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	90 93 f1 00 	sts	0x00F1, r25
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	80 93 f2 00 	sts	0x00F2, r24
    100a:	30 93 f3 00 	sts	0x00F3, r19
    100e:	20 93 f4 00 	sts	0x00F4, r18
      }
      
      /* decode and save treshold value from msg ID */
      sen_cfg.treshold = rx_msg->id[1];
    1012:	80 93 ef 00 	sts	0x00EF, r24
      
      /* decode and save channel with overflow control from msg ID */
      sen_cfg.treshold_channel = (rx_msg->id[2] >> 6) & 0x03;
    1016:	32 95       	swap	r19
    1018:	36 95       	lsr	r19
    101a:	36 95       	lsr	r19
    101c:	33 70       	andi	r19, 0x03	; 3
    101e:	30 93 f0 00 	sts	0x00F0, r19
      
      /* decode and save delivery parameter from msg ID */
      sen_cfg.delivery = (rx_msg->id[3] >> 1) & 0x01;
    1022:	26 95       	lsr	r18
    1024:	21 70       	andi	r18, 0x01	; 1
    1026:	20 93 eb 00 	sts	0x00EB, r18
      
      /* start FSM measurement */
      fsm->measurement_start = true;
    102a:	14 96       	adiw	r26, 0x04	; 4
    102c:	9c 93       	st	X, r25
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret


/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	29 f1       	breq	.+74     	; 0x1080 <sensor_config+0x122>
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	30 f0       	brcs	.+12     	; 0x1046 <sensor_config+0xe8>
    103a:	48 e0       	ldi	r20, 0x08	; 8
    103c:	ad cf       	rjmp	.-166    	; 0xf98 <sensor_config+0x3a>
    103e:	87 30       	cpi	r24, 0x07	; 7
    1040:	51 f0       	breq	.+20     	; 0x1056 <sensor_config+0xf8>
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	a9 cf       	rjmp	.-174    	; 0xf98 <sensor_config+0x3a>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	e1 f7       	brne	.-8      	; 0x1042 <sensor_config+0xe4>
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	a5 cf       	rjmp	.-182    	; 0xf98 <sensor_config+0x3a>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	cd cf       	rjmp	.-102    	; 0xfec <sensor_config+0x8e>
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	b5 cf       	rjmp	.-150    	; 0xfc0 <sensor_config+0x62>
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	9f cf       	rjmp	.-194    	; 0xf98 <sensor_config+0x3a>
    105a:	86 30       	cpi	r24, 0x06	; 6
    105c:	39 f1       	breq	.+78     	; 0x10ac <sensor_config+0x14e>
    105e:	86 30       	cpi	r24, 0x06	; 6
    1060:	18 f1       	brcs	.+70     	; 0x10a8 <sensor_config+0x14a>
    1062:	87 30       	cpi	r24, 0x07	; 7
    1064:	11 f6       	brne	.-124    	; 0xfea <sensor_config+0x8c>
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	c1 cf       	rjmp	.-126    	; 0xfec <sensor_config+0x8e>
    106a:	86 30       	cpi	r24, 0x06	; 6
    106c:	89 f0       	breq	.+34     	; 0x1090 <sensor_config+0x132>
    106e:	86 30       	cpi	r24, 0x06	; 6
    1070:	68 f0       	brcs	.+26     	; 0x108c <sensor_config+0x12e>
    1072:	87 30       	cpi	r24, 0x07	; 7
    1074:	09 f0       	breq	.+2      	; 0x1078 <sensor_config+0x11a>
    1076:	a3 cf       	rjmp	.-186    	; 0xfbe <sensor_config+0x60>
    1078:	90 e8       	ldi	r25, 0x80	; 128
    107a:	a2 cf       	rjmp	.-188    	; 0xfc0 <sensor_config+0x62>
    107c:	40 e4       	ldi	r20, 0x40	; 64
    107e:	8c cf       	rjmp	.-232    	; 0xf98 <sensor_config+0x3a>
    1080:	44 e0       	ldi	r20, 0x04	; 4
    1082:	8a cf       	rjmp	.-236    	; 0xf98 <sensor_config+0x3a>
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	b2 cf       	rjmp	.-156    	; 0xfec <sensor_config+0x8e>
    1088:	90 e1       	ldi	r25, 0x10	; 16
    108a:	9a cf       	rjmp	.-204    	; 0xfc0 <sensor_config+0x62>
    108c:	90 e2       	ldi	r25, 0x20	; 32
    108e:	98 cf       	rjmp	.-208    	; 0xfc0 <sensor_config+0x62>
    1090:	90 e4       	ldi	r25, 0x40	; 64
    1092:	96 cf       	rjmp	.-212    	; 0xfc0 <sensor_config+0x62>
    1094:	88 e0       	ldi	r24, 0x08	; 8
    1096:	aa cf       	rjmp	.-172    	; 0xfec <sensor_config+0x8e>
    1098:	80 e1       	ldi	r24, 0x10	; 16
    109a:	a8 cf       	rjmp	.-176    	; 0xfec <sensor_config+0x8e>
    109c:	40 e1       	ldi	r20, 0x10	; 16
    109e:	7c cf       	rjmp	.-264    	; 0xf98 <sensor_config+0x3a>
    10a0:	98 e0       	ldi	r25, 0x08	; 8
    10a2:	8e cf       	rjmp	.-228    	; 0xfc0 <sensor_config+0x62>
    10a4:	94 e0       	ldi	r25, 0x04	; 4
    10a6:	8c cf       	rjmp	.-232    	; 0xfc0 <sensor_config+0x62>
    10a8:	80 e2       	ldi	r24, 0x20	; 32
    10aa:	a0 cf       	rjmp	.-192    	; 0xfec <sensor_config+0x8e>
    10ac:	80 e4       	ldi	r24, 0x40	; 64
    10ae:	9e cf       	rjmp	.-196    	; 0xfec <sensor_config+0x8e>
{
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id[0] == 0xff) {  
    if (sja1000p_pre_write_config(&idn_msg))
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 3b 03 	call	0x676	; 0x676 <sja1000p_pre_write_config>
    10b8:	88 23       	and	r24, r24
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <sensor_config+0x162>
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	08 95       	ret
      return -1;
    
    sja1000p_send_msg();
    10c0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sja1000p_send_msg>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret

000010c8 <__vector_19>:

volatile timer timer_msec = 0 , delay_time;

/* Timer 0 interrupt service routine */
ISR(TIMER0_COMP_vect)
{
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
  /* increment msec @1kHz */
    ++timer_msec;
    10da:	80 91 33 01 	lds	r24, 0x0133
    10de:	90 91 34 01 	lds	r25, 0x0134
    10e2:	a0 91 35 01 	lds	r26, 0x0135
    10e6:	b0 91 36 01 	lds	r27, 0x0136
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	a1 1d       	adc	r26, r1
    10ee:	b1 1d       	adc	r27, r1
    10f0:	80 93 33 01 	sts	0x0133, r24
    10f4:	90 93 34 01 	sts	0x0134, r25
    10f8:	a0 93 35 01 	sts	0x0135, r26
    10fc:	b0 93 36 01 	sts	0x0136, r27
}
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <timer0_init_1khz>:



void timer0_init_1khz()
{
  TCNT0 = 0;
    1112:	12 be       	out	0x32, r1	; 50
  OCR0 = 124;     /* OC register init */
    1114:	8c e7       	ldi	r24, 0x7C	; 124
    1116:	8c bf       	out	0x3c, r24	; 60
  TIMSK |= 0x02;  /* interrupt enable when OC */
    1118:	89 b7       	in	r24, 0x39	; 57
    111a:	82 60       	ori	r24, 0x02	; 2
    111c:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= 0x0B;  /* CTC mode, delicka 64x, normal port op. */
    111e:	83 b7       	in	r24, 0x33	; 51
    1120:	8b 60       	ori	r24, 0x0B	; 11
    1122:	83 bf       	out	0x33, r24	; 51
}
    1124:	08 95       	ret

00001126 <delay_ms>:

void delay_ms(unsigned int delay)
{
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
  delay_time = timer_msec;
    112e:	20 91 33 01 	lds	r18, 0x0133
    1132:	30 91 34 01 	lds	r19, 0x0134
    1136:	40 91 35 01 	lds	r20, 0x0135
    113a:	50 91 36 01 	lds	r21, 0x0136
    113e:	20 93 4f 01 	sts	0x014F, r18
    1142:	30 93 50 01 	sts	0x0150, r19
    1146:	40 93 51 01 	sts	0x0151, r20
    114a:	50 93 52 01 	sts	0x0152, r21
    114e:	7c 01       	movw	r14, r24
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
  
  while (timer_msec <= delay_time + delay);
    1154:	80 91 4f 01 	lds	r24, 0x014F
    1158:	90 91 50 01 	lds	r25, 0x0150
    115c:	a0 91 51 01 	lds	r26, 0x0151
    1160:	b0 91 52 01 	lds	r27, 0x0152
    1164:	20 91 33 01 	lds	r18, 0x0133
    1168:	30 91 34 01 	lds	r19, 0x0134
    116c:	40 91 35 01 	lds	r20, 0x0135
    1170:	50 91 36 01 	lds	r21, 0x0136
    1174:	8e 0d       	add	r24, r14
    1176:	9f 1d       	adc	r25, r15
    1178:	a0 1f       	adc	r26, r16
    117a:	b1 1f       	adc	r27, r17
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	a4 07       	cpc	r26, r20
    1182:	b5 07       	cpc	r27, r21
    1184:	38 f7       	brcc	.-50     	; 0x1154 <delay_ms+0x2e>
  
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	08 95       	ret

00001190 <init_fsm>:
/* Functoins for executing FSM */

#include "../include/fsm.h"

void init_fsm(struct fsm *fsm, state_fcn initial_state)
{
    1190:	fc 01       	movw	r30, r24
    1192:	9b 01       	movw	r18, r22
	fsm->current_state = initial_state;
    1194:	71 83       	std	Z+1, r23	; 0x01
    1196:	60 83       	st	Z, r22
	fsm->current_state(fsm, EVENT_ENTRY);
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	f9 01       	movw	r30, r18
    119e:	09 95       	icall
}
    11a0:	08 95       	ret

000011a2 <run_fsm>:

void run_fsm(struct fsm *fsm){
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
	fsm->last_state = fsm->current_state;		// set actual state
    11a8:	e8 81       	ld	r30, Y
    11aa:	f9 81       	ldd	r31, Y+1	; 0x01
    11ac:	fb 83       	std	Y+3, r31	; 0x03
    11ae:	ea 83       	std	Y+2, r30	; 0x02
	fsm->current_state(fsm, EVENT_DO);		// change parameter
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	09 95       	icall
	
	if(fsm->last_state != fsm->current_state){ 	// if state was changed
    11b6:	ea 81       	ldd	r30, Y+2	; 0x02
    11b8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ba:	88 81       	ld	r24, Y
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
    11be:	e8 17       	cp	r30, r24
    11c0:	f9 07       	cpc	r31, r25
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <run_fsm+0x36>
		fsm->last_state(fsm, EVENT_EXIT); 	// finish the old state
    11c4:	ce 01       	movw	r24, r28
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	09 95       	icall
		fsm->current_state(fsm, EVENT_ENTRY); 	// initialize the new state
    11cc:	e8 81       	ld	r30, Y
    11ce:	f9 81       	ldd	r31, Y+1	; 0x01
    11d0:	ce 01       	movw	r24, r28
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	09 95       	icall
	}
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <__mulsi3>:
    11de:	62 9f       	mul	r22, r18
    11e0:	d0 01       	movw	r26, r0
    11e2:	73 9f       	mul	r23, r19
    11e4:	f0 01       	movw	r30, r0
    11e6:	82 9f       	mul	r24, r18
    11e8:	e0 0d       	add	r30, r0
    11ea:	f1 1d       	adc	r31, r1
    11ec:	64 9f       	mul	r22, r20
    11ee:	e0 0d       	add	r30, r0
    11f0:	f1 1d       	adc	r31, r1
    11f2:	92 9f       	mul	r25, r18
    11f4:	f0 0d       	add	r31, r0
    11f6:	83 9f       	mul	r24, r19
    11f8:	f0 0d       	add	r31, r0
    11fa:	74 9f       	mul	r23, r20
    11fc:	f0 0d       	add	r31, r0
    11fe:	65 9f       	mul	r22, r21
    1200:	f0 0d       	add	r31, r0
    1202:	99 27       	eor	r25, r25
    1204:	72 9f       	mul	r23, r18
    1206:	b0 0d       	add	r27, r0
    1208:	e1 1d       	adc	r30, r1
    120a:	f9 1f       	adc	r31, r25
    120c:	63 9f       	mul	r22, r19
    120e:	b0 0d       	add	r27, r0
    1210:	e1 1d       	adc	r30, r1
    1212:	f9 1f       	adc	r31, r25
    1214:	bd 01       	movw	r22, r26
    1216:	cf 01       	movw	r24, r30
    1218:	11 24       	eor	r1, r1
    121a:	08 95       	ret

0000121c <__udivmodhi4>:
    121c:	aa 1b       	sub	r26, r26
    121e:	bb 1b       	sub	r27, r27
    1220:	51 e1       	ldi	r21, 0x11	; 17
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <__udivmodhi4_ep>

00001224 <__udivmodhi4_loop>:
    1224:	aa 1f       	adc	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	a6 17       	cp	r26, r22
    122a:	b7 07       	cpc	r27, r23
    122c:	10 f0       	brcs	.+4      	; 0x1232 <__udivmodhi4_ep>
    122e:	a6 1b       	sub	r26, r22
    1230:	b7 0b       	sbc	r27, r23

00001232 <__udivmodhi4_ep>:
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	5a 95       	dec	r21
    1238:	a9 f7       	brne	.-22     	; 0x1224 <__udivmodhi4_loop>
    123a:	80 95       	com	r24
    123c:	90 95       	com	r25
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	08 95       	ret

00001244 <__udivmodsi4>:
    1244:	a1 e2       	ldi	r26, 0x21	; 33
    1246:	1a 2e       	mov	r1, r26
    1248:	aa 1b       	sub	r26, r26
    124a:	bb 1b       	sub	r27, r27
    124c:	fd 01       	movw	r30, r26
    124e:	0d c0       	rjmp	.+26     	; 0x126a <__udivmodsi4_ep>

00001250 <__udivmodsi4_loop>:
    1250:	aa 1f       	adc	r26, r26
    1252:	bb 1f       	adc	r27, r27
    1254:	ee 1f       	adc	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	a2 17       	cp	r26, r18
    125a:	b3 07       	cpc	r27, r19
    125c:	e4 07       	cpc	r30, r20
    125e:	f5 07       	cpc	r31, r21
    1260:	20 f0       	brcs	.+8      	; 0x126a <__udivmodsi4_ep>
    1262:	a2 1b       	sub	r26, r18
    1264:	b3 0b       	sbc	r27, r19
    1266:	e4 0b       	sbc	r30, r20
    1268:	f5 0b       	sbc	r31, r21

0000126a <__udivmodsi4_ep>:
    126a:	66 1f       	adc	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	1a 94       	dec	r1
    1274:	69 f7       	brne	.-38     	; 0x1250 <__udivmodsi4_loop>
    1276:	60 95       	com	r22
    1278:	70 95       	com	r23
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	9b 01       	movw	r18, r22
    1280:	ac 01       	movw	r20, r24
    1282:	bd 01       	movw	r22, r26
    1284:	cf 01       	movw	r24, r30
    1286:	08 95       	ret

00001288 <ultoa>:
    1288:	fa 01       	movw	r30, r20
    128a:	cf 93       	push	r28
    128c:	ff 93       	push	r31
    128e:	ef 93       	push	r30
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	cc f0       	brlt	.+50     	; 0x12c6 <ultoa+0x3e>
    1294:	25 32       	cpi	r18, 0x25	; 37
    1296:	bc f4       	brge	.+46     	; 0x12c6 <ultoa+0x3e>
    1298:	c2 2f       	mov	r28, r18
    129a:	2c 2f       	mov	r18, r28
    129c:	33 27       	eor	r19, r19
    129e:	44 27       	eor	r20, r20
    12a0:	55 27       	eor	r21, r21
    12a2:	ff 93       	push	r31
    12a4:	ef 93       	push	r30
    12a6:	0e 94 22 09 	call	0x1244	; 0x1244 <__udivmodsi4>
    12aa:	ef 91       	pop	r30
    12ac:	ff 91       	pop	r31
    12ae:	60 5d       	subi	r22, 0xD0	; 208
    12b0:	6a 33       	cpi	r22, 0x3A	; 58
    12b2:	0c f0       	brlt	.+2      	; 0x12b6 <ultoa+0x2e>
    12b4:	69 5d       	subi	r22, 0xD9	; 217
    12b6:	61 93       	st	Z+, r22
    12b8:	b9 01       	movw	r22, r18
    12ba:	ca 01       	movw	r24, r20
    12bc:	60 50       	subi	r22, 0x00	; 0
    12be:	70 40       	sbci	r23, 0x00	; 0
    12c0:	80 40       	sbci	r24, 0x00	; 0
    12c2:	90 40       	sbci	r25, 0x00	; 0
    12c4:	51 f7       	brne	.-44     	; 0x129a <ultoa+0x12>
    12c6:	10 82       	st	Z, r1
    12c8:	8f 91       	pop	r24
    12ca:	9f 91       	pop	r25
    12cc:	cf 91       	pop	r28
    12ce:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <strrev>

000012d2 <strrev>:
    12d2:	dc 01       	movw	r26, r24
    12d4:	fc 01       	movw	r30, r24
    12d6:	67 2f       	mov	r22, r23
    12d8:	71 91       	ld	r23, Z+
    12da:	77 23       	and	r23, r23
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <strrev+0x4>
    12de:	32 97       	sbiw	r30, 0x02	; 2
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <strrev+0x18>
    12e2:	7c 91       	ld	r23, X
    12e4:	6d 93       	st	X+, r22
    12e6:	70 83       	st	Z, r23
    12e8:	62 91       	ld	r22, -Z
    12ea:	ae 17       	cp	r26, r30
    12ec:	bf 07       	cpc	r27, r31
    12ee:	c8 f3       	brcs	.-14     	; 0x12e2 <strrev+0x10>
    12f0:	08 95       	ret

000012f2 <_exit>:
    12f2:	f8 94       	cli

000012f4 <__stop_program>:
    12f4:	ff cf       	rjmp	.-2      	; 0x12f4 <__stop_program>
