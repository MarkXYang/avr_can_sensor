
../build/AVR_CAN_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000151c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  0000151c  000015b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  00800206  00800206  00001756  2**0
                  ALLOC
  3 .stab         00004308  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000217c  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
  }
}

/* MAIN */
int main(void)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
  timer sensor_time = timer_msec;
      9a:	e0 90 4f 02 	lds	r14, 0x024F
      9e:	f0 90 50 02 	lds	r15, 0x0250
      a2:	00 91 51 02 	lds	r16, 0x0251
      a6:	10 91 52 02 	lds	r17, 0x0252
  
  sei();  /* global interrupt enable */
      aa:	78 94       	sei
  
  timer0_init_1khz();
      ac:	0e 94 9c 09 	call	0x1338	; 0x1338 <timer0_init_1khz>
  
  lcd_init(LCD_DISP_ON);
      b0:	8c e0       	ldi	r24, 0x0C	; 12
      b2:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_init>
  
  CANMSG("CAN senzor");
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	60 e6       	ldi	r22, 0x60	; 96
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
      c0:	88 ee       	ldi	r24, 0xE8	; 232
      c2:	93 e0       	ldi	r25, 0x03	; 3
      c4:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
  
  init_fsm(&fsm_sensor,&fsm_sensor_init);
      c8:	83 e5       	ldi	r24, 0x53	; 83
      ca:	92 e0       	ldi	r25, 0x02	; 2
      cc:	67 e6       	ldi	r22, 0x67	; 103
      ce:	77 e0       	ldi	r23, 0x07	; 7
      d0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <init_fsm>
      d4:	a8 01       	movw	r20, r16
      d6:	97 01       	movw	r18, r14
      d8:	2c 59       	subi	r18, 0x9C	; 156
      da:	3f 4f       	sbci	r19, 0xFF	; 255
      dc:	4f 4f       	sbci	r20, 0xFF	; 255
      de:	5f 4f       	sbci	r21, 0xFF	; 255
  
  while(1) {
    
    if (timer_msec >= (sensor_time + 100)) {
      e0:	80 91 4f 02 	lds	r24, 0x024F
      e4:	90 91 50 02 	lds	r25, 0x0250
      e8:	a0 91 51 02 	lds	r26, 0x0251
      ec:	b0 91 52 02 	lds	r27, 0x0252
      f0:	82 17       	cp	r24, r18
      f2:	93 07       	cpc	r25, r19
      f4:	a4 07       	cpc	r26, r20
      f6:	b5 07       	cpc	r27, r21
      f8:	98 f3       	brcs	.-26     	; 0xe0 <main+0x4e>
      sensor_time = timer_msec;
      fa:	e0 90 4f 02 	lds	r14, 0x024F
      fe:	f0 90 50 02 	lds	r15, 0x0250
     102:	00 91 51 02 	lds	r16, 0x0251
     106:	10 91 52 02 	lds	r17, 0x0252
      debug(1,timer_msec);
     10a:	40 91 4f 02 	lds	r20, 0x024F
     10e:	50 91 50 02 	lds	r21, 0x0250
     112:	60 91 51 02 	lds	r22, 0x0251
     116:	70 91 52 02 	lds	r23, 0x0252
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <debug>
      /* run fsm every x ms*/
      run_fsm(&fsm_sensor);
     120:	83 e5       	ldi	r24, 0x53	; 83
     122:	92 e0       	ldi	r25, 0x02	; 2
     124:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <run_fsm>
     128:	d5 cf       	rjmp	.-86     	; 0xd4 <main+0x42>

0000012a <__vector_1>:

struct fsm fsm_sensor;

/* SJA interrupt service routine */
ISR(INT0_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	2f 93       	push	r18
     136:	3f 93       	push	r19
     138:	4f 93       	push	r20
     13a:	5f 93       	push	r21
     13c:	6f 93       	push	r22
     13e:	7f 93       	push	r23
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
     144:	af 93       	push	r26
     146:	bf 93       	push	r27
     148:	ef 93       	push	r30
     14a:	ff 93       	push	r31
  sja1000p_irq_handler(&rx_msg);
     14c:	89 e5       	ldi	r24, 0x59	; 89
     14e:	92 e0       	ldi	r25, 0x02	; 2
     150:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sja1000p_irq_handler>
  
  if (rx_msg.status == NEW) {
     154:	80 91 67 02 	lds	r24, 0x0267
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	89 f0       	breq	.+34     	; 0x17e <__vector_1+0x54>
    rx_msg.status = NONE;
    sensor_config(&rx_msg,&fsm_sensor);
  }
}
     15c:	ff 91       	pop	r31
     15e:	ef 91       	pop	r30
     160:	bf 91       	pop	r27
     162:	af 91       	pop	r26
     164:	9f 91       	pop	r25
     166:	8f 91       	pop	r24
     168:	7f 91       	pop	r23
     16a:	6f 91       	pop	r22
     16c:	5f 91       	pop	r21
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti
ISR(INT0_vect)
{
  sja1000p_irq_handler(&rx_msg);
  
  if (rx_msg.status == NEW) {
    rx_msg.status = NONE;
     17e:	10 92 67 02 	sts	0x0267, r1
    sensor_config(&rx_msg,&fsm_sensor);
     182:	89 e5       	ldi	r24, 0x59	; 89
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	63 e5       	ldi	r22, 0x53	; 83
     188:	72 e0       	ldi	r23, 0x02	; 2
     18a:	0e 94 bf 08 	call	0x117e	; 0x117e <sensor_config>
     18e:	e6 cf       	rjmp	.-52     	; 0x15c <__vector_1+0x32>

00000190 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     190:	66 23       	and	r22, r22
     192:	49 f1       	breq	.+82     	; 0x1e6 <lcd_write+0x56>
       lcd_rs_high();
     194:	c0 9a       	sbi	0x18, 0	; 24
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();
     196:	c1 98       	cbi	0x18, 1	; 24
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     198:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     19a:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     19c:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     19e:	8e 9a       	sbi	0x11, 6	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1a0:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1a2:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1a4:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1a6:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1a8:	87 fd       	sbrc	r24, 7
     1aa:	1f c0       	rjmp	.+62     	; 0x1ea <lcd_write+0x5a>
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ac:	86 fd       	sbrc	r24, 6
     1ae:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1b0:	85 fd       	sbrc	r24, 5
     1b2:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     1b4:	84 fd       	sbrc	r24, 4
     1b6:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1b8:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_write+0x2c>
    lcd_e_low();
     1bc:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     1be:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     1c0:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     1c2:	94 98       	cbi	0x12, 4	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     1c4:	93 98       	cbi	0x12, 3	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1c6:	83 fd       	sbrc	r24, 3
     1c8:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1ca:	82 fd       	sbrc	r24, 2
     1cc:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1ce:	81 fd       	sbrc	r24, 1
     1d0:	94 9a       	sbi	0x12, 4	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1d2:	80 fd       	sbrc	r24, 0
     1d4:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     1d6:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_write+0x4a>
    lcd_e_low();
     1da:	c2 98       	cbi	0x18, 2	; 24
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     1dc:	93 9a       	sbi	0x12, 3	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     1de:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     1e0:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1e2:	96 9a       	sbi	0x12, 6	; 18
    }
}
     1e4:	08 95       	ret


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     1e6:	c0 98       	cbi	0x18, 0	; 24
     1e8:	d6 cf       	rjmp	.-84     	; 0x196 <lcd_write+0x6>
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     1ea:	96 9a       	sbi	0x12, 6	; 18
     1ec:	df cf       	rjmp	.-66     	; 0x1ac <lcd_write+0x1c>

000001ee <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     1ee:	88 23       	and	r24, r24
     1f0:	09 f1       	breq	.+66     	; 0x234 <lcd_read+0x46>
        lcd_rs_high();                       /* RS=1: read data      */
     1f2:	c0 9a       	sbi	0x18, 0	; 24
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    lcd_rw_high();                           /* RW=1  read mode      */
     1f4:	c1 9a       	sbi	0x18, 1	; 24
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     1f6:	8b 98       	cbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     1f8:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     1fa:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     1fc:	8e 98       	cbi	0x11, 6	; 17
                
        /* read high nibble first */
        lcd_e_high();
     1fe:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
     200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_read+0x14>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     202:	83 9b       	sbis	0x10, 3	; 16
     204:	15 c0       	rjmp	.+42     	; 0x230 <lcd_read+0x42>
     206:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     208:	84 99       	sbic	0x10, 4	; 16
     20a:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     20c:	85 99       	sbic	0x10, 5	; 16
     20e:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     210:	86 99       	sbic	0x10, 6	; 16
     212:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     214:	c2 98       	cbi	0x18, 2	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
     216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_read+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     218:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
     21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_read+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     21c:	83 99       	sbic	0x10, 3	; 16
     21e:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     220:	84 99       	sbic	0x10, 4	; 16
     222:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     224:	85 99       	sbic	0x10, 5	; 16
     226:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     228:	86 99       	sbic	0x10, 6	; 16
     22a:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     22c:	c2 98       	cbi	0x18, 2	; 24
    }
    return data;
}
     22e:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	ea cf       	rjmp	.-44     	; 0x208 <lcd_read+0x1a>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     234:	c0 98       	cbi	0x18, 0	; 24
     236:	de cf       	rjmp	.-68     	; 0x1f4 <lcd_read+0x6>

00000238 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_read>
     23e:	87 fd       	sbrc	r24, 7
     240:	fb cf       	rjmp	.-10     	; 0x238 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_read>
    
}/* lcd_waitbusy */
     250:	08 95       	ret

00000252 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     252:	1f 93       	push	r17
     254:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     256:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_waitbusy>
    lcd_write(cmd,0);
     25a:	81 2f       	mov	r24, r17
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_write>
}
     262:	1f 91       	pop	r17
     264:	08 95       	ret

00000266 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     266:	1f 93       	push	r17
     268:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     26a:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_waitbusy>
    lcd_write(data,1);
     26e:	81 2f       	mov	r24, r17
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_write>
}
     276:	1f 91       	pop	r17
     278:	08 95       	ret

0000027a <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     27a:	66 23       	and	r22, r22
     27c:	21 f0       	breq	.+8      	; 0x286 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     27e:	80 54       	subi	r24, 0x40	; 64
     280:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
     284:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     286:	80 58       	subi	r24, 0x80	; 128
     288:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
     28c:	08 95       	ret

0000028e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     28e:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_waitbusy>
}
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret

00000296 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
}
     29c:	08 95       	ret

0000029e <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
}
     2a4:	08 95       	ret

000002a6 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     2a6:	1f 93       	push	r17
     2a8:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     2aa:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_waitbusy>
    if (c=='\n')
     2ae:	1a 30       	cpi	r17, 0x0A	; 10
     2b0:	39 f4       	brne	.+14     	; 0x2c0 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2b2:	80 34       	cpi	r24, 0x40	; 64
     2b4:	58 f0       	brcs	.+22     	; 0x2cc <lcd_putc+0x26>
     2b6:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     2b8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     2bc:	1f 91       	pop	r17
     2be:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     2c0:	81 2f       	mov	r24, r17
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_write>
    }

}/* lcd_putc */
     2c8:	1f 91       	pop	r17
     2ca:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2cc:	80 ec       	ldi	r24, 0xC0	; 192
     2ce:	f4 cf       	rjmp	.-24     	; 0x2b8 <lcd_putc+0x12>

000002d0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
     2d6:	80 81       	ld	r24, Z
     2d8:	88 23       	and	r24, r24
     2da:	39 f0       	breq	.+14     	; 0x2ea <lcd_puts+0x1a>
     2dc:	ef 01       	movw	r28, r30
        lcd_putc(c);
     2de:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	21 96       	adiw	r28, 0x01	; 1
     2e6:	88 23       	and	r24, r24
     2e8:	d1 f7       	brne	.-12     	; 0x2de <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     2f6:	84 91       	lpm	r24, Z+
     2f8:	88 23       	and	r24, r24
     2fa:	49 f0       	breq	.+18     	; 0x30e <lcd_puts_p+0x1e>
     2fc:	ef 01       	movw	r28, r30
     2fe:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     300:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_putc>
     304:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	84 91       	lpm	r24, Z+
     30a:	88 23       	and	r24, r24
     30c:	c9 f7       	brne	.-14     	; 0x300 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     314:	1f 93       	push	r17
     316:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     318:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     31a:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     31c:	ba 9a       	sbi	0x17, 2	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     31e:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     320:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     322:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     324:	8e 9a       	sbi	0x11, 6	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	9d e7       	ldi	r25, 0x7D	; 125
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     32e:	94 9a       	sbi	0x12, 4	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     330:	93 9a       	sbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     332:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_init+0x22>
    lcd_e_low();
     336:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	97 e2       	ldi	r25, 0x27	; 39
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     340:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_init+0x30>
    lcd_e_low();
     344:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     346:	80 e8       	ldi	r24, 0x80	; 128
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	fc 01       	movw	r30, r24
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     350:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_init+0x40>
    lcd_e_low();
     354:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     356:	fc 01       	movw	r30, r24
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     35c:	93 98       	cbi	0x12, 3	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     35e:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
     360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init+0x4e>
    lcd_e_low();
     362:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     368:	88 e2       	ldi	r24, 0x28	; 40
     36a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     374:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     378:	86 e0       	ldi	r24, 0x06	; 6
     37a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     37e:	81 2f       	mov	r24, r17
     380:	0e 94 29 01 	call	0x252	; 0x252 <lcd_command>

}/* lcd_init */
     384:	1f 91       	pop	r17
     386:	08 95       	ret

00000388 <lcd_clear_line>:
    lcd_puts(string);
}

/* Clear line specified by line_nr */
void lcd_clear_line(unsigned char line_nr)
{
     388:	1f 93       	push	r17
     38a:	68 2f       	mov	r22, r24
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_gotoxy>
     392:	10 e0       	ldi	r17, 0x00	; 0
  
  for (;i < LCD_DISP_LENGTH; i++) {
    lcd_puts(" ");
     394:	8b e6       	ldi	r24, 0x6B	; 107
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_puts>
{
  unsigned char i = 0;
  
  lcd_gotoxy(0,line_nr);
  
  for (;i < LCD_DISP_LENGTH; i++) {
     39c:	1f 5f       	subi	r17, 0xFF	; 255
     39e:	10 31       	cpi	r17, 0x10	; 16
     3a0:	c9 f7       	brne	.-14     	; 0x394 <lcd_clear_line+0xc>
    lcd_puts(" ");
  }
}
     3a2:	1f 91       	pop	r17
     3a4:	08 95       	ret

000003a6 <lcd_puts_line>:
#include "../include/display.h"
#include <stdlib.h>

/* Print string parameter to line specified by line_nr */
void lcd_puts_line(unsigned char line_nr,const char *string)
{
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	f8 2e       	mov	r15, r24
     3ae:	8b 01       	movw	r16, r22
    lcd_clear_line(line_nr);
     3b0:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_clear_line>
    lcd_gotoxy(0,line_nr);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	6f 2d       	mov	r22, r15
     3b8:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_gotoxy>
    lcd_puts(string);
     3bc:	c8 01       	movw	r24, r16
     3be:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lcd_puts>
}
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	08 95       	ret

000003ca <debug>:
    lcd_puts(" ");
  }
}

void debug(unsigned char line_nr,unsigned long num)
{
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	1f 93       	push	r17
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	2b 97       	sbiw	r28, 0x0b	; 11
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	18 2f       	mov	r17, r24
  char string[11];
  
  ultoa(num,string,10);
     3e6:	cb 01       	movw	r24, r22
     3e8:	ba 01       	movw	r22, r20
     3ea:	7e 01       	movw	r14, r28
     3ec:	08 94       	sec
     3ee:	e1 1c       	adc	r14, r1
     3f0:	f1 1c       	adc	r15, r1
     3f2:	a7 01       	movw	r20, r14
     3f4:	2a e0       	ldi	r18, 0x0A	; 10
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <ultoa>
  
  lcd_puts_line(line_nr,string);
     3fc:	81 2f       	mov	r24, r17
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
}
     404:	2b 96       	adiw	r28, 0x0b	; 11
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	cf 91       	pop	r28
     412:	df 91       	pop	r29
     414:	1f 91       	pop	r17
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	08 95       	ret

0000041c <sja_init_ports>:
#define sja_disable_irq GICR &= ~(1 << SJA_INT_BIT) /* AVR interrupt from SJA disabled */
#define sja_enable_irq  GICR |= (1 << SJA_INT_BIT)  /* AVR interrupt from SJA enabled */

void sja_init_ports()
{
  sja_bus_out;
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	84 bb       	out	0x14, r24	; 20
  sja_ctrl_out;
     420:	8a b3       	in	r24, 0x1a	; 26
     422:	80 6f       	ori	r24, 0xF0	; 240
     424:	8a bb       	out	0x1a, r24	; 26
  sja_int_init;
     426:	8a 98       	cbi	0x11, 2	; 17
     428:	92 9a       	sbi	0x12, 2	; 18
     42a:	85 b7       	in	r24, 0x35	; 53
     42c:	85 bf       	out	0x35, r24	; 53
  sja_enable_irq;
     42e:	8b b7       	in	r24, 0x3b	; 59
     430:	80 64       	ori	r24, 0x40	; 64
     432:	8b bf       	out	0x3b, r24	; 59
}
     434:	08 95       	ret

00000436 <can_read_reg>:

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     436:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     438:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     43a:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     43c:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     43e:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	94 bb       	out	0x14, r25	; 20
     444:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	28 2f       	mov	r18, r24
     44a:	2a 95       	dec	r18
     44c:	f1 f7       	brne	.-4      	; 0x44a <can_read_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     44e:	df 98       	cbi	0x1b, 7	; 27
     450:	28 2f       	mov	r18, r24
     452:	2a 95       	dec	r18
     454:	f1 f7       	brne	.-4      	; 0x452 <can_read_reg+0x1c>
static unsigned char sja_read_register(unsigned char address)
{
  unsigned char data;
  
  sja_write_address(address);
  sja_cs_low;
     456:	de 98       	cbi	0x1b, 6	; 27
  sja_rd_low;
     458:	dd 98       	cbi	0x1b, 5	; 27
  sja_bus_in;
     45a:	95 bb       	out	0x15, r25	; 21
     45c:	14 ba       	out	0x14, r1	; 20
     45e:	8a 95       	dec	r24
     460:	f1 f7       	brne	.-4      	; 0x45e <can_read_reg+0x28>
  _delay_us(1);
  data = SJA_BUS_DATA;
     462:	83 b3       	in	r24, 0x13	; 19
  sja_rd_high;
     464:	dd 9a       	sbi	0x1b, 5	; 27
  sja_cs_high;
     466:	de 9a       	sbi	0x1b, 6	; 27
}

unsigned char can_read_reg(unsigned char address)
{ 
  return sja_read_register(address);
}
     468:	08 95       	ret

0000046a <can_write_reg>:
  sja_enable_irq;
}

static void sja_write_address(unsigned char address)
{
  sja_ale_low;
     46a:	df 98       	cbi	0x1b, 7	; 27
  sja_rd_high;
     46c:	dd 9a       	sbi	0x1b, 5	; 27
  sja_wr_high;
     46e:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     470:	de 9a       	sbi	0x1b, 6	; 27
  sja_ale_high;
     472:	df 9a       	sbi	0x1b, 7	; 27
  sja_bus_write(address);
     474:	2f ef       	ldi	r18, 0xFF	; 255
     476:	24 bb       	out	0x14, r18	; 20
     478:	65 bb       	out	0x15, r22	; 21
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	39 2f       	mov	r19, r25
     47e:	3a 95       	dec	r19
     480:	f1 f7       	brne	.-4      	; 0x47e <can_write_reg+0x14>
  _delay_us(1);
  sja_ale_low;
     482:	df 98       	cbi	0x1b, 7	; 27
     484:	39 2f       	mov	r19, r25
     486:	3a 95       	dec	r19
     488:	f1 f7       	brne	.-4      	; 0x486 <can_write_reg+0x1c>
}

static void sja_write_register(unsigned char data,unsigned char address)
{
  sja_write_address(address);
  sja_cs_low;
     48a:	de 98       	cbi	0x1b, 6	; 27
  sja_wr_low;
     48c:	dc 98       	cbi	0x1b, 4	; 27
  sja_bus_write(data);
     48e:	24 bb       	out	0x14, r18	; 20
     490:	85 bb       	out	0x15, r24	; 21
     492:	89 2f       	mov	r24, r25
     494:	8a 95       	dec	r24
     496:	f1 f7       	brne	.-4      	; 0x494 <can_write_reg+0x2a>
  _delay_us(1);
  sja_wr_high;
     498:	dc 9a       	sbi	0x1b, 4	; 27
  sja_cs_high;
     49a:	de 9a       	sbi	0x1b, 6	; 27
     49c:	9a 95       	dec	r25
     49e:	f1 f7       	brne	.-4      	; 0x49c <can_write_reg+0x32>
}

void can_write_reg(unsigned char data,unsigned char address)
{
  sja_write_register(data,address);
}
     4a0:	08 95       	ret

000004a2 <can_enable_irq>:

void can_enable_irq()
{
  sja_enable_irq;
     4a2:	8b b7       	in	r24, 0x3b	; 59
     4a4:	80 64       	ori	r24, 0x40	; 64
     4a6:	8b bf       	out	0x3b, r24	; 59
}
     4a8:	08 95       	ret

000004aa <can_disable_irq>:

void can_disable_irq()
{
  sja_disable_irq;
     4aa:	8b b7       	in	r24, 0x3b	; 59
     4ac:	8f 7b       	andi	r24, 0xBF	; 191
     4ae:	8b bf       	out	0x3b, r24	; 59
}
     4b0:	08 95       	ret

000004b2 <sja1000p_send_msg>:
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_send_msg()
{
  can_write_reg(sjaCMR_TR, SJACMR);
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

  return 0;
}
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret

000004be <sja1000p_read>:
 * @chip: pointer to chip state structure
 * @obj: pinter to CAN message queue information
 *
 * File: src/sja1000p.c
 */
void sja1000p_read(struct canmsg_t *rx_msg) {
     4be:	6f 92       	push	r6
     4c0:	7f 92       	push	r7
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	3c 01       	movw	r6, r24

  unsigned char i, flags, len;
  unsigned long pom;

  flags = can_read_reg(SJAFRM);
     4dc:	80 e1       	ldi	r24, 0x10	; 16
     4de:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     4e2:	98 2e       	mov	r9, r24

  pom = (can_read_reg(SJAID0)<<10);
     4e4:	81 e1       	ldi	r24, 0x11	; 17
     4e6:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     4ea:	b8 2e       	mov	r11, r24
     4ec:	bb 0c       	add	r11, r11
     4ee:	bb 0c       	add	r11, r11
     4f0:	aa 24       	eor	r10, r10
     4f2:	cc 24       	eor	r12, r12
     4f4:	b7 fc       	sbrc	r11, 7
     4f6:	c0 94       	com	r12
     4f8:	dc 2c       	mov	r13, r12
  pom = pom<<11;
  
  rx_msg->id =
     4fa:	82 e1       	ldi	r24, 0x12	; 18
     4fc:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     500:	88 2e       	mov	r8, r24
     502:	83 e1       	ldi	r24, 0x13	; 19
     504:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     508:	e8 2e       	mov	r14, r24
     50a:	84 e1       	ldi	r24, 0x14	; 20
     50c:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     510:	38 2d       	mov	r19, r8
     512:	32 95       	swap	r19
     514:	33 0f       	add	r19, r19
     516:	30 7e       	andi	r19, 0xE0	; 224
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	44 27       	eor	r20, r20
     51c:	37 fd       	sbrc	r19, 7
     51e:	40 95       	com	r20
     520:	54 2f       	mov	r21, r20
     522:	ff 24       	eor	r15, r15
     524:	ee 0c       	add	r14, r14
     526:	ff 1c       	adc	r15, r15
     528:	e2 94       	swap	r14
     52a:	f2 94       	swap	r15
     52c:	70 ef       	ldi	r23, 0xF0	; 240
     52e:	f7 22       	and	r15, r23
     530:	fe 24       	eor	r15, r14
     532:	e7 22       	and	r14, r23
     534:	fe 24       	eor	r15, r14
     536:	00 27       	eor	r16, r16
     538:	f7 fc       	sbrc	r15, 7
     53a:	00 95       	com	r16
     53c:	10 2f       	mov	r17, r16
     53e:	2e 0d       	add	r18, r14
     540:	3f 1d       	adc	r19, r15
     542:	40 1f       	adc	r20, r16
     544:	51 1f       	adc	r21, r17
     546:	86 95       	lsr	r24
     548:	86 95       	lsr	r24
     54a:	86 95       	lsr	r24
     54c:	28 0f       	add	r18, r24
     54e:	31 1d       	adc	r19, r1
     550:	41 1d       	adc	r20, r1
     552:	51 1d       	adc	r21, r1
     554:	6b e0       	ldi	r22, 0x0B	; 11
     556:	aa 0c       	add	r10, r10
     558:	bb 1c       	adc	r11, r11
     55a:	cc 1c       	adc	r12, r12
     55c:	dd 1c       	adc	r13, r13
     55e:	6a 95       	dec	r22
     560:	d1 f7       	brne	.-12     	; 0x556 <sja1000p_read+0x98>
     562:	2a 0d       	add	r18, r10
     564:	3b 1d       	adc	r19, r11
     566:	4c 1d       	adc	r20, r12
     568:	5d 1d       	adc	r21, r13
     56a:	f3 01       	movw	r30, r6
     56c:	21 83       	std	Z+1, r18	; 0x01
     56e:	32 83       	std	Z+2, r19	; 0x02
     570:	43 83       	std	Z+3, r20	; 0x03
     572:	54 83       	std	Z+4, r21	; 0x04
    pom +
    (can_read_reg(SJAID1)<<13) +
    (can_read_reg(SJAID2)<<5) +
    (can_read_reg(SJAID3)>>3);
  
  rx_msg->flags =
     574:	29 2d       	mov	r18, r9
     576:	22 1f       	adc	r18, r18
     578:	22 27       	eor	r18, r18
     57a:	22 1f       	adc	r18, r18
     57c:	22 0f       	add	r18, r18
     57e:	22 0f       	add	r18, r18
     580:	89 2d       	mov	r24, r9
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	00 24       	eor	r0, r0
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	00 1c       	adc	r0, r0
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	00 1c       	adc	r0, r0
     592:	89 2f       	mov	r24, r25
     594:	90 2d       	mov	r25, r0
     596:	81 70       	andi	r24, 0x01	; 1
     598:	28 2b       	or	r18, r24
     59a:	20 83       	st	Z, r18
    ((flags & sjaFRM_RTR) ? MSG_RTR : 0) |
    ((flags & sjaFRM_FF) ? MSG_EXT : 0);
  
  len = flags & sjaFRM_DLC_M;
     59c:	ff e0       	ldi	r31, 0x0F	; 15
     59e:	9f 22       	and	r9, r31
  
  rx_msg->length = len;
     5a0:	f3 01       	movw	r30, r6
     5a2:	95 82       	std	Z+5, r9	; 0x05
     5a4:	09 2d       	mov	r16, r9
     5a6:	09 30       	cpi	r16, 0x09	; 9
     5a8:	10 f1       	brcs	.+68     	; 0x5ee <sja1000p_read+0x130>
     5aa:	08 e0       	ldi	r16, 0x08	; 8
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     5ac:	e3 01       	movw	r28, r6
     5ae:	10 e0       	ldi	r17, 0x00	; 0
    rx_msg->data[i] = can_read_reg(SJADATE+i);
     5b0:	81 2f       	mov	r24, r17
     5b2:	8b 5e       	subi	r24, 0xEB	; 235
     5b4:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     5b8:	8e 83       	std	Y+6, r24	; 0x06
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     5ba:	1f 5f       	subi	r17, 0xFF	; 255
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	10 17       	cp	r17, r16
     5c0:	b8 f3       	brcs	.-18     	; 0x5b0 <sja1000p_read+0xf2>
    rx_msg->data[i] = can_read_reg(SJADATE+i);
  }
  
  rx_msg->status = NEW;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	f3 01       	movw	r30, r6
     5c6:	86 87       	std	Z+14, r24	; 0x0e

  can_write_reg(sjaCMR_RRB, SJACMR);
     5c8:	84 e0       	ldi	r24, 0x04	; 4
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	8f 90       	pop	r8
     5e8:	7f 90       	pop	r7
     5ea:	6f 90       	pop	r6
     5ec:	08 95       	ret
  rx_msg->length = len;
  
  if(len > CAN_MSG_LENGTH)
    len = CAN_MSG_LENGTH;
  
  for(i = 0; i < len; i++) {
     5ee:	99 20       	and	r9, r9
     5f0:	e9 f6       	brne	.-70     	; 0x5ac <sja1000p_read+0xee>
     5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <sja1000p_read+0x104>

000005f4 <sja1000p_irq_handler>:
 * CAN controller chip and distribution of message through attached
 * message queues.
 * File: src/sja1000p.c
 */
char sja1000p_irq_handler(struct canmsg_t *rx_msg)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
  unsigned char irq_register, status;

  irq_register = can_read_reg(SJAIR);  
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     604:	18 2f       	mov	r17, r24

  if ((irq_register & (sjaIR_BEI|sjaIR_EPI|sjaIR_DOI|sjaIR_EI|sjaIR_TI|sjaIR_RI)) == 0) {
     606:	8f 7a       	andi	r24, 0xAF	; 175
     608:	a1 f4       	brne	.+40     	; 0x632 <sja1000p_irq_handler+0x3e>
#ifdef DEBUG
     lcd_puts_line(0,"SJA none int flg");
     60a:	6d e6       	ldi	r22, 0x6D	; 109
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     612:	20 e1       	ldi	r18, 0x10	; 16
     614:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     616:	48 ec       	ldi	r20, 0xC8	; 200
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	ca 01       	movw	r24, r20
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <sja1000p_irq_handler+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     620:	21 50       	subi	r18, 0x01	; 1
     622:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     624:	d1 f7       	brne	.-12     	; 0x61a <sja1000p_irq_handler+0x26>
     626:	80 e0       	ldi	r24, 0x00	; 0
      can_write_reg(0, SJAMOD);
    }
  }

  return 1;
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	08 95       	ret
     _delay_ms(1000);
 #endif
    return 0;
  }

  status = can_read_reg(SJASR);
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     638:	08 2f       	mov	r16, r24

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
     63a:	80 fd       	sbrc	r24, 0
     63c:	0a c0       	rjmp	.+20     	; 0x652 <sja1000p_irq_handler+0x5e>
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     63e:	1c 7a       	andi	r17, 0xAC	; 172
     640:	11 f0       	breq	.+4      	; 0x646 <sja1000p_irq_handler+0x52>
    // Some error happened
    
    if(status & sjaSR_BS) {
     642:	07 fd       	sbrc	r16, 7
     644:	1b c0       	rjmp	.+54     	; 0x67c <sja1000p_irq_handler+0x88>
      lcd_puts_line(0,"SJA bus-off");
      _delay_ms(1000);
      lcd_puts_line(0,"SJA resetting..");
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     646:	81 e0       	ldi	r24, 0x01	; 1
    }
  }

  return 1;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

  /* (irq_register & sjaIR_RI) */
  /*  old variant using SJAIR, collides with intended use with irq_accept */
  if (status & sjaSR_RBS) {
#ifdef DEBUG
    lcd_puts_line(0,"SJA IRQ RI, RBS");
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	6e e7       	ldi	r22, 0x7E	; 126
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     65c:	20 e1       	ldi	r18, 0x10	; 16
     65e:	37 e2       	ldi	r19, 0x27	; 39
     660:	48 ec       	ldi	r20, 0xC8	; 200
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	ca 01       	movw	r24, r20
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <sja1000p_irq_handler+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     66a:	21 50       	subi	r18, 0x01	; 1
     66c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66e:	d1 f7       	brne	.-12     	; 0x664 <sja1000p_irq_handler+0x70>
    _delay_ms(1000);
#endif
    sja1000p_read(rx_msg);
     670:	ce 01       	movw	r24, r28
     672:	0e 94 5f 02 	call	0x4be	; 0x4be <sja1000p_read>
  }
  
  if ((irq_register & (sjaIR_EI|sjaIR_BEI|sjaIR_EPI|sjaIR_DOI)) != 0) { 
     676:	1c 7a       	andi	r17, 0xAC	; 172
     678:	21 f7       	brne	.-56     	; 0x642 <sja1000p_irq_handler+0x4e>
     67a:	e5 cf       	rjmp	.-54     	; 0x646 <sja1000p_irq_handler+0x52>
    // Some error happened
    
    if(status & sjaSR_BS) {
#ifdef DEBUG
      lcd_puts_line(0,"SJA bus-off");
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	6e e8       	ldi	r22, 0x8E	; 142
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     686:	20 e1       	ldi	r18, 0x10	; 16
     688:	37 e2       	ldi	r19, 0x27	; 39
     68a:	48 ec       	ldi	r20, 0xC8	; 200
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	ca 01       	movw	r24, r20
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <sja1000p_irq_handler+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     694:	21 50       	subi	r18, 0x01	; 1
     696:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     698:	d1 f7       	brne	.-12     	; 0x68e <sja1000p_irq_handler+0x9a>
      _delay_ms(1000);
      lcd_puts_line(0,"SJA resetting..");
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	6a e9       	ldi	r22, 0x9A	; 154
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     6a4:	20 e1       	ldi	r18, 0x10	; 16
     6a6:	37 e2       	ldi	r19, 0x27	; 39
     6a8:	48 ec       	ldi	r20, 0xC8	; 200
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	ca 01       	movw	r24, r20
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <sja1000p_irq_handler+0xba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	21 50       	subi	r18, 0x01	; 1
     6b4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <sja1000p_irq_handler+0xb8>
      _delay_ms(1000);
#endif
      can_write_reg(0, SJAMOD);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	b2 cf       	rjmp	.-156    	; 0x628 <sja1000p_irq_handler+0x34>

000006c4 <sja1000p_disable_configuration>:
/**
 * sja1000p_disable_configuration - disable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_disable_configuration()
{
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     6d0:	80 ff       	sbrs	r24, 0
     6d2:	15 c0       	rjmp	.+42     	; 0x6fe <sja1000p_disable_configuration+0x3a>
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	c8 ec       	ldi	r28, 0xC8	; 200
     6d8:	d0 e0       	ldi	r29, 0x00	; 0
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <sja1000p_disable_configuration+0x1c>
     6dc:	13 33       	cpi	r17, 0x33	; 51
     6de:	b1 f0       	breq	.+44     	; 0x70c <sja1000p_disable_configuration+0x48>
// could be as long as 11*128 bit times after buss-off
    can_write_reg(0, SJAMOD);
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <sja1000p_disable_configuration+0x26>
    _delay_us(100);
    i++;
     6ee:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  flags = can_read_reg(SJAMOD);

  while ( (flags & sjaMOD_RM) && (i<=50) ) {
     6f6:	80 fd       	sbrc	r24, 0
     6f8:	f1 cf       	rjmp	.-30     	; 0x6dc <sja1000p_disable_configuration+0x18>
    can_write_reg(0, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     6fa:	1a 30       	cpi	r17, 0x0A	; 10
     6fc:	38 f4       	brcc	.+14     	; 0x70c <sja1000p_disable_configuration+0x48>
    CANMSG("SJA err exit rst");
#endif
    return -1;
  }

  can_enable_irq();
     6fe:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_enable_irq>
     702:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	08 95       	ret
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("SJA err exit rst");
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	6a ea       	ldi	r22, 0xAA	; 170
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     716:	88 ee       	ldi	r24, 0xE8	; 232
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	f1 cf       	rjmp	.-30     	; 0x704 <sja1000p_disable_configuration+0x40>

00000722 <sja1000p_enable_configuration>:
/**
 * sja1000p_enable_configuration - enable chip configuration mode
 * @chip: pointer to chip state structure
 */
char sja1000p_enable_configuration()
{
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
  unsigned char i = 0;
  enum sja1000_PeliCAN_MOD flags;

  can_disable_irq();
     728:	0e 94 55 02 	call	0x4aa	; 0x4aa <can_disable_irq>

  flags = can_read_reg(SJAMOD);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     732:	80 fd       	sbrc	r24, 0
     734:	21 c0       	rjmp	.+66     	; 0x778 <sja1000p_enable_configuration+0x56>
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	c8 ec       	ldi	r28, 0xC8	; 200
     73a:	d0 e0       	ldi	r29, 0x00	; 0
    can_write_reg(sjaMOD_RM, SJAMOD);
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
     744:	ce 01       	movw	r24, r28
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <sja1000p_enable_configuration+0x24>
    _delay_us(100);
    i++;
     74a:	1f 5f       	subi	r17, 0xFF	; 255
    flags = can_read_reg(SJAMOD);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>

  can_disable_irq();

  flags = can_read_reg(SJAMOD);

  while ((!(flags & sjaMOD_RM)) && (i <= 10)) {
     752:	80 fd       	sbrc	r24, 0
     754:	0f c0       	rjmp	.+30     	; 0x774 <sja1000p_enable_configuration+0x52>
     756:	1b 30       	cpi	r17, 0x0B	; 11
     758:	89 f7       	brne	.-30     	; 0x73c <sja1000p_enable_configuration+0x1a>
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
#ifdef DEBUG
    CANMSG("SJA rst mode err");
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	6b eb       	ldi	r22, 0xBB	; 187
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     764:	88 ee       	ldi	r24, 0xE8	; 232
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#endif
    can_enable_irq();
     76c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_enable_irq>
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	0c c0       	rjmp	.+24     	; 0x78c <sja1000p_enable_configuration+0x6a>
    can_write_reg(sjaMOD_RM, SJAMOD);
    _delay_us(100);
    i++;
    flags = can_read_reg(SJAMOD);
  }
  if (i >= 10) {
     774:	1a 30       	cpi	r17, 0x0A	; 10
     776:	88 f7       	brcc	.-30     	; 0x75a <sja1000p_enable_configuration+0x38>
#endif
    can_enable_irq();
    return -1;
  }
#ifdef DEBUG
  CANMSG("SJA rst mode OK");
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	6c ec       	ldi	r22, 0xCC	; 204
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     782:	88 ee       	ldi	r24, 0xE8	; 232
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     78a:	80 e0       	ldi	r24, 0x00	; 0
#endif
  return 0;
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	08 95       	ret

00000794 <sja1000p_pre_write_config>:
 * into chip buffer in this function.
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_pre_write_config(struct canmsg_t *msg)
{
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
     7a4:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7a6:	0a e1       	ldi	r16, 0x1A	; 26
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <sja1000p_pre_write_config+0x1e>
  unsigned long id;
  unsigned char status;
  unsigned char len;

  /* Wait until Transmit Buffer Status is released */
  while ( !((status = can_read_reg(SJASR)) & sjaSR_TBS) && 
     7aa:	1f 5f       	subi	r17, 0xFF	; 255
     7ac:	80 2f       	mov	r24, r16
     7ae:	8a 95       	dec	r24
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <sja1000p_pre_write_config+0x1a>
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     7b8:	82 fd       	sbrc	r24, 2
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <sja1000p_pre_write_config+0x2c>
     7bc:	1a 30       	cpi	r17, 0x0A	; 10
     7be:	a9 f7       	brne	.-22     	; 0x7aa <sja1000p_pre_write_config+0x16>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
    _delay_us(10);
  }
  
  if(status & sjaSR_BS) {
     7c0:	87 fd       	sbrc	r24, 7
     7c2:	8d c0       	rjmp	.+282    	; 0x8de <sja1000p_pre_write_config+0x14a>
    can_write_reg(0, SJATXERR1);
    can_read_reg(SJAECC);
    sja1000p_disable_configuration();
  }
  
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     7ca:	82 ff       	sbrs	r24, 2
     7cc:	54 c0       	rjmp	.+168    	; 0x876 <sja1000p_pre_write_config+0xe2>
      CANMSG("Reset SJA chip!");
#endif
      return -1;
    }
  }
  len = msg->length;
     7ce:	dd 80       	ldd	r13, Y+5	; 0x05
     7d0:	88 e0       	ldi	r24, 0x08	; 8
     7d2:	8d 15       	cp	r24, r13
     7d4:	08 f4       	brcc	.+2      	; 0x7d8 <sja1000p_pre_write_config+0x44>
     7d6:	4c c0       	rjmp	.+152    	; 0x870 <sja1000p_pre_write_config+0xdc>
  if(len > CAN_MSG_LENGTH) len = CAN_MSG_LENGTH;
  
  /* len &= sjaFRM_DLC_M; ensured by above condition already */
  can_write_reg(sjaFRM_FF |len, SJAFRM);
     7d8:	8d 2d       	mov	r24, r13
     7da:	80 68       	ori	r24, 0x80	; 128
     7dc:	60 e1       	ldi	r22, 0x10	; 16
     7de:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  
  id = msg->id<<3;
     7e2:	e9 80       	ldd	r14, Y+1	; 0x01
     7e4:	fa 80       	ldd	r15, Y+2	; 0x02
     7e6:	0b 81       	ldd	r16, Y+3	; 0x03
     7e8:	1c 81       	ldd	r17, Y+4	; 0x04
     7ea:	ee 0c       	add	r14, r14
     7ec:	ff 1c       	adc	r15, r15
     7ee:	00 1f       	adc	r16, r16
     7f0:	11 1f       	adc	r17, r17
     7f2:	ee 0c       	add	r14, r14
     7f4:	ff 1c       	adc	r15, r15
     7f6:	00 1f       	adc	r16, r16
     7f8:	11 1f       	adc	r17, r17
     7fa:	ee 0c       	add	r14, r14
     7fc:	ff 1c       	adc	r15, r15
     7fe:	00 1f       	adc	r16, r16
     800:	11 1f       	adc	r17, r17
  can_write_reg(id & 0xff, SJAID3);
     802:	8e 2d       	mov	r24, r14
     804:	64 e1       	ldi	r22, 0x14	; 20
     806:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  id >>= 8;
     80a:	bb 27       	eor	r27, r27
     80c:	a1 2f       	mov	r26, r17
     80e:	90 2f       	mov	r25, r16
     810:	8f 2d       	mov	r24, r15
  can_write_reg(id & 0xff, SJAID2);
     812:	63 e1       	ldi	r22, 0x13	; 19
     814:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  id >>= 8;
     818:	c8 01       	movw	r24, r16
     81a:	aa 27       	eor	r26, r26
     81c:	bb 27       	eor	r27, r27
  can_write_reg(id & 0xff, SJAID1);
     81e:	62 e1       	ldi	r22, 0x12	; 18
     820:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  id >>= 8;
  can_write_reg(id, SJAID0);
     824:	e1 2e       	mov	r14, r17
     826:	ff 24       	eor	r15, r15
     828:	00 27       	eor	r16, r16
     82a:	11 27       	eor	r17, r17
     82c:	8e 2d       	mov	r24, r14
     82e:	61 e1       	ldi	r22, 0x11	; 17
     830:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  
  for(i=0; i < len; i++) {
     834:	dd 20       	and	r13, r13
     836:	51 f0       	breq	.+20     	; 0x84c <sja1000p_pre_write_config+0xb8>
     838:	10 e0       	ldi	r17, 0x00	; 0
    can_write_reg(msg->data[i], SJADATE+i);
     83a:	1b 5e       	subi	r17, 0xEB	; 235
     83c:	8e 81       	ldd	r24, Y+6	; 0x06
     83e:	61 2f       	mov	r22, r17
     840:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  id >>= 8;
  can_write_reg(id & 0xff, SJAID1);
  id >>= 8;
  can_write_reg(id, SJAID0);
  
  for(i=0; i < len; i++) {
     844:	14 51       	subi	r17, 0x14	; 20
     846:	21 96       	adiw	r28, 0x01	; 1
     848:	1d 15       	cp	r17, r13
     84a:	b8 f3       	brcs	.-18     	; 0x83a <sja1000p_pre_write_config+0xa6>
    can_write_reg(msg->data[i], SJADATE+i);
  }
#ifdef DEBUG
    CANMSG("SJA TX...");
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	6a e1       	ldi	r22, 0x1A	; 26
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     856:	88 ee       	ldi	r24, 0xE8	; 232
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     85e:	80 e0       	ldi	r24, 0x00	; 0
#endif
  return 0;
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	df 90       	pop	r13
     86e:	08 95       	ret
      CANMSG("Reset SJA chip!");
#endif
      return -1;
    }
  }
  len = msg->length;
     870:	98 e0       	ldi	r25, 0x08	; 8
     872:	d9 2e       	mov	r13, r25
     874:	b1 cf       	rjmp	.-158    	; 0x7d8 <sja1000p_pre_write_config+0x44>
    sja1000p_disable_configuration();
  }
  
  if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
#ifdef DEBUG
    CANMSG("SJA TX timed out");
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	6c ee       	ldi	r22, 0xEC	; 236
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     880:	88 ee       	ldi	r24, 0xE8	; 232
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#endif
// here we should check if there is no write/select waiting for this
// transmit. If so, set error ret and wake up.
// CHECKME: if we do not disable sjaIER_TIE (TX IRQ) here we get interrupt
// immediately
    can_write_reg(sjaCMR_AT, SJACMR);
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	0a e1       	ldi	r16, 0x1A	; 26
     894:	04 c0       	rjmp	.+8      	; 0x89e <sja1000p_pre_write_config+0x10a>
    i = 0;
    while ( !(can_read_reg(SJASR) & sjaSR_TBS) &&
     896:	1f 5f       	subi	r17, 0xFF	; 255
     898:	80 2f       	mov	r24, r16
     89a:	8a 95       	dec	r24
     89c:	f1 f7       	brne	.-4      	; 0x89a <sja1000p_pre_write_config+0x106>
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     8a4:	82 fd       	sbrc	r24, 2
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <sja1000p_pre_write_config+0x118>
     8a8:	1a 30       	cpi	r17, 0x0A	; 10
     8aa:	a9 f7       	brne	.-22     	; 0x896 <sja1000p_pre_write_config+0x102>
            i++<MAX_TRANSMIT_WAIT_LOOPS) {
      _delay_us(10);
    }
    if (!(can_read_reg(SJASR) & sjaSR_TBS)) {
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
     8b2:	82 fd       	sbrc	r24, 2
     8b4:	8c cf       	rjmp	.-232    	; 0x7ce <sja1000p_pre_write_config+0x3a>
#ifdef DEBUG
      CANMSG("SJA TX error");
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	6d ef       	ldi	r22, 0xFD	; 253
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     8c0:	88 ee       	ldi	r24, 0xE8	; 232
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
      CANMSG("Reset SJA chip!");
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	6a e0       	ldi	r22, 0x0A	; 10
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     8d2:	88 ee       	ldi	r24, 0xE8	; 232
     8d4:	93 e0       	ldi	r25, 0x03	; 3
     8d6:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	c1 cf       	rjmp	.-126    	; 0x860 <sja1000p_pre_write_config+0xcc>
  }
  
  if(status & sjaSR_BS) {
    /* Try to recover from error condition */
#ifdef DEBUG
    CANMSG("SJA bus recover");
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	6c ed       	ldi	r22, 0xDC	; 220
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     8e8:	88 ee       	ldi	r24, 0xE8	; 232
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#endif
    sja1000p_enable_configuration();
     8f0:	0e 94 91 03 	call	0x722	; 0x722 <sja1000p_enable_configuration>
    can_write_reg(0, SJARXERR);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	6e e0       	ldi	r22, 0x0E	; 14
     8f8:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
    can_write_reg(0, SJATXERR1);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	6f e0       	ldi	r22, 0x0F	; 15
     900:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
    can_read_reg(SJAECC);
     904:	8c e0       	ldi	r24, 0x0C	; 12
     906:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
    sja1000p_disable_configuration();
     90a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <sja1000p_disable_configuration>
     90e:	5a cf       	rjmp	.-332    	; 0x7c4 <sja1000p_pre_write_config+0x30>

00000910 <sja1000p_baud_rate>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_baud_rate(unsigned long rate, unsigned long clock, unsigned char sjw,unsigned char sampl_pt, unsigned char flags)
{
     910:	2f 92       	push	r2
     912:	3f 92       	push	r3
     914:	4f 92       	push	r4
     916:	5f 92       	push	r5
     918:	6f 92       	push	r6
     91a:	7f 92       	push	r7
     91c:	8f 92       	push	r8
     91e:	9f 92       	push	r9
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	67 97       	sbiw	r28, 0x17	; 23
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	69 8b       	std	Y+17, r22	; 0x11
     946:	7a 8b       	std	Y+18, r23	; 0x12
     948:	8b 8b       	std	Y+19, r24	; 0x13
     94a:	9c 8b       	std	Y+20, r25	; 0x14
     94c:	49 01       	movw	r8, r18
     94e:	5a 01       	movw	r10, r20
     950:	0d 8b       	std	Y+21, r16	; 0x15
     952:	ee 8a       	std	Y+22, r14	; 0x16
     954:	cf 8a       	std	Y+23, r12	; 0x17
  unsigned long best_error = 1000000000, error;
  unsigned long best_tseg=0, best_brp=0, best_rate=0, brp=0;
  unsigned long tseg=0, tseg1=0, tseg2=0;
  
  if (sja1000p_enable_configuration())
     956:	0e 94 91 03 	call	0x722	; 0x722 <sja1000p_enable_configuration>
     95a:	88 23       	and	r24, r24
     95c:	09 f0       	breq	.+2      	; 0x960 <sja1000p_baud_rate+0x50>
     95e:	42 c1       	rjmp	.+644    	; 0xbe4 <sja1000p_baud_rate+0x2d4>
    return -1;

  clock /=2;
     960:	a5 01       	movw	r20, r10
     962:	94 01       	movw	r18, r8
     964:	56 95       	lsr	r21
     966:	47 95       	ror	r20
     968:	37 95       	ror	r19
     96a:	27 95       	ror	r18
     96c:	29 87       	std	Y+9, r18	; 0x09
     96e:	3a 87       	std	Y+10, r19	; 0x0a
     970:	4b 87       	std	Y+11, r20	; 0x0b
     972:	5c 87       	std	Y+12, r21	; 0x0c
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	9a ec       	ldi	r25, 0xCA	; 202
     978:	aa e9       	ldi	r26, 0x9A	; 154
     97a:	bb e3       	ldi	r27, 0x3B	; 59
     97c:	8d 87       	std	Y+13, r24	; 0x0d
     97e:	9e 87       	std	Y+14, r25	; 0x0e
     980:	af 87       	std	Y+15, r26	; 0x0f
     982:	b8 8b       	std	Y+16, r27	; 0x10
     984:	1d 82       	std	Y+5, r1	; 0x05
     986:	1e 82       	std	Y+6, r1	; 0x06
     988:	1f 82       	std	Y+7, r1	; 0x07
     98a:	18 86       	std	Y+8, r1	; 0x08
     98c:	19 82       	std	Y+1, r1	; 0x01
     98e:	1a 82       	std	Y+2, r1	; 0x02
     990:	1b 82       	std	Y+3, r1	; 0x03
     992:	1c 82       	std	Y+4, r1	; 0x04
     994:	54 e0       	ldi	r21, 0x04	; 4
     996:	e5 2e       	mov	r14, r21
     998:	f1 2c       	mov	r15, r1
     99a:	01 2d       	mov	r16, r1
     99c:	11 2d       	mov	r17, r1
     99e:	38 c0       	rjmp	.+112    	; 0xa10 <sja1000p_baud_rate+0x100>
  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
    brp = clock/((1+tseg/2)*rate)+tseg%2;
    if (brp == 0 || brp > 64)
      continue;
    error = rate - clock/(brp*(1+tseg/2));
     9a0:	ca 01       	movw	r24, r20
     9a2:	b9 01       	movw	r22, r18
     9a4:	a4 01       	movw	r20, r8
     9a6:	93 01       	movw	r18, r6
     9a8:	0e 94 02 0a 	call	0x1404	; 0x1404 <__mulsi3>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	69 85       	ldd	r22, Y+9	; 0x09
     9b2:	7a 85       	ldd	r23, Y+10	; 0x0a
     9b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9b8:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodsi4>
     9bc:	89 89       	ldd	r24, Y+17	; 0x11
     9be:	9a 89       	ldd	r25, Y+18	; 0x12
     9c0:	ab 89       	ldd	r26, Y+19	; 0x13
     9c2:	bc 89       	ldd	r27, Y+20	; 0x14
     9c4:	82 1b       	sub	r24, r18
     9c6:	93 0b       	sbc	r25, r19
     9c8:	a4 0b       	sbc	r26, r20
     9ca:	b5 0b       	sbc	r27, r21
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     9cc:	2d 85       	ldd	r18, Y+13	; 0x0d
     9ce:	3e 85       	ldd	r19, Y+14	; 0x0e
     9d0:	4f 85       	ldd	r20, Y+15	; 0x0f
     9d2:	58 89       	ldd	r21, Y+16	; 0x10
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	4a 07       	cpc	r20, r26
     9da:	5b 07       	cpc	r21, r27
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <sja1000p_baud_rate+0xd0>
     9de:	4d c0       	rjmp	.+154    	; 0xa7a <sja1000p_baud_rate+0x16a>
     9e0:	8d 87       	std	Y+13, r24	; 0x0d
     9e2:	9e 87       	std	Y+14, r25	; 0x0e
     9e4:	af 87       	std	Y+15, r26	; 0x0f
     9e6:	b8 8b       	std	Y+16, r27	; 0x10
    return -1;

  clock /=2;

  /* tseg even = round down, odd = round up */
  for (tseg=(0+0+2)*2; tseg<=(sjaMAX_TSEG2+sjaMAX_TSEG1+2)*2+1; tseg++) {
     9e8:	08 94       	sec
     9ea:	e1 1c       	adc	r14, r1
     9ec:	f1 1c       	adc	r15, r1
     9ee:	01 1d       	adc	r16, r1
     9f0:	11 1d       	adc	r17, r1
     9f2:	32 e3       	ldi	r19, 0x32	; 50
     9f4:	e3 16       	cp	r14, r19
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	09 f4       	brne	.+2      	; 0xa00 <sja1000p_baud_rate+0xf0>
     9fe:	46 c0       	rjmp	.+140    	; 0xa8c <sja1000p_baud_rate+0x17c>
     a00:	ad 82       	std	Y+5, r10	; 0x05
     a02:	be 82       	std	Y+6, r11	; 0x06
     a04:	cf 82       	std	Y+7, r12	; 0x07
     a06:	d8 86       	std	Y+8, r13	; 0x08
     a08:	29 82       	std	Y+1, r2	; 0x01
     a0a:	3a 82       	std	Y+2, r3	; 0x02
     a0c:	4b 82       	std	Y+3, r4	; 0x03
     a0e:	5c 82       	std	Y+4, r5	; 0x04
    brp = clock/((1+tseg/2)*rate)+tseg%2;
     a10:	57 01       	movw	r10, r14
     a12:	68 01       	movw	r12, r16
     a14:	d6 94       	lsr	r13
     a16:	c7 94       	ror	r12
     a18:	b7 94       	ror	r11
     a1a:	a7 94       	ror	r10
     a1c:	35 01       	movw	r6, r10
     a1e:	46 01       	movw	r8, r12
     a20:	08 94       	sec
     a22:	61 1c       	adc	r6, r1
     a24:	71 1c       	adc	r7, r1
     a26:	81 1c       	adc	r8, r1
     a28:	91 1c       	adc	r9, r1
     a2a:	c4 01       	movw	r24, r8
     a2c:	b3 01       	movw	r22, r6
     a2e:	29 89       	ldd	r18, Y+17	; 0x11
     a30:	3a 89       	ldd	r19, Y+18	; 0x12
     a32:	4b 89       	ldd	r20, Y+19	; 0x13
     a34:	5c 89       	ldd	r21, Y+20	; 0x14
     a36:	0e 94 02 0a 	call	0x1404	; 0x1404 <__mulsi3>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	69 85       	ldd	r22, Y+9	; 0x09
     a40:	7a 85       	ldd	r23, Y+10	; 0x0a
     a42:	8b 85       	ldd	r24, Y+11	; 0x0b
     a44:	9c 85       	ldd	r25, Y+12	; 0x0c
     a46:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodsi4>
     a4a:	d8 01       	movw	r26, r16
     a4c:	c7 01       	movw	r24, r14
     a4e:	81 70       	andi	r24, 0x01	; 1
     a50:	90 70       	andi	r25, 0x00	; 0
     a52:	a0 70       	andi	r26, 0x00	; 0
     a54:	b0 70       	andi	r27, 0x00	; 0
     a56:	28 0f       	add	r18, r24
     a58:	39 1f       	adc	r19, r25
     a5a:	4a 1f       	adc	r20, r26
     a5c:	5b 1f       	adc	r21, r27
    if (brp == 0 || brp > 64)
     a5e:	19 01       	movw	r2, r18
     a60:	2a 01       	movw	r4, r20
     a62:	08 94       	sec
     a64:	21 08       	sbc	r2, r1
     a66:	31 08       	sbc	r3, r1
     a68:	41 08       	sbc	r4, r1
     a6a:	51 08       	sbc	r5, r1
     a6c:	90 e4       	ldi	r25, 0x40	; 64
     a6e:	29 16       	cp	r2, r25
     a70:	31 04       	cpc	r3, r1
     a72:	41 04       	cpc	r4, r1
     a74:	51 04       	cpc	r5, r1
     a76:	08 f4       	brcc	.+2      	; 0xa7a <sja1000p_baud_rate+0x16a>
     a78:	93 cf       	rjmp	.-218    	; 0x9a0 <sja1000p_baud_rate+0x90>
    error = rate - clock/(brp*(1+tseg/2));
    
    if (error < 0)
      error = -error;
    
    if (error <= best_error) {
     a7a:	ad 80       	ldd	r10, Y+5	; 0x05
     a7c:	be 80       	ldd	r11, Y+6	; 0x06
     a7e:	cf 80       	ldd	r12, Y+7	; 0x07
     a80:	d8 84       	ldd	r13, Y+8	; 0x08
     a82:	29 80       	ldd	r2, Y+1	; 0x01
     a84:	3a 80       	ldd	r3, Y+2	; 0x02
     a86:	4b 80       	ldd	r4, Y+3	; 0x03
     a88:	5c 80       	ldd	r5, Y+4	; 0x04
     a8a:	ae cf       	rjmp	.-164    	; 0x9e8 <sja1000p_baud_rate+0xd8>
      best_tseg = tseg/2;
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	af 85       	ldd	r26, Y+15	; 0x0f
     a92:	b8 89       	ldd	r27, Y+16	; 0x10
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	a1 05       	cpc	r26, r1
     a98:	b1 05       	cpc	r27, r1
     a9a:	81 f0       	breq	.+32     	; 0xabc <sja1000p_baud_rate+0x1ac>
     a9c:	69 89       	ldd	r22, Y+17	; 0x11
     a9e:	7a 89       	ldd	r23, Y+18	; 0x12
     aa0:	8b 89       	ldd	r24, Y+19	; 0x13
     aa2:	9c 89       	ldd	r25, Y+20	; 0x14
     aa4:	2d 85       	ldd	r18, Y+13	; 0x0d
     aa6:	3e 85       	ldd	r19, Y+14	; 0x0e
     aa8:	4f 85       	ldd	r20, Y+15	; 0x0f
     aaa:	58 89       	ldd	r21, Y+16	; 0x10
     aac:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodsi4>
     ab0:	2a 30       	cpi	r18, 0x0A	; 10
     ab2:	31 05       	cpc	r19, r1
     ab4:	41 05       	cpc	r20, r1
     ab6:	51 05       	cpc	r21, r1
     ab8:	08 f4       	brcc	.+2      	; 0xabc <sja1000p_baud_rate+0x1ac>
     aba:	8b c0       	rjmp	.+278    	; 0xbd2 <sja1000p_baud_rate+0x2c2>
    CANMSG("SAJ b-r error");
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     abc:	c6 01       	movw	r24, r12
     abe:	b5 01       	movw	r22, r10
     ac0:	6f 5f       	subi	r22, 0xFF	; 255
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	8f 4f       	sbci	r24, 0xFF	; 255
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	ae 89       	ldd	r26, Y+22	; 0x16
     aca:	2a 2f       	mov	r18, r26
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	0e 94 02 0a 	call	0x1404	; 0x1404 <__mulsi3>
     ad6:	24 e6       	ldi	r18, 0x64	; 100
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodsi4>
     ae2:	35 01       	movw	r6, r10
     ae4:	46 01       	movw	r8, r12
     ae6:	62 1a       	sub	r6, r18
     ae8:	73 0a       	sbc	r7, r19
     aea:	84 0a       	sbc	r8, r20
     aec:	95 0a       	sbc	r9, r21
     aee:	b8 e0       	ldi	r27, 0x08	; 8
     af0:	6b 16       	cp	r6, r27
     af2:	71 04       	cpc	r7, r1
     af4:	81 04       	cpc	r8, r1
     af6:	91 04       	cpc	r9, r1
     af8:	08 f0       	brcs	.+2      	; 0xafc <sja1000p_baud_rate+0x1ec>
     afa:	65 c0       	rjmp	.+202    	; 0xbc6 <sja1000p_baud_rate+0x2b6>
    tseg2 = 0;
  
  if (tseg2 > sjaMAX_TSEG2)
    tseg2 = sjaMAX_TSEG2;
  
  tseg1 = best_tseg-tseg2-2;
     afc:	2e ef       	ldi	r18, 0xFE	; 254
     afe:	3f ef       	ldi	r19, 0xFF	; 255
     b00:	4f ef       	ldi	r20, 0xFF	; 255
     b02:	5f ef       	ldi	r21, 0xFF	; 255
     b04:	a2 0e       	add	r10, r18
     b06:	b3 1e       	adc	r11, r19
     b08:	c4 1e       	adc	r12, r20
     b0a:	d5 1e       	adc	r13, r21
     b0c:	d6 01       	movw	r26, r12
     b0e:	c5 01       	movw	r24, r10
     b10:	86 19       	sub	r24, r6
     b12:	97 09       	sbc	r25, r7
     b14:	a8 09       	sbc	r26, r8
     b16:	b9 09       	sbc	r27, r9
     b18:	22 e0       	ldi	r18, 0x02	; 2
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	a2 0e       	add	r10, r18
     b22:	b3 1e       	adc	r11, r19
     b24:	c4 1e       	adc	r12, r20
     b26:	d5 1e       	adc	r13, r21
  
  if (tseg1>sjaMAX_TSEG1) {
     b28:	80 31       	cpi	r24, 0x10	; 16
     b2a:	91 05       	cpc	r25, r1
     b2c:	a1 05       	cpc	r26, r1
     b2e:	b1 05       	cpc	r27, r1
     b30:	e0 f5       	brcc	.+120    	; 0xbaa <sja1000p_baud_rate+0x29a>
     b32:	18 2f       	mov	r17, r24
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
     b34:	3d 89       	ldd	r19, Y+21	; 0x15
     b36:	32 95       	swap	r19
     b38:	33 0f       	add	r19, r19
     b3a:	33 0f       	add	r19, r19
     b3c:	30 7c       	andi	r19, 0xC0	; 192
     b3e:	83 2f       	mov	r24, r19
     b40:	82 29       	or	r24, r2
     b42:	66 e0       	ldi	r22, 0x06	; 6
     b44:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     b48:	4f 89       	ldd	r20, Y+23	; 0x17
     b4a:	41 fd       	sbrc	r20, 1
     b4c:	4d c0       	rjmp	.+154    	; 0xbe8 <sja1000p_baud_rate+0x2d8>
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	86 2d       	mov	r24, r6
     b52:	82 95       	swap	r24
     b54:	80 7f       	andi	r24, 0xF0	; 240
     b56:	81 2b       	or	r24, r17
     b58:	89 2b       	or	r24, r25
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
          | tseg1, SJABTR1);

  sja1000p_disable_configuration();
     b60:	0e 94 62 03 	call	0x6c4	; 0x6c4 <sja1000p_disable_configuration>

  CANMSG("SJA baud rate OK");
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	62 e3       	ldi	r22, 0x32	; 50
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     b6e:	88 ee       	ldi	r24, 0xE8	; 232
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     b76:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     b78:	67 96       	adiw	r28, 0x17	; 23
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	9f 90       	pop	r9
     b9a:	8f 90       	pop	r8
     b9c:	7f 90       	pop	r7
     b9e:	6f 90       	pop	r6
     ba0:	5f 90       	pop	r5
     ba2:	4f 90       	pop	r4
     ba4:	3f 90       	pop	r3
     ba6:	2f 90       	pop	r2
     ba8:	08 95       	ret
  
  tseg1 = best_tseg-tseg2-2;
  
  if (tseg1>sjaMAX_TSEG1) {
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
     baa:	2f ee       	ldi	r18, 0xEF	; 239
     bac:	62 2e       	mov	r6, r18
     bae:	2f ef       	ldi	r18, 0xFF	; 255
     bb0:	72 2e       	mov	r7, r18
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	82 2e       	mov	r8, r18
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	92 2e       	mov	r9, r18
     bba:	6a 0c       	add	r6, r10
     bbc:	7b 1c       	adc	r7, r11
     bbe:	8c 1c       	adc	r8, r12
     bc0:	9d 1c       	adc	r9, r13
     bc2:	1f e0       	ldi	r17, 0x0F	; 15
     bc4:	b7 cf       	rjmp	.-146    	; 0xb34 <sja1000p_baud_rate+0x224>
  }
  if (best_error && (rate/best_error < 10)) {
    CANMSG("SAJ b-r error");
    return -1;
  }
  tseg2 = best_tseg-(sampl_pt*(best_tseg+1))/100;
     bc6:	37 e0       	ldi	r19, 0x07	; 7
     bc8:	63 2e       	mov	r6, r19
     bca:	71 2c       	mov	r7, r1
     bcc:	81 2c       	mov	r8, r1
     bce:	91 2c       	mov	r9, r1
     bd0:	95 cf       	rjmp	.-214    	; 0xafc <sja1000p_baud_rate+0x1ec>
      best_brp = brp-1;
      best_rate = clock/(brp*(1+tseg/2));
    }
  }
  if (best_error && (rate/best_error < 10)) {
    CANMSG("SAJ b-r error");
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	64 e2       	ldi	r22, 0x24	; 36
     bd6:	71 e0       	ldi	r23, 0x01	; 1
     bd8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     bdc:	88 ee       	ldi	r24, 0xE8	; 232
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	c8 cf       	rjmp	.-112    	; 0xb78 <sja1000p_baud_rate+0x268>
    tseg1 = sjaMAX_TSEG1;
    tseg2 = best_tseg-tseg1-2;
  }

  can_write_reg(sjw<<6 | best_brp, SJABTR0);
  can_write_reg(((flags & BTR1_SAM) != 0)<<7 | (tseg2<<4) 
     be8:	90 e8       	ldi	r25, 0x80	; 128
     bea:	b2 cf       	rjmp	.-156    	; 0xb50 <sja1000p_baud_rate+0x240>

00000bec <sja1000p_extended_mask>:
 *
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	5b 01       	movw	r10, r22
     c00:	6c 01       	movw	r12, r24
     c02:	79 01       	movw	r14, r18
     c04:	8a 01       	movw	r16, r20
   char i;

  if (sja1000p_enable_configuration())
     c06:	0e 94 91 03 	call	0x722	; 0x722 <sja1000p_enable_configuration>
     c0a:	88 23       	and	r24, r24
     c0c:	31 f5       	brne	.+76     	; 0xc5a <sja1000p_extended_mask+0x6e>
     c0e:	f3 e1       	ldi	r31, 0x13	; 19
     c10:	9f 2e       	mov	r9, r31
    return -1;

// LSB to +3, MSB to +0 
  for(i = SJA_PeliCAN_AC_LEN; --i >= 0;) {
    can_write_reg(code&0xff,SJAACR0+i);
     c12:	8a 2d       	mov	r24, r10
     c14:	69 2d       	mov	r22, r9
     c16:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
    can_write_reg(mask&0xff,SJAAMR0+i);
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	98 0e       	add	r9, r24
     c1e:	8e 2d       	mov	r24, r14
     c20:	69 2d       	mov	r22, r9
     c22:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
    code >>= 8;
     c26:	ab 2c       	mov	r10, r11
     c28:	bc 2c       	mov	r11, r12
     c2a:	cd 2c       	mov	r12, r13
     c2c:	dd 24       	eor	r13, r13
    mask >>= 8;
     c2e:	ef 2c       	mov	r14, r15
     c30:	f0 2e       	mov	r15, r16
     c32:	01 2f       	mov	r16, r17
     c34:	11 27       	eor	r17, r17
     c36:	8b ef       	ldi	r24, 0xFB	; 251
     c38:	98 0e       	add	r9, r24

  if (sja1000p_enable_configuration())
    return -1;

// LSB to +3, MSB to +0 
  for(i = SJA_PeliCAN_AC_LEN; --i >= 0;) {
     c3a:	8f e0       	ldi	r24, 0x0F	; 15
     c3c:	98 16       	cp	r9, r24
     c3e:	49 f7       	brne	.-46     	; 0xc12 <sja1000p_extended_mask+0x26>
    can_write_reg(mask&0xff,SJAAMR0+i);
    code >>= 8;
    mask >>= 8;
  }

  sja1000p_disable_configuration();  
     c40:	0e 94 62 03 	call	0x6c4	; 0x6c4 <sja1000p_disable_configuration>
     c44:	80 e0       	ldi	r24, 0x00	; 0

  return 0;
}
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	9f 90       	pop	r9
     c58:	08 95       	ret
 */
char sja1000p_extended_mask(unsigned long code, unsigned  long mask)
{
   char i;

  if (sja1000p_enable_configuration())
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	f4 cf       	rjmp	.-24     	; 0xc46 <sja1000p_extended_mask+0x5a>

00000c5e <sja1000p_chip_config>:
 * computes and sets baudrate with use of function sja1000p_baud_rate().
 * Return Value: negative value reports error.
 * File: src/sja1000p.c
 */
char sja1000p_chip_config(struct canchip_t *chip)
{
     c5e:	cf 92       	push	r12
     c60:	ef 92       	push	r14
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
  unsigned char i;
  unsigned char n, r;
  
  if (sja1000p_enable_configuration())
     c6c:	0e 94 91 03 	call	0x722	; 0x722 <sja1000p_enable_configuration>
     c70:	88 23       	and	r24, r24
     c72:	41 f0       	breq	.+16     	; 0xc84 <sja1000p_chip_config+0x26>

  sja1000p_disable_configuration();
  
  CANMSG("SJA config OK");
  
  return 0;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ef 90       	pop	r14
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret
  
  if (sja1000p_enable_configuration())
    return -1;

  /* Set mode, clock out, comparator */
  can_write_reg(sjaCDR_PELICAN|chip->sja_cdr_reg,SJACDR); 
     c84:	88 89       	ldd	r24, Y+16	; 0x10
     c86:	80 68       	ori	r24, 0x80	; 128
     c88:	6f e1       	ldi	r22, 0x1F	; 31
     c8a:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

  /* Ensure, that interrupts are disabled even on the chip level now */
  can_write_reg(sjaDISABLE_INTERRUPTS, SJAIER);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
     c96:	89 89       	ldd	r24, Y+17	; 0x11
     c98:	68 e0       	ldi	r22, 0x08	; 8
     c9a:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>
     c9e:	0a e5       	ldi	r16, 0x5A	; 90
     ca0:	10 e1       	ldi	r17, 0x10	; 16
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
     ca2:	80 2f       	mov	r24, r16
     ca4:	61 2f       	mov	r22, r17
     ca6:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

  /* Set driver output configuration */
  can_write_reg(chip->sja_ocr_reg,SJAOCR); 
  
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     caa:	01 5f       	subi	r16, 0xF1	; 241
     cac:	1f 5f       	subi	r17, 0xFF	; 255
     cae:	02 3d       	cpi	r16, 0xD2	; 210
     cb0:	c1 f7       	brne	.-16     	; 0xca2 <sja1000p_chip_config+0x44>
     cb2:	1a e5       	ldi	r17, 0x5A	; 90
     cb4:	00 e1       	ldi	r16, 0x10	; 16
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <sja1000p_chip_config+0x5c>
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     cb8:	11 5f       	subi	r17, 0xF1	; 241
    r = n^can_read_reg(SJAACR0+i);
     cba:	80 2f       	mov	r24, r16
     cbc:	0e 94 1b 02 	call	0x436	; 0x436 <can_read_reg>
    if (r) {
     cc0:	18 17       	cp	r17, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <sja1000p_chip_config+0x68>
     cc4:	42 c0       	rjmp	.+132    	; 0xd4a <sja1000p_chip_config+0xec>
      CANMSG("SJA config error");
      return -1;
     cc6:	0f 5f       	subi	r16, 0xFF	; 255
  /* Simple check for chip presence */
  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    can_write_reg(n,SJAACR0+i);
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
     cc8:	13 3c       	cpi	r17, 0xC3	; 195
     cca:	b1 f7       	brne	.-20     	; 0xcb8 <sja1000p_chip_config+0x5a>
      CANMSG("SJA config error");
      return -1;
    }
  }

  if (sja1000p_extended_mask(chip->filter_code, chip->filter_mask))
     ccc:	6c 85       	ldd	r22, Y+12	; 0x0c
     cce:	7d 85       	ldd	r23, Y+13	; 0x0d
     cd0:	8e 85       	ldd	r24, Y+14	; 0x0e
     cd2:	9f 85       	ldd	r25, Y+15	; 0x0f
     cd4:	28 85       	ldd	r18, Y+8	; 0x08
     cd6:	39 85       	ldd	r19, Y+9	; 0x09
     cd8:	4a 85       	ldd	r20, Y+10	; 0x0a
     cda:	5b 85       	ldd	r21, Y+11	; 0x0b
     cdc:	0e 94 f6 05 	call	0xbec	; 0xbec <sja1000p_extended_mask>
     ce0:	88 23       	and	r24, r24
     ce2:	41 f6       	brne	.-112    	; 0xc74 <sja1000p_chip_config+0x16>
    return -1;
  
  if (!chip->baudrate)
     ce4:	6c 81       	ldd	r22, Y+4	; 0x04
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	8e 81       	ldd	r24, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	61 15       	cp	r22, r1
     cee:	71 05       	cpc	r23, r1
     cf0:	81 05       	cpc	r24, r1
     cf2:	91 05       	cpc	r25, r1
     cf4:	61 f4       	brne	.+24     	; 0xd0e <sja1000p_chip_config+0xb0>
    chip->baudrate=1000000;
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	92 e4       	ldi	r25, 0x42	; 66
     cfa:	af e0       	ldi	r26, 0x0F	; 15
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	8c 83       	std	Y+4, r24	; 0x04
     d00:	9d 83       	std	Y+5, r25	; 0x05
     d02:	ae 83       	std	Y+6, r26	; 0x06
     d04:	bf 83       	std	Y+7, r27	; 0x07
     d06:	60 e4       	ldi	r22, 0x40	; 64
     d08:	72 e4       	ldi	r23, 0x42	; 66
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	90 e0       	ldi	r25, 0x00	; 0
  
  if (sja1000p_baud_rate(chip->baudrate,chip->clock,0,75,0))
     d0e:	28 81       	ld	r18, Y
     d10:	39 81       	ldd	r19, Y+1	; 0x01
     d12:	4a 81       	ldd	r20, Y+2	; 0x02
     d14:	5b 81       	ldd	r21, Y+3	; 0x03
     d16:	00 e0       	ldi	r16, 0x00	; 0
     d18:	ab e4       	ldi	r26, 0x4B	; 75
     d1a:	ea 2e       	mov	r14, r26
     d1c:	cc 24       	eor	r12, r12
     d1e:	0e 94 88 04 	call	0x910	; 0x910 <sja1000p_baud_rate>
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <sja1000p_chip_config+0xca>
     d26:	a6 cf       	rjmp	.-180    	; 0xc74 <sja1000p_chip_config+0x16>
    return -1;

  /* Enable hardware interrupts */
  can_write_reg(sjaENABLE_INTERRUPTS, SJAIER); 
     d28:	8f ea       	ldi	r24, 0xAF	; 175
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	0e 94 35 02 	call	0x46a	; 0x46a <can_write_reg>

  sja1000p_disable_configuration();
     d30:	0e 94 62 03 	call	0x6c4	; 0x6c4 <sja1000p_disable_configuration>
  
  CANMSG("SJA config OK");
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	64 e5       	ldi	r22, 0x54	; 84
     d38:	71 e0       	ldi	r23, 0x01	; 1
     d3a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	96 cf       	rjmp	.-212    	; 0xc76 <sja1000p_chip_config+0x18>
  }

  for (i=0, n=0x5a; i<8; i++, n+=0xf) {
    r = n^can_read_reg(SJAACR0+i);
    if (r) {
      CANMSG("SJA config error");
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	63 e4       	ldi	r22, 0x43	; 67
     d4e:	71 e0       	ldi	r23, 0x01	; 1
     d50:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     d54:	88 ee       	ldi	r24, 0xE8	; 232
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	8b cf       	rjmp	.-234    	; 0xc76 <sja1000p_chip_config+0x18>

00000d60 <__vector_14>:
  }
}

/* ADC interrupt service routine */
ISR(ADC_vect)
{
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
  static unsigned char channel = 0;
  
  adc_data[channel] = ADCH;
     d72:	90 91 06 02 	lds	r25, 0x0206
     d76:	e9 2f       	mov	r30, r25
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	85 b1       	in	r24, 0x05	; 5
     d7c:	e8 59       	subi	r30, 0x98	; 152
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	80 83       	st	Z, r24
  
  /* Select next ADC channel */
  if (++channel > 2)
     d82:	9f 5f       	subi	r25, 0xFF	; 255
     d84:	90 93 06 02 	sts	0x0206, r25
     d88:	93 30       	cpi	r25, 0x03	; 3
     d8a:	18 f0       	brcs	.+6      	; 0xd92 <__vector_14+0x32>
    channel = 0;
     d8c:	10 92 06 02 	sts	0x0206, r1
     d90:	90 e0       	ldi	r25, 0x00	; 0
  
  ADMUX = (ADC_VREF_TYPE & 0xff) + channel;
     d92:	90 5a       	subi	r25, 0xA0	; 160
     d94:	97 b9       	out	0x07, r25	; 7
  
  adc_start;
     d96:	36 9a       	sbi	0x06, 6	; 6
}
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <save_samples>:
  return 0;
}


static void save_samples()
{
     daa:	af 92       	push	r10
     dac:	bf 92       	push	r11
     dae:	cf 92       	push	r12
     db0:	df 92       	push	r13
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	82 e1       	ldi	r24, 0x12	; 18
     dbe:	a8 2e       	mov	r10, r24
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	b8 2e       	mov	r11, r24
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	cc 24       	eor	r12, r12
     dce:	dd 24       	eor	r13, r13
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
     dd0:	f5 01       	movw	r30, r10
     dd2:	f0 80       	ld	r15, Z
     dd4:	e0 e0       	ldi	r30, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
        adc_time = timer_msec;
        average += adc_data[i];
     dda:	e6 01       	movw	r28, r12
     ddc:	c8 59       	subi	r28, 0x98	; 152
     dde:	dd 4f       	sbci	r29, 0xFD	; 253
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
     de0:	ef 15       	cp	r30, r15
     de2:	08 f5       	brcc	.+66     	; 0xe26 <save_samples+0x7c>
     de4:	a9 01       	movw	r20, r18
     de6:	98 01       	movw	r18, r16
     de8:	2f 5f       	subi	r18, 0xFF	; 255
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	4f 4f       	sbci	r20, 0xFF	; 255
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
      /* save sample every 1ms = 1kHz  */
      if (timer_msec >= adc_time + 1) {
     df0:	80 91 4f 02 	lds	r24, 0x024F
     df4:	90 91 50 02 	lds	r25, 0x0250
     df8:	a0 91 51 02 	lds	r26, 0x0251
     dfc:	b0 91 52 02 	lds	r27, 0x0252
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	a4 07       	cpc	r26, r20
     e06:	b5 07       	cpc	r27, r21
     e08:	98 f3       	brcs	.-26     	; 0xdf0 <save_samples+0x46>
        adc_time = timer_msec;
     e0a:	00 91 4f 02 	lds	r16, 0x024F
     e0e:	10 91 50 02 	lds	r17, 0x0250
     e12:	20 91 51 02 	lds	r18, 0x0251
     e16:	30 91 52 02 	lds	r19, 0x0252
        average += adc_data[i];
     e1a:	88 81       	ld	r24, Y
     e1c:	68 0f       	add	r22, r24
     e1e:	71 1d       	adc	r23, r1
        counter++;
     e20:	ef 5f       	subi	r30, 0xFF	; 255
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
    /* capture number of samples[i] ADC samples */
    while (counter < sen_cfg_lock.samples[i]) {
     e22:	ef 15       	cp	r30, r15
     e24:	f8 f2       	brcs	.-66     	; 0xde4 <save_samples+0x3a>
      }
    }
    
    /* counts avarage value from saved samples,
       avoid dividing by zero when none sample saved */
    if (sen_cfg_lock.samples[i])
     e26:	ff 20       	and	r15, r15
     e28:	49 f0       	breq	.+18     	; 0xe3c <save_samples+0x92>
      sen_data.channel_data[i] = average / sen_cfg_lock.samples[i];
     e2a:	f6 01       	movw	r30, r12
     e2c:	e5 5e       	subi	r30, 0xE5	; 229
     e2e:	fd 4f       	sbci	r31, 0xFD	; 253
     e30:	cb 01       	movw	r24, r22
     e32:	6f 2d       	mov	r22, r15
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0e 94 21 0a 	call	0x1442	; 0x1442 <__udivmodhi4>
     e3a:	60 83       	st	Z, r22
     e3c:	08 94       	sec
     e3e:	c1 1c       	adc	r12, r1
     e40:	d1 1c       	adc	r13, r1
     e42:	08 94       	sec
     e44:	a1 1c       	adc	r10, r1
     e46:	b1 1c       	adc	r11, r1
{
  timer adc_time = 0;
  unsigned char counter = 0, i = 0;
  unsigned int average = 0;
  
  for (i = 0; i < 3; i++) {
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	c8 16       	cp	r12, r24
     e4c:	d1 04       	cpc	r13, r1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <save_samples+0xa8>
     e50:	bf cf       	rjmp	.-130    	; 0xdd0 <save_samples+0x26>
    
    counter = 0;
    average = 0;
  }
  
  adc_off;
     e52:	37 98       	cbi	0x06, 7	; 6
  
  /* if treshold is set for any channel,
     check measured data limits, if overflow occured, set apropriate bit */
  if (sen_cfg_lock.treshold_channel
     e54:	e0 91 16 02 	lds	r30, 0x0216
     e58:	ee 23       	and	r30, r30
     e5a:	41 f0       	breq	.+16     	; 0xe6c <save_samples+0xc2>
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	e6 5e       	subi	r30, 0xE6	; 230
     e60:	fd 4f       	sbci	r31, 0xFD	; 253
     e62:	90 81       	ld	r25, Z
     e64:	80 91 15 02 	lds	r24, 0x0215
     e68:	98 17       	cp	r25, r24
     e6a:	60 f4       	brcc	.+24     	; 0xe84 <save_samples+0xda>
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
  else
    sen_data.overflow = 0;
     e6c:	10 92 1e 02 	sts	0x021E, r1
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	08 95       	ret
  
  /* if treshold is set for any channel,
     check measured data limits, if overflow occured, set apropriate bit */
  if (sen_cfg_lock.treshold_channel
    && (sen_data.channel_data[sen_cfg_lock.treshold_channel - 1] >= sen_cfg_lock.treshold))
      sen_data.overflow = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 93 1e 02 	sts	0x021E, r24
     e8a:	f2 cf       	rjmp	.-28     	; 0xe70 <save_samples+0xc6>

00000e8c <sensor_capture_data>:
  }
}

/* FSM state for capturing ADC samples */
static void sensor_capture_data(struct fsm *fsm, enum event event)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
  switch (event) {
     e92:	61 15       	cp	r22, r1
     e94:	71 05       	cpc	r23, r1
     e96:	79 f4       	brne	.+30     	; 0xeb6 <sensor_capture_data+0x2a>
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM capture data");
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	62 e6       	ldi	r22, 0x62	; 98
     e9c:	71 e0       	ldi	r23, 0x01	; 1
     e9e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     ea2:	88 ee       	ldi	r24, 0xE8	; 232
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#endif
    adc_on;
     eaa:	86 b1       	in	r24, 0x06	; 6
     eac:	80 6c       	ori	r24, 0xC0	; 192
     eae:	86 b9       	out	0x06, r24	; 6
    fsm->current_state = sensor_send_data;
    break;
  case EVENT_EXIT:
    break;
  }
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret
}

/* FSM state for capturing ADC samples */
static void sensor_capture_data(struct fsm *fsm, enum event event)
{
  switch (event) {
     eb6:	61 30       	cpi	r22, 0x01	; 1
     eb8:	71 05       	cpc	r23, r1
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <sensor_capture_data+0x24>
    CANMSG("FSM capture data");
#endif
    adc_on;
    break;
  case EVENT_DO:
    save_samples(fsm);
     ebc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <save_samples>
    fsm->current_state = sensor_send_data;
     ec0:	8b e4       	ldi	r24, 0x4B	; 75
     ec2:	98 e0       	ldi	r25, 0x08	; 8
     ec4:	99 83       	std	Y+1, r25	; 0x01
     ec6:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <fsm_sensor_init>:
  return 0;
}

/* FSM initial state */
void fsm_sensor_init(struct fsm *fsm, enum event event)
{
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
  switch (event) {
     ed6:	61 30       	cpi	r22, 0x01	; 1
     ed8:	71 05       	cpc	r23, r1
     eda:	09 f4       	brne	.+2      	; 0xede <fsm_sensor_init+0x10>
     edc:	8e c0       	rjmp	.+284    	; 0xffa <fsm_sensor_init+0x12c>
     ede:	61 30       	cpi	r22, 0x01	; 1
     ee0:	71 05       	cpc	r23, r1
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <fsm_sensor_init+0x18>
     ee4:	7a c0       	rjmp	.+244    	; 0xfda <fsm_sensor_init+0x10c>
{
  unsigned char i = 0;
  
  char *idn = SENSOR_IDN;
  
  sja_init_ports();
     ee6:	0e 94 0e 02 	call	0x41c	; 0x41c <sja_init_ports>
  
  /* fill chip structure with config values */
  chip.baudrate = SJA_BAUD;
     eea:	80 e4       	ldi	r24, 0x40	; 64
     eec:	92 e4       	ldi	r25, 0x42	; 66
     eee:	af e0       	ldi	r26, 0x0F	; 15
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	80 93 41 02 	sts	0x0241, r24
     ef6:	90 93 42 02 	sts	0x0242, r25
     efa:	a0 93 43 02 	sts	0x0243, r26
     efe:	b0 93 44 02 	sts	0x0244, r27
  chip.clock = SJA_CLOCK;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	94 e2       	ldi	r25, 0x24	; 36
     f06:	a4 ef       	ldi	r26, 0xF4	; 244
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	80 93 3d 02 	sts	0x023D, r24
     f0e:	90 93 3e 02 	sts	0x023E, r25
     f12:	a0 93 3f 02 	sts	0x023F, r26
     f16:	b0 93 40 02 	sts	0x0240, r27
  chip.filter_mask = ~SENSOR_MASK;
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	af ef       	ldi	r26, 0xFF	; 255
     f20:	be ef       	ldi	r27, 0xFE	; 254
     f22:	80 93 45 02 	sts	0x0245, r24
     f26:	90 93 46 02 	sts	0x0246, r25
     f2a:	a0 93 47 02 	sts	0x0247, r26
     f2e:	b0 93 48 02 	sts	0x0248, r27
  chip.filter_code = SENSOR_MASK;
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b1 e0       	ldi	r27, 0x01	; 1
     f3a:	80 93 49 02 	sts	0x0249, r24
     f3e:	90 93 4a 02 	sts	0x024A, r25
     f42:	a0 93 4b 02 	sts	0x024B, r26
     f46:	b0 93 4c 02 	sts	0x024C, r27
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
     f4a:	18 e0       	ldi	r17, 0x08	; 8
     f4c:	10 93 4d 02 	sts	0x024D, r17
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
     f50:	8a e1       	ldi	r24, 0x1A	; 26
     f52:	80 93 4e 02 	sts	0x024E, r24
  
  if(sja1000p_chip_config(&chip))
     f56:	8d e3       	ldi	r24, 0x3D	; 61
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <sja1000p_chip_config>
     f5e:	88 23       	and	r24, r24
     f60:	09 f0       	breq	.+2      	; 0xf64 <fsm_sensor_init+0x96>
     f62:	53 c0       	rjmp	.+166    	; 0x100a <fsm_sensor_init+0x13c>
    
    return -1;
  }
  
  /* prepaire message for IDN request */
  idn_msg.flags = MSG_EXT;
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	80 93 1f 02 	sts	0x021F, r24
  idn_msg.id = SENSOR_ID;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	a0 e2       	ldi	r26, 0x20	; 32
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	80 93 20 02 	sts	0x0220, r24
     f76:	90 93 21 02 	sts	0x0221, r25
     f7a:	a0 93 22 02 	sts	0x0222, r26
     f7e:	b0 93 23 02 	sts	0x0223, r27
  idn_msg.length = strlen(idn);
     f82:	10 93 24 02 	sts	0x0224, r17
     f86:	e3 e7       	ldi	r30, 0x73	; 115
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	a5 e2       	ldi	r26, 0x25	; 37
     f8c:	b2 e0       	ldi	r27, 0x02	; 2
  
  /* fill msg data bytes with my sensor ID chars  */
  for (;i < strlen(idn);i++) {
    idn_msg.data[i] = idn[i];
     f8e:	81 91       	ld	r24, Z+
     f90:	8d 93       	st	X+, r24
  idn_msg.flags = MSG_EXT;
  idn_msg.id = SENSOR_ID;
  idn_msg.length = strlen(idn);
  
  /* fill msg data bytes with my sensor ID chars  */
  for (;i < strlen(idn);i++) {
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	eb 37       	cpi	r30, 0x7B	; 123
     f96:	f8 07       	cpc	r31, r24
     f98:	d1 f7       	brne	.-12     	; 0xf8e <fsm_sensor_init+0xc0>
    idn_msg.data[i] = idn[i];
  }
  
  ADCSRA = 0x0F;  /* ADC disabled. interrupt enabled, 128x prescaler ~4kHz */
     f9a:	8f e0       	ldi	r24, 0x0F	; 15
     f9c:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x60;   /*  Vref = Vcc, ADC output in ADCH */
     f9e:	80 e6       	ldi	r24, 0x60	; 96
     fa0:	87 b9       	out	0x07, r24	; 7
  
  fsm->measurement_start = false;
     fa2:	1c 82       	std	Y+4, r1	; 0x04
  
//#ifdef DEBUG
  /* initialize sen_cfg structure with default values
     channel 0 - 2 enabled, no averaging, continual delivery, no treshold */
  for (i = 0;i < 3; i++) {
    sen_cfg.samples[i] = AVRG_1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 08 02 	sts	0x0208, r24
     faa:	80 93 09 02 	sts	0x0209, r24
     fae:	80 93 0a 02 	sts	0x020A, r24
  }
  
  sen_cfg.delivery = 1;
     fb2:	80 93 07 02 	sts	0x0207, r24
  sen_cfg.treshold = 0;
     fb6:	10 92 0b 02 	sts	0x020B, r1
  sen_cfg.treshold_channel = 0;
     fba:	10 92 0c 02 	sts	0x020C, r1
  
  fsm->measurement_start = true;
     fbe:	8c 83       	std	Y+4, r24	; 0x04
//#endif

  CANMSG("Sensor init OK");
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	6e e9       	ldi	r22, 0x9E	; 158
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     fca:	88 ee       	ldi	r24, 0xE8	; 232
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#ifdef DEBUG    
    CANMSG("FSM init OK");
#endif
    break;
  }
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	08 95       	ret
}

/* FSM initial state */
void fsm_sensor_init(struct fsm *fsm, enum event event)
{
  switch (event) {
     fda:	62 30       	cpi	r22, 0x02	; 2
     fdc:	71 05       	cpc	r23, r1
     fde:	49 f4       	brne	.+18     	; 0xff2 <fsm_sensor_init+0x124>
  case EVENT_DO:
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
#ifdef DEBUG    
    CANMSG("FSM init OK");
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	6d ea       	ldi	r22, 0xAD	; 173
     fe4:	71 e0       	ldi	r23, 0x01	; 1
     fe6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
     fea:	88 ee       	ldi	r24, 0xE8	; 232
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
#endif
    break;
  }
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	08 95       	ret
    if (sensor_init(fsm)) {
      // TODO init ERR - provest restart procesoru nejak
    }
    break;
  case EVENT_DO:
    fsm->current_state = wait_for_cmd;
     ffa:	88 e1       	ldi	r24, 0x18	; 24
     ffc:	98 e0       	ldi	r25, 0x08	; 8
     ffe:	99 83       	std	Y+1, r25	; 0x01
    1000:	88 83       	st	Y, r24
#ifdef DEBUG    
    CANMSG("FSM init OK");
#endif
    break;
  }
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	08 95       	ret
  chip.sja_cdr_reg = sjaCDR_CLK_OFF;
  chip.sja_ocr_reg = sjaOCR_MODE_NORMAL|sjaOCR_TX0_LH;
  
  if(sja1000p_chip_config(&chip))
  {
    CANMSG("SJA config error");
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	6c e7       	ldi	r22, 0x7C	; 124
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    1014:	88 ee       	ldi	r24, 0xE8	; 232
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    CANMSG("Restarting chip!");
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	6d e8       	ldi	r22, 0x8D	; 141
    1020:	71 e0       	ldi	r23, 0x01	; 1
    1022:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    1026:	88 ee       	ldi	r24, 0xE8	; 232
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    102e:	e1 cf       	rjmp	.-62     	; 0xff2 <fsm_sensor_init+0x124>

00001030 <wait_for_cmd>:
  }
}

/* FSM state, waiting for coniguration message recive */
static void wait_for_cmd(struct fsm *fsm, enum event event)
{ 
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
  switch (event) {
    1036:	61 30       	cpi	r22, 0x01	; 1
    1038:	71 05       	cpc	r23, r1
    103a:	c1 f0       	breq	.+48     	; 0x106c <wait_for_cmd+0x3c>
    103c:	61 30       	cpi	r22, 0x01	; 1
    103e:	71 05       	cpc	r23, r1
    1040:	48 f0       	brcs	.+18     	; 0x1054 <wait_for_cmd+0x24>
    1042:	62 30       	cpi	r22, 0x02	; 2
    1044:	71 05       	cpc	r23, r1
    1046:	19 f4       	brne	.+6      	; 0x104e <wait_for_cmd+0x1e>
    break;
  case EVENT_EXIT:
    /* sets condition for next FSM start with aspect to delivery setting
        if delivery = shot, FSM rubs only ones
        if delivery = continual, FSM runs continuously untill new setting is recived */
    fsm->measurement_start = sen_cfg_lock.delivery;
    1048:	80 91 11 02 	lds	r24, 0x0211
    104c:	8c 83       	std	Y+4, r24	; 0x04
    break;
  }
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret
static void wait_for_cmd(struct fsm *fsm, enum event event)
{ 
  switch (event) {
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM wait for cmd");
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	69 eb       	ldi	r22, 0xB9	; 185
    1058:	71 e0       	ldi	r23, 0x01	; 1
    105a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    105e:	88 ee       	ldi	r24, 0xE8	; 232
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
        if delivery = shot, FSM rubs only ones
        if delivery = continual, FSM runs continuously untill new setting is recived */
    fsm->measurement_start = sen_cfg_lock.delivery;
    break;
  }
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret
    CANMSG("FSM wait for cmd");
#endif
    break;
  case EVENT_DO:
    /* waiting to start measurement via rx_msg */
    if (fsm->measurement_start) {
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	88 23       	and	r24, r24
    1070:	71 f3       	breq	.-36     	; 0x104e <wait_for_cmd+0x1e>
      /* disable AVR interrupt, so the sen_cfg structure is propperly copied
         sen_cfg copy needed to perform proper measurement if new config recived */
      can_disable_irq();
    1072:	0e 94 55 02 	call	0x4aa	; 0x4aa <can_disable_irq>
      sen_cfg_lock = sen_cfg;
    1076:	a1 e1       	ldi	r26, 0x11	; 17
    1078:	b2 e0       	ldi	r27, 0x02	; 2
    107a:	e7 e0       	ldi	r30, 0x07	; 7
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	01 90       	ld	r0, Z+
    1082:	0d 92       	st	X+, r0
    1084:	81 50       	subi	r24, 0x01	; 1
    1086:	e1 f7       	brne	.-8      	; 0x1080 <wait_for_cmd+0x50>
      can_enable_irq();
    1088:	0e 94 51 02 	call	0x4a2	; 0x4a2 <can_enable_irq>
      fsm->current_state = sensor_capture_data;
    108c:	86 e4       	ldi	r24, 0x46	; 70
    108e:	97 e0       	ldi	r25, 0x07	; 7
    1090:	99 83       	std	Y+1, r25	; 0x01
    1092:	88 83       	st	Y, r24
    1094:	dc cf       	rjmp	.-72     	; 0x104e <wait_for_cmd+0x1e>

00001096 <sensor_send_data>:
  }
}

/* FSM state for transmiting captured samples */
static void sensor_send_data(struct fsm *fsm, enum event event)
{
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
  switch (event) {
    109c:	61 15       	cp	r22, r1
    109e:	71 05       	cpc	r23, r1
    10a0:	61 f4       	brne	.+24     	; 0x10ba <sensor_send_data+0x24>
  case EVENT_ENTRY:
#ifdef DEBUG
    CANMSG("FSM TX data");
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	6a ec       	ldi	r22, 0xCA	; 202
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    10ac:	88 ee       	ldi	r24, 0xE8	; 232
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    fsm->current_state = wait_for_cmd;
    break;
  case EVENT_EXIT:
    break;
  }
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret
}

/* FSM state for transmiting captured samples */
static void sensor_send_data(struct fsm *fsm, enum event event)
{
  switch (event) {
    10ba:	61 30       	cpi	r22, 0x01	; 1
    10bc:	71 05       	cpc	r23, r1
    10be:	d1 f7       	brne	.-12     	; 0x10b4 <sensor_send_data+0x1e>
static char send_samples()
{
  unsigned char i = 0;
  
  /* set msg ID to rx_msg ID */
  tx_msg.id = sen_cfg_lock.rx_msg_id;
    10c0:	20 91 17 02 	lds	r18, 0x0217
    10c4:	30 91 18 02 	lds	r19, 0x0218
    10c8:	40 91 19 02 	lds	r20, 0x0219
    10cc:	50 91 1a 02 	lds	r21, 0x021A
    10d0:	20 93 2f 02 	sts	0x022F, r18
    10d4:	30 93 30 02 	sts	0x0230, r19
    10d8:	40 93 31 02 	sts	0x0231, r20
    10dc:	50 93 32 02 	sts	0x0232, r21
  tx_msg.length = 0;
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
    10e0:	80 91 12 02 	lds	r24, 0x0212
    10e4:	88 23       	and	r24, r24
    10e6:	09 f0       	breq	.+2      	; 0x10ea <sensor_send_data+0x54>
    10e8:	41 c0       	rjmp	.+130    	; 0x116c <sensor_send_data+0xd6>
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	80 91 13 02 	lds	r24, 0x0213
    10f0:	88 23       	and	r24, r24
    10f2:	41 f0       	breq	.+16     	; 0x1104 <sensor_send_data+0x6e>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    10f4:	e9 2f       	mov	r30, r25
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e2 5d       	subi	r30, 0xD2	; 210
    10fa:	fd 4f       	sbci	r31, 0xFD	; 253
    10fc:	80 91 1c 02 	lds	r24, 0x021C
    1100:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
    1102:	9f 5f       	subi	r25, 0xFF	; 255
  tx_msg.length = 0;
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
    1104:	80 91 14 02 	lds	r24, 0x0214
    1108:	88 23       	and	r24, r24
    110a:	41 f0       	breq	.+16     	; 0x111c <sensor_send_data+0x86>
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    110c:	e9 2f       	mov	r30, r25
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	e2 5d       	subi	r30, 0xD2	; 210
    1112:	fd 4f       	sbci	r31, 0xFD	; 253
    1114:	80 91 1d 02 	lds	r24, 0x021D
    1118:	86 83       	std	Z+6, r24	; 0x06
      tx_msg.length++;
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	90 93 33 02 	sts	0x0233, r25
    }
  }
  
  /* if overflow occure, set appropriate bit in msg ID */
  if (sen_data.overflow)
    1120:	80 91 1e 02 	lds	r24, 0x021E
    1124:	88 23       	and	r24, r24
    1126:	61 f0       	breq	.+24     	; 0x1140 <sensor_send_data+0xaa>
    tx_msg.id++;
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	4f 4f       	sbci	r20, 0xFF	; 255
    112e:	5f 4f       	sbci	r21, 0xFF	; 255
    1130:	20 93 2f 02 	sts	0x022F, r18
    1134:	30 93 30 02 	sts	0x0230, r19
    1138:	40 93 31 02 	sts	0x0231, r20
    113c:	50 93 32 02 	sts	0x0232, r21
  
  if (sja1000p_pre_write_config(&tx_msg)) {
    1140:	8e e2       	ldi	r24, 0x2E	; 46
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 ca 03 	call	0x794	; 0x794 <sja1000p_pre_write_config>
    1148:	88 23       	and	r24, r24
    114a:	b1 f0       	breq	.+44     	; 0x1178 <sensor_send_data+0xe2>
#ifdef DEBUG    
    CANMSG("FSM TX data err");
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	66 ed       	ldi	r22, 0xD6	; 214
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    1156:	88 ee       	ldi	r24, 0xE8	; 232
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    CANMSG("FSM TX data");
#endif
    break;
  case EVENT_DO:
    send_samples();
    fsm->current_state = wait_for_cmd;
    115e:	88 e1       	ldi	r24, 0x18	; 24
    1160:	98 e0       	ldi	r25, 0x08	; 8
    1162:	99 83       	std	Y+1, r25	; 0x01
    1164:	88 83       	st	Y, r24
    break;
  case EVENT_EXIT:
    break;
  }
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret
  
  /* fill msg data bytes with captured samples
     only this channels with samples[i] != 0 will be transmited */
  for (i = 0; i < 3; i++) {
    if (sen_cfg_lock.samples[i]) {
      tx_msg.data[tx_msg.length] = sen_data.channel_data[i];
    116c:	80 91 1b 02 	lds	r24, 0x021B
    1170:	80 93 34 02 	sts	0x0234, r24
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	ba cf       	rjmp	.-140    	; 0x10ec <sensor_send_data+0x56>
    CANMSG("FSM TX data err");
#endif    
    return -1;
  }
  
  sja1000p_send_msg();
    1178:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sja1000p_send_msg>
    117c:	f0 cf       	rjmp	.-32     	; 0x115e <sensor_send_data+0xc8>

0000117e <sensor_config>:

  return 0;
}

char sensor_config(struct canmsg_t *rx_msg, struct fsm *fsm)
{
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	eb 01       	movw	r28, r22
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    118c:	fc 01       	movw	r30, r24
    118e:	21 81       	ldd	r18, Z+1	; 0x01
    1190:	32 81       	ldd	r19, Z+2	; 0x02
    1192:	43 81       	ldd	r20, Z+3	; 0x03
    1194:	54 81       	ldd	r21, Z+4	; 0x04
    1196:	20 30       	cpi	r18, 0x00	; 0
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	3f 07       	cpc	r19, r31
    119c:	f0 ee       	ldi	r31, 0xE0	; 224
    119e:	4f 07       	cpc	r20, r31
    11a0:	ff e1       	ldi	r31, 0x1F	; 31
    11a2:	5f 07       	cpc	r21, r31
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <sensor_config+0x2a>
    11a6:	8e c0       	rjmp	.+284    	; 0x12c4 <sensor_config+0x146>
      return -1;
    
    sja1000p_send_msg();
    
#ifdef DEBUG
    CANMSG("IDN? answer OK");
    11a8:	e8 e0       	ldi	r30, 0x08	; 8
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	60 e0       	ldi	r22, 0x00	; 0

/* returns bit position of LSB bit for particular channel settings in msg ID */
static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    11ae:	61 30       	cpi	r22, 0x01	; 1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <sensor_config+0x36>
    11b2:	48 c0       	rjmp	.+144    	; 0x1244 <sensor_config+0xc6>
    11b4:	61 30       	cpi	r22, 0x01	; 1
    11b6:	d0 f4       	brcc	.+52     	; 0x11ec <sensor_config+0x6e>
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	90 e0       	ldi	r25, 0x00	; 0
}

/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    11bc:	79 01       	movw	r14, r18
    11be:	8a 01       	movw	r16, r20
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <sensor_config+0x4c>
    11c2:	16 95       	lsr	r17
    11c4:	07 95       	ror	r16
    11c6:	f7 94       	ror	r15
    11c8:	e7 94       	ror	r14
    11ca:	8a 95       	dec	r24
    11cc:	d2 f7       	brpl	.-12     	; 0x11c2 <sensor_config+0x44>
    11ce:	d8 01       	movw	r26, r16
    11d0:	c7 01       	movw	r24, r14
    11d2:	87 70       	andi	r24, 0x07	; 7
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	09 f4       	brne	.+2      	; 0x11da <sensor_config+0x5c>
    11d8:	73 c0       	rjmp	.+230    	; 0x12c0 <sensor_config+0x142>
    11da:	85 30       	cpi	r24, 0x05	; 5
    11dc:	60 f4       	brcc	.+24     	; 0x11f6 <sensor_config+0x78>
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <sensor_config+0x66>
    11e2:	6c c0       	rjmp	.+216    	; 0x12bc <sensor_config+0x13e>
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	c0 f1       	brcs	.+112    	; 0x1258 <sensor_config+0xda>
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <sensor_config+0x84>

/* returns bit position of LSB bit for particular channel settings in msg ID */
static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    11ec:	62 30       	cpi	r22, 0x02	; 2
    11ee:	69 f1       	breq	.+90     	; 0x124a <sensor_config+0xcc>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	e3 cf       	rjmp	.-58     	; 0x11bc <sensor_config+0x3e>
}

/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    11f6:	86 30       	cpi	r24, 0x06	; 6
    11f8:	09 f4       	brne	.+2      	; 0x11fc <sensor_config+0x7e>
    11fa:	5e c0       	rjmp	.+188    	; 0x12b8 <sensor_config+0x13a>
    11fc:	86 30       	cpi	r24, 0x06	; 6
    11fe:	40 f5       	brcc	.+80     	; 0x1250 <sensor_config+0xd2>
    1200:	80 e2       	ldi	r24, 0x20	; 32
  else {
    /* if recived message is ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
    for (;i < 3;i++) {
      sen_cfg.samples[i] = averaging(channel_avrg(rx_msg->id,shift(i)));
    1202:	81 93       	st	Z+, r24
  }
  else {
    /* if recived message is ADC configuration */
    
    /* decode and save number of samples for every channel from msg ID */
    for (;i < 3;i++) {
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	63 30       	cpi	r22, 0x03	; 3
    1208:	91 f6       	brne	.-92     	; 0x11ae <sensor_config+0x30>
      sen_cfg.samples[i] = averaging(channel_avrg(rx_msg->id,shift(i)));
    }
    
    /* if at least one sample for one channel will measured, continue in decoding */
    if (sen_cfg.samples[0] || sen_cfg.samples[1] || sen_cfg.samples[2]) {
    120a:	80 91 08 02 	lds	r24, 0x0208
    120e:	88 23       	and	r24, r24
    1210:	39 f5       	brne	.+78     	; 0x1260 <sensor_config+0xe2>
    1212:	80 91 09 02 	lds	r24, 0x0209
    1216:	88 23       	and	r24, r24
    1218:	19 f5       	brne	.+70     	; 0x1260 <sensor_config+0xe2>
    121a:	80 91 0a 02 	lds	r24, 0x020A
    121e:	88 23       	and	r24, r24
    1220:	f9 f4       	brne	.+62     	; 0x1260 <sensor_config+0xe2>
      /* start FSM measurement */
      fsm->measurement_start = true;
    }
    
#ifdef DEBUG
    CANMSG("Sensor config OK");
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	65 ef       	ldi	r22, 0xF5	; 245
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    122c:	88 ee       	ldi	r24, 0xE8	; 232
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    1234:	80 e0       	ldi	r24, 0x00	; 0
#endif
  }
  
  return 0;
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	08 95       	ret

/* returns bit position of LSB bit for particular channel settings in msg ID */
static unsigned char shift(unsigned char channel)
{
  
  switch (channel) {
    1244:	85 e0       	ldi	r24, 0x05	; 5
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	b9 cf       	rjmp	.-142    	; 0x11bc <sensor_config+0x3e>
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	b6 cf       	rjmp	.-148    	; 0x11bc <sensor_config+0x3e>
}

/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    1250:	87 30       	cpi	r24, 0x07	; 7
    1252:	81 f1       	breq	.+96     	; 0x12b4 <sensor_config+0x136>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	d5 cf       	rjmp	.-86     	; 0x1202 <sensor_config+0x84>
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	e1 f7       	brne	.-8      	; 0x1254 <sensor_config+0xd6>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	d1 cf       	rjmp	.-94     	; 0x1202 <sensor_config+0x84>
    
    /* if at least one sample for one channel will measured, continue in decoding */
    if (sen_cfg.samples[0] || sen_cfg.samples[1] || sen_cfg.samples[2]) {
      
        /* save RX msg ID */
      sen_cfg.rx_msg_id = rx_msg->id;
    1260:	20 93 0d 02 	sts	0x020D, r18
    1264:	30 93 0e 02 	sts	0x020E, r19
    1268:	40 93 0f 02 	sts	0x020F, r20
    126c:	50 93 10 02 	sts	0x0210, r21
      
      /* decode and save treshold value from msg ID */
      sen_cfg.treshold = treshold(rx_msg->id);
    1270:	da 01       	movw	r26, r20
    1272:	c9 01       	movw	r24, r18
    1274:	7d e0       	ldi	r23, 0x0D	; 13
    1276:	b6 95       	lsr	r27
    1278:	a7 95       	ror	r26
    127a:	97 95       	ror	r25
    127c:	87 95       	ror	r24
    127e:	7a 95       	dec	r23
    1280:	d1 f7       	brne	.-12     	; 0x1276 <sensor_config+0xf8>
    1282:	80 93 0b 02 	sts	0x020B, r24
      
      /* decode and save channel with overflow control from msg ID */
      sen_cfg.treshold_channel = treshold_channel(rx_msg->id);
    1286:	da 01       	movw	r26, r20
    1288:	c9 01       	movw	r24, r18
    128a:	6b e0       	ldi	r22, 0x0B	; 11
    128c:	b6 95       	lsr	r27
    128e:	a7 95       	ror	r26
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	6a 95       	dec	r22
    1296:	d1 f7       	brne	.-12     	; 0x128c <sensor_config+0x10e>
    1298:	83 70       	andi	r24, 0x03	; 3
    129a:	80 93 0c 02 	sts	0x020C, r24
      
      /* decode and save delivery parameter from msg ID */
      sen_cfg.delivery = delivery(rx_msg->id);
    129e:	56 95       	lsr	r21
    12a0:	47 95       	ror	r20
    12a2:	37 95       	ror	r19
    12a4:	27 95       	ror	r18
    12a6:	82 2f       	mov	r24, r18
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	80 93 07 02 	sts	0x0207, r24
      
      /* start FSM measurement */
      fsm->measurement_start = true;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	8c 83       	std	Y+4, r24	; 0x04
    12b2:	b7 cf       	rjmp	.-146    	; 0x1222 <sensor_config+0xa4>
}

/* returns number of samples from patameter of 3bit length */
static unsigned char averaging(unsigned char avrg)
{
  switch (avrg) {
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	a5 cf       	rjmp	.-182    	; 0x1202 <sensor_config+0x84>
    12b8:	80 e4       	ldi	r24, 0x40	; 64
    12ba:	a3 cf       	rjmp	.-186    	; 0x1202 <sensor_config+0x84>
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	a1 cf       	rjmp	.-190    	; 0x1202 <sensor_config+0x84>
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	9f cf       	rjmp	.-194    	; 0x1202 <sensor_config+0x84>
{
  unsigned char i = 0;
  
  /* if recived message is IDN request, send idn_msg */
  if (rx_msg->id == IDN_RQ) {  
    if (sja1000p_pre_write_config(&idn_msg))
    12c4:	8f e1       	ldi	r24, 0x1F	; 31
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	0e 94 ca 03 	call	0x794	; 0x794 <sja1000p_pre_write_config>
    12cc:	88 23       	and	r24, r24
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <sensor_config+0x156>
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	b1 cf       	rjmp	.-158    	; 0x1236 <sensor_config+0xb8>
      return -1;
    
    sja1000p_send_msg();
    12d4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <sja1000p_send_msg>
    
#ifdef DEBUG
    CANMSG("IDN? answer OK");
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	66 ee       	ldi	r22, 0xE6	; 230
    12dc:	71 e0       	ldi	r23, 0x01	; 1
    12de:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_puts_line>
    12e2:	88 ee       	ldi	r24, 0xE8	; 232
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	0e 94 a6 09 	call	0x134c	; 0x134c <delay_ms>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	a4 cf       	rjmp	.-184    	; 0x1236 <sensor_config+0xb8>

000012ee <__vector_19>:

volatile timer timer_msec = 0 , delay_time;

/* Timer 0 interrupt service routine */
ISR(TIMER0_COMP_vect)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
  /* increment msec @1kHz */
    ++timer_msec;
    1300:	80 91 4f 02 	lds	r24, 0x024F
    1304:	90 91 50 02 	lds	r25, 0x0250
    1308:	a0 91 51 02 	lds	r26, 0x0251
    130c:	b0 91 52 02 	lds	r27, 0x0252
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	a1 1d       	adc	r26, r1
    1314:	b1 1d       	adc	r27, r1
    1316:	80 93 4f 02 	sts	0x024F, r24
    131a:	90 93 50 02 	sts	0x0250, r25
    131e:	a0 93 51 02 	sts	0x0251, r26
    1322:	b0 93 52 02 	sts	0x0252, r27
}
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <timer0_init_1khz>:



void timer0_init_1khz()
{
  TCNT0 = 0;
    1338:	12 be       	out	0x32, r1	; 50
  OCR0 = 124;     /* OC register init */
    133a:	8c e7       	ldi	r24, 0x7C	; 124
    133c:	8c bf       	out	0x3c, r24	; 60
  TIMSK |= 0x02;  /* interrupt enable when OC */
    133e:	89 b7       	in	r24, 0x39	; 57
    1340:	82 60       	ori	r24, 0x02	; 2
    1342:	89 bf       	out	0x39, r24	; 57
  TCCR0 |= 0x0B;  /* CTC mode, delicka 64x, normal port op. */
    1344:	83 b7       	in	r24, 0x33	; 51
    1346:	8b 60       	ori	r24, 0x0B	; 11
    1348:	83 bf       	out	0x33, r24	; 51
}
    134a:	08 95       	ret

0000134c <delay_ms>:

void delay_ms(unsigned int delay)
{
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
  delay_time = timer_msec;
    1354:	20 91 4f 02 	lds	r18, 0x024F
    1358:	30 91 50 02 	lds	r19, 0x0250
    135c:	40 91 51 02 	lds	r20, 0x0251
    1360:	50 91 52 02 	lds	r21, 0x0252
    1364:	20 93 6b 02 	sts	0x026B, r18
    1368:	30 93 6c 02 	sts	0x026C, r19
    136c:	40 93 6d 02 	sts	0x026D, r20
    1370:	50 93 6e 02 	sts	0x026E, r21
    1374:	7c 01       	movw	r14, r24
    1376:	00 e0       	ldi	r16, 0x00	; 0
    1378:	10 e0       	ldi	r17, 0x00	; 0
  
  while (timer_msec <= delay_time + delay);
    137a:	80 91 6b 02 	lds	r24, 0x026B
    137e:	90 91 6c 02 	lds	r25, 0x026C
    1382:	a0 91 6d 02 	lds	r26, 0x026D
    1386:	b0 91 6e 02 	lds	r27, 0x026E
    138a:	20 91 4f 02 	lds	r18, 0x024F
    138e:	30 91 50 02 	lds	r19, 0x0250
    1392:	40 91 51 02 	lds	r20, 0x0251
    1396:	50 91 52 02 	lds	r21, 0x0252
    139a:	8e 0d       	add	r24, r14
    139c:	9f 1d       	adc	r25, r15
    139e:	a0 1f       	adc	r26, r16
    13a0:	b1 1f       	adc	r27, r17
    13a2:	82 17       	cp	r24, r18
    13a4:	93 07       	cpc	r25, r19
    13a6:	a4 07       	cpc	r26, r20
    13a8:	b5 07       	cpc	r27, r21
    13aa:	38 f7       	brcc	.-50     	; 0x137a <delay_ms+0x2e>
  
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	08 95       	ret

000013b6 <init_fsm>:
/* Functoins for executing FSM */

#include "../include/fsm.h"

void init_fsm(struct fsm *fsm, state_fcn initial_state)
{
    13b6:	fc 01       	movw	r30, r24
    13b8:	9b 01       	movw	r18, r22
	fsm->current_state = initial_state;
    13ba:	71 83       	std	Z+1, r23	; 0x01
    13bc:	60 83       	st	Z, r22
	fsm->current_state(fsm, EVENT_ENTRY);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	f9 01       	movw	r30, r18
    13c4:	09 95       	icall
}
    13c6:	08 95       	ret

000013c8 <run_fsm>:

void run_fsm(struct fsm *fsm){
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
	fsm->last_state = fsm->current_state;		// set actual state
    13ce:	e8 81       	ld	r30, Y
    13d0:	f9 81       	ldd	r31, Y+1	; 0x01
    13d2:	fb 83       	std	Y+3, r31	; 0x03
    13d4:	ea 83       	std	Y+2, r30	; 0x02
	fsm->current_state(fsm, EVENT_DO);		// change parameter
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	09 95       	icall
	
	if(fsm->last_state != fsm->current_state){ 	// if state was changed
    13dc:	ea 81       	ldd	r30, Y+2	; 0x02
    13de:	fb 81       	ldd	r31, Y+3	; 0x03
    13e0:	88 81       	ld	r24, Y
    13e2:	99 81       	ldd	r25, Y+1	; 0x01
    13e4:	e8 17       	cp	r30, r24
    13e6:	f9 07       	cpc	r31, r25
    13e8:	51 f0       	breq	.+20     	; 0x13fe <run_fsm+0x36>
		fsm->last_state(fsm, EVENT_EXIT); 	// finish the old state
    13ea:	ce 01       	movw	r24, r28
    13ec:	62 e0       	ldi	r22, 0x02	; 2
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	09 95       	icall
		fsm->current_state(fsm, EVENT_ENTRY); 	// initialize the new state
    13f2:	e8 81       	ld	r30, Y
    13f4:	f9 81       	ldd	r31, Y+1	; 0x01
    13f6:	ce 01       	movw	r24, r28
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	09 95       	icall
	}
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <__mulsi3>:
    1404:	62 9f       	mul	r22, r18
    1406:	d0 01       	movw	r26, r0
    1408:	73 9f       	mul	r23, r19
    140a:	f0 01       	movw	r30, r0
    140c:	82 9f       	mul	r24, r18
    140e:	e0 0d       	add	r30, r0
    1410:	f1 1d       	adc	r31, r1
    1412:	64 9f       	mul	r22, r20
    1414:	e0 0d       	add	r30, r0
    1416:	f1 1d       	adc	r31, r1
    1418:	92 9f       	mul	r25, r18
    141a:	f0 0d       	add	r31, r0
    141c:	83 9f       	mul	r24, r19
    141e:	f0 0d       	add	r31, r0
    1420:	74 9f       	mul	r23, r20
    1422:	f0 0d       	add	r31, r0
    1424:	65 9f       	mul	r22, r21
    1426:	f0 0d       	add	r31, r0
    1428:	99 27       	eor	r25, r25
    142a:	72 9f       	mul	r23, r18
    142c:	b0 0d       	add	r27, r0
    142e:	e1 1d       	adc	r30, r1
    1430:	f9 1f       	adc	r31, r25
    1432:	63 9f       	mul	r22, r19
    1434:	b0 0d       	add	r27, r0
    1436:	e1 1d       	adc	r30, r1
    1438:	f9 1f       	adc	r31, r25
    143a:	bd 01       	movw	r22, r26
    143c:	cf 01       	movw	r24, r30
    143e:	11 24       	eor	r1, r1
    1440:	08 95       	ret

00001442 <__udivmodhi4>:
    1442:	aa 1b       	sub	r26, r26
    1444:	bb 1b       	sub	r27, r27
    1446:	51 e1       	ldi	r21, 0x11	; 17
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <__udivmodhi4_ep>

0000144a <__udivmodhi4_loop>:
    144a:	aa 1f       	adc	r26, r26
    144c:	bb 1f       	adc	r27, r27
    144e:	a6 17       	cp	r26, r22
    1450:	b7 07       	cpc	r27, r23
    1452:	10 f0       	brcs	.+4      	; 0x1458 <__udivmodhi4_ep>
    1454:	a6 1b       	sub	r26, r22
    1456:	b7 0b       	sbc	r27, r23

00001458 <__udivmodhi4_ep>:
    1458:	88 1f       	adc	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	5a 95       	dec	r21
    145e:	a9 f7       	brne	.-22     	; 0x144a <__udivmodhi4_loop>
    1460:	80 95       	com	r24
    1462:	90 95       	com	r25
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	08 95       	ret

0000146a <__udivmodsi4>:
    146a:	a1 e2       	ldi	r26, 0x21	; 33
    146c:	1a 2e       	mov	r1, r26
    146e:	aa 1b       	sub	r26, r26
    1470:	bb 1b       	sub	r27, r27
    1472:	fd 01       	movw	r30, r26
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <__udivmodsi4_ep>

00001476 <__udivmodsi4_loop>:
    1476:	aa 1f       	adc	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	ee 1f       	adc	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	a2 17       	cp	r26, r18
    1480:	b3 07       	cpc	r27, r19
    1482:	e4 07       	cpc	r30, r20
    1484:	f5 07       	cpc	r31, r21
    1486:	20 f0       	brcs	.+8      	; 0x1490 <__udivmodsi4_ep>
    1488:	a2 1b       	sub	r26, r18
    148a:	b3 0b       	sbc	r27, r19
    148c:	e4 0b       	sbc	r30, r20
    148e:	f5 0b       	sbc	r31, r21

00001490 <__udivmodsi4_ep>:
    1490:	66 1f       	adc	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	1a 94       	dec	r1
    149a:	69 f7       	brne	.-38     	; 0x1476 <__udivmodsi4_loop>
    149c:	60 95       	com	r22
    149e:	70 95       	com	r23
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	9b 01       	movw	r18, r22
    14a6:	ac 01       	movw	r20, r24
    14a8:	bd 01       	movw	r22, r26
    14aa:	cf 01       	movw	r24, r30
    14ac:	08 95       	ret

000014ae <ultoa>:
    14ae:	fa 01       	movw	r30, r20
    14b0:	cf 93       	push	r28
    14b2:	ff 93       	push	r31
    14b4:	ef 93       	push	r30
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	cc f0       	brlt	.+50     	; 0x14ec <ultoa+0x3e>
    14ba:	25 32       	cpi	r18, 0x25	; 37
    14bc:	bc f4       	brge	.+46     	; 0x14ec <ultoa+0x3e>
    14be:	c2 2f       	mov	r28, r18
    14c0:	2c 2f       	mov	r18, r28
    14c2:	33 27       	eor	r19, r19
    14c4:	44 27       	eor	r20, r20
    14c6:	55 27       	eor	r21, r21
    14c8:	ff 93       	push	r31
    14ca:	ef 93       	push	r30
    14cc:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodsi4>
    14d0:	ef 91       	pop	r30
    14d2:	ff 91       	pop	r31
    14d4:	60 5d       	subi	r22, 0xD0	; 208
    14d6:	6a 33       	cpi	r22, 0x3A	; 58
    14d8:	0c f0       	brlt	.+2      	; 0x14dc <ultoa+0x2e>
    14da:	69 5d       	subi	r22, 0xD9	; 217
    14dc:	61 93       	st	Z+, r22
    14de:	b9 01       	movw	r22, r18
    14e0:	ca 01       	movw	r24, r20
    14e2:	60 50       	subi	r22, 0x00	; 0
    14e4:	70 40       	sbci	r23, 0x00	; 0
    14e6:	80 40       	sbci	r24, 0x00	; 0
    14e8:	90 40       	sbci	r25, 0x00	; 0
    14ea:	51 f7       	brne	.-44     	; 0x14c0 <ultoa+0x12>
    14ec:	10 82       	st	Z, r1
    14ee:	8f 91       	pop	r24
    14f0:	9f 91       	pop	r25
    14f2:	cf 91       	pop	r28
    14f4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <strrev>

000014f8 <strrev>:
    14f8:	dc 01       	movw	r26, r24
    14fa:	fc 01       	movw	r30, r24
    14fc:	67 2f       	mov	r22, r23
    14fe:	71 91       	ld	r23, Z+
    1500:	77 23       	and	r23, r23
    1502:	e1 f7       	brne	.-8      	; 0x14fc <strrev+0x4>
    1504:	32 97       	sbiw	r30, 0x02	; 2
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <strrev+0x18>
    1508:	7c 91       	ld	r23, X
    150a:	6d 93       	st	X+, r22
    150c:	70 83       	st	Z, r23
    150e:	62 91       	ld	r22, -Z
    1510:	ae 17       	cp	r26, r30
    1512:	bf 07       	cpc	r27, r31
    1514:	c8 f3       	brcs	.-14     	; 0x1508 <strrev+0x10>
    1516:	08 95       	ret

00001518 <_exit>:
    1518:	f8 94       	cli

0000151a <__stop_program>:
    151a:	ff cf       	rjmp	.-2      	; 0x151a <__stop_program>
